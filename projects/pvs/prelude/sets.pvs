%%% This file is automatically generated, from an OMDoc document 
%%% by an XSL style sheet (omdoc2xxx.xsl)  do not edit
%%% for information about OMDoc, see http://www.mathweb.org/omdoc


%%% The original omdoc with identifier `sets.omdoc`
%%% was created by: PVS (author)
%%% on: 2001-6-11@2:5:19 (created)

sets_test: THEORY
 BEGIN

  set: TYPE = setof;
  member: funtype(T,set,bool) = (lambda(x: T, a: set): a(x));
  empty?: funtype(set,bool) = (lambda(a: set): (forall(x: T): NOT(member(x,a))));
  emptyset: set = (set(x: T): FALSE);
  nonempty?: funtype(set,bool) = (lambda(a: set): NOT(empty?(a)));
  full?: funtype(set,bool) = (lambda(a: set): (forall(x: T): member(x,a)));
  fullset: set = (set(x: T): TRUE);
  subset?: funtype(set,set,bool) = (lambda(a: set, b: set): (forall(x: T): =>(member(x,a),member(x,b))));
  strict_subset?: funtype(set,set,bool) = (lambda(a: set, b: set): (subset?(a,b) & /=(a,b)));
  union: funtype(set,set,set) = (lambda(a: set, b: set): (set(x: T): OR(member(x,a),member(x,b))));
  intersection: funtype(set,set,set) = (lambda(a: set, b: set): (set(x: T): AND(member(x,a),member(x,b))));
  disjoint?: funtype(set,set,bool) = (lambda(a: set, b: set): empty?(intersection(a,b)));
  complement: funtype(set,set) = (lambda(a: set): (set(x: T): NOT(member(x,a))));
  difference: funtype(set,set,set) = (lambda(a: set, b: set): (set(x: T): AND(member(x,a),NOT(member(x,b)))));
  symmetric_difference: funtype(set,set,set) = (lambda(a: set, b: set): union(difference(a,b),difference(b,a)));
  every: funtype(PRED,funtype(set,bool)) = (lambda(p: PRED): (lambda(a: set): (forall(x: (a)): p(x))));
  every: funtype(PRED,set,bool) = (lambda(p: PRED, a: set): (forall(x: (a)): p(x)));
  some: funtype(PRED,funtype(set,bool)) = (lambda(p: PRED): (lambda(a: set): (exists(x: (a)): p(x))));
  some: funtype(PRED,set,bool) = (lambda(p: PRED, a: set): (exists(x: (a)): p(x)));
  singleton?: funtype(set,bool) = (lambda(a: set): (exists(x: (a)): (forall(y: (a)): =(x,y))));
  singleton: funtype(T,(singleton?)) = (lambda(x: T): (set(y: T): =(y,x)));
  add: funtype(T,set,(nonempty?)) = (lambda(x: T, a: set): (set(y: T): OR(=(x,y),member(y,a))));
  remove: funtype(T,set,set) = (lambda(x: T, a: set): (set(y: T): AND(/=(x,y),member(y,a))));
  choose: (sigmatype(p: (nonempty?)): (p)) = (lambda(p: (nonempty?)): epsilon(p));
  the: (sigmatype(p: (singleton?)): (p)) = (lambda(p: (singleton?)): epsilon(p));
  rest: funtype(set,set) = (lambda(a: set):  IF empty?(a) THEN a ELSE remove(choose(a),a) ENDIF );


 END sets_test



