%%% This file is automatically generated, from an OMDoc document 
%%% by an XSL style sheet (omdoc2xxx.xsl)  do not edit
%%% for information about OMDoc, see http://www.mathweb.org/omdoc


%%% The original omdoc with identifier `exponentiation.omdoc`
%%% was created by: PVS (author)
%%% on: 2001-6-11@2:5:30 (created)

exponentiation_test: THEORY
 BEGIN

  expt: RECURSIVE funtype(real,nat,real) = (lambda(r: real, n: nat):  IF =(n,0) THEN 1 ELSE *(r,expt(r,-(n,1))) ENDIF ) MEASURE n;
expt_pos_aux: LEMMA (forall(n: nat, px: posreal): >(expt(px,n),0));
expt_nonzero_aux: LEMMA (forall(n: nat, n0x: nzreal): /=(expt(n0x,n),0));
  ^: funtype(r: real,((set(i: int): OR(/=(r,0),>=(i,0)))),real) = (lambda(r: real, i: ((set(i: int): OR(/=(r,0),>=(i,0))))):  IF >=(i,0) THEN expt(r,i) ELSE /(1,expt(r,-(i))) ENDIF );
expt_pos: LEMMA (forall(i: int, px: posreal): >(^(px,i),0));
expt_nonzero: LEMMA (forall(i: int, n0x: nzreal): /=(^(n0x,i),0));
expt_x0_aux: LEMMA (forall(x: real): =(expt(x,0),1));
expt_x1_aux: LEMMA (forall(x: real): =(expt(x,1),x));
expt_1n_aux: LEMMA (forall(n: nat): =(expt(1,n),1));
increasing_expt_aux: LEMMA (forall(gt1x: ((set(r: posreal): >(r,1))), m: nat): >(expt(gt1x,+(m,2)),gt1x));
decreasing_expt_aux: LEMMA (forall(lt1x: ((set(r: posreal): <(r,1))), m: nat): <(expt(lt1x,+(m,2)),lt1x));
expt_1_aux: LEMMA (forall(n: nat, px: posreal): IFF(=(expt(px,+(n,1)),1),=(px,1)));
expt_plus_aux: LEMMA (forall(m: nat, n: nat, n0x: nzreal): =(expt(n0x,+(m,n)),*(expt(n0x,m),expt(n0x,n))));
expt_minus_aux: LEMMA (forall(m: nat, n: nat, n0x: nzreal): IMPLIES(>=(m,n),=(expt(n0x,-(m,n)),/(expt(n0x,m),expt(n0x,n)))));
expt_times_aux: LEMMA (forall(m: nat, n: nat, n0x: nzreal): =(expt(n0x,*(m,n)),expt(expt(n0x,m),n)));
expt_divide_aux: LEMMA (forall(m: nat, n: nat, n0x: nzreal): =(/(1,expt(n0x,*(m,n))),expt(/(1,expt(n0x,m)),n)));
both_sides_expt1_aux: LEMMA (forall(m: nat, n: nat, px: posreal): IFF(=(expt(px,+(m,1)),expt(px,+(n,1))),OR(=(m,n),=(px,1))));
both_sides_expt2_aux: LEMMA (forall(pm: posnat, px: posreal, py: posreal): IFF(=(expt(px,pm),expt(py,pm)),=(px,py)));
both_sides_expt_pos_lt_aux: LEMMA (forall(m: nat, px: posreal, py: posreal): IFF(<(expt(px,+(m,1)),expt(py,+(m,1))),<(px,py)));
both_sides_expt_gt1_lt_aux: LEMMA (forall(gt1x: ((set(r: posreal): >(r,1))), m: nat, n: nat): IFF(<(expt(gt1x,+(m,1)),expt(gt1x,+(n,1))),<(m,n)));
both_sides_expt_lt1_lt_aux: LEMMA (forall(lt1x: ((set(r: posreal): <(r,1))), m: nat, n: nat): IFF(<(expt(lt1x,+(m,1)),expt(lt1x,+(n,1))),<(n,m)));
both_sides_expt_pos_le_aux: LEMMA (forall(m: nat, px: posreal, py: posreal): IFF(<=(expt(px,+(m,1)),expt(py,+(m,1))),<=(px,py)));
both_sides_expt_gt1_le_aux: LEMMA (forall(gt1x: ((set(r: posreal): >(r,1))), m: nat, n: nat): IFF(<=(expt(gt1x,+(m,1)),expt(gt1x,+(n,1))),<=(m,n)));
both_sides_expt_lt1_le_aux: LEMMA (forall(lt1x: ((set(r: posreal): <(r,1))), m: nat, n: nat): IFF(<=(expt(lt1x,+(m,1)),expt(lt1x,+(n,1))),<=(n,m)));
both_sides_expt_pos_gt_aux: LEMMA (forall(m: nat, px: posreal, py: posreal): IFF(>(expt(px,+(m,1)),expt(py,+(m,1))),>(px,py)));
both_sides_expt_gt1_gt_aux: LEMMA (forall(gt1x: ((set(r: posreal): >(r,1))), m: nat, n: nat): IFF(>(expt(gt1x,+(m,1)),expt(gt1x,+(n,1))),>(m,n)));
both_sides_expt_lt1_gt_aux: LEMMA (forall(lt1x: ((set(r: posreal): <(r,1))), m: nat, n: nat): IFF(>(expt(lt1x,+(m,1)),expt(lt1x,+(n,1))),>(n,m)));
both_sides_expt_pos_ge_aux: LEMMA (forall(m: nat, px: posreal, py: posreal): IFF(>=(expt(px,+(m,1)),expt(py,+(m,1))),>=(px,py)));
both_sides_expt_gt1_ge_aux: LEMMA (forall(gt1x: ((set(r: posreal): >(r,1))), m: nat, n: nat): IFF(>=(expt(gt1x,+(m,1)),expt(gt1x,+(n,1))),>=(m,n)));
both_sides_expt_lt1_ge_aux: LEMMA (forall(lt1x: ((set(r: posreal): <(r,1))), m: nat, n: nat): IFF(>=(expt(lt1x,+(m,1)),expt(lt1x,+(n,1))),>=(n,m)));
expt_of_mult: LEMMA (forall(n: nat, x: real, y: real): =(expt(*(x,y),n),*(expt(x,n),expt(y,n))));
expt_of_div: LEMMA (forall(n: nat, n0y: nzreal, x: real): =(expt(/(x,n0y),n),/(expt(x,n),expt(n0y,n))));
expt_of_inv: LEMMA (forall(n: nat, n0x: nzreal): =(expt(/(1,n0x),n),/(1,expt(n0x,n))));
expt_of_abs: LEMMA (forall(n: nat, x: real): =(expt(abs(x),n),abs(expt(x,n))));
abs_of_expt_inv: LEMMA (forall(n: nat, n0x: nzreal): =(abs(/(1,expt(n0x,n))),/(1,expt(abs(n0x),n))));
expt_x0: LEMMA (forall(x: real): =(^(x,0),1));
expt_x1: LEMMA (forall(x: real): =(^(x,1),x));
expt_1i: LEMMA (forall(i: int): =(^(1,i),1));
expt_plus: LEMMA (forall(i: int, j: int, n0x: nzreal): =(^(n0x,+(i,j)),*(^(n0x,i),^(n0x,j))));
expt_times: LEMMA (forall(i: int, j: int, n0x: nzreal): =(^(n0x,*(i,j)),^(^(n0x,i),j)));
expt_inverse: LEMMA (forall(i: int, n0x: nzreal): =(^(n0x,-(i)),/(1,^(n0x,i))));
expt_div: LEMMA (forall(i: int, j: int, n0x: nzreal): =(/(^(n0x,i),^(n0x,j)),^(n0x,-(i,j))));
both_sides_expt1: LEMMA (forall(n0i: nzint, n0j: nzint, px: posreal): IFF(=(^(px,n0i),^(px,n0j)),OR(=(n0i,n0j),=(px,1))));
both_sides_expt2: LEMMA (forall(n0i: nzint, px: posreal, py: posreal): IFF(=(^(px,n0i),^(py,n0i)),=(px,py)));
pos_expt_gt: LEMMA (forall(b: above(1), n: nat): <(n,^(b,n)));
expt_ge1: LEMMA (forall(b: above(1), n: nat): >=(^(b,n),1));
both_sides_expt_pos_lt: LEMMA (forall(pm: posnat, px: posreal, py: posreal): IFF(<(^(px,pm),^(py,pm)),<(px,py)));
both_sides_expt_gt1_lt: LEMMA (forall(gt1x: ((set(r: posreal): >(r,1))), i: int, j: int): IFF(<(^(gt1x,i),^(gt1x,j)),<(i,j)));
both_sides_expt_lt1_lt: LEMMA (forall(i: int, j: int, lt1x: ((set(r: posreal): <(r,1)))): IFF(<(^(lt1x,i),^(lt1x,j)),<(j,i)));
both_sides_expt_pos_le: LEMMA (forall(pm: posnat, px: posreal, py: posreal): IFF(<=(^(px,pm),^(py,pm)),<=(px,py)));
both_sides_expt_gt1_le: LEMMA (forall(gt1x: ((set(r: posreal): >(r,1))), i: int, j: int): IFF(<=(^(gt1x,i),^(gt1x,j)),<=(i,j)));
both_sides_expt_lt1_le: LEMMA (forall(i: int, j: int, lt1x: ((set(r: posreal): <(r,1)))): IFF(<=(^(lt1x,i),^(lt1x,j)),<=(j,i)));
both_sides_expt_pos_gt: LEMMA (forall(pm: posnat, px: posreal, py: posreal): IFF(>(^(px,pm),^(py,pm)),>(px,py)));
both_sides_expt_gt1_gt: LEMMA (forall(gt1x: ((set(r: posreal): >(r,1))), i: int, j: int): IFF(>(^(gt1x,i),^(gt1x,j)),>(i,j)));
both_sides_expt_lt1_gt: LEMMA (forall(i: int, j: int, lt1x: ((set(r: posreal): <(r,1)))): IFF(>(^(lt1x,i),^(lt1x,j)),>(j,i)));
both_sides_expt_pos_ge: LEMMA (forall(pm: posnat, px: posreal, py: posreal): IFF(>=(^(px,pm),^(py,pm)),>=(px,py)));
both_sides_expt_gt1_ge: LEMMA (forall(gt1x: ((set(r: posreal): >(r,1))), i: int, j: int): IFF(>=(^(gt1x,i),^(gt1x,j)),>=(i,j)));
both_sides_expt_lt1_ge: LEMMA (forall(i: int, j: int, lt1x: ((set(r: posreal): <(r,1)))): IFF(>=(^(lt1x,i),^(lt1x,j)),>=(j,i)));
expt_gt1_pos: LEMMA (forall(gt1x: ((set(r: posreal): >(r,1))), pm: posnat): >=(^(gt1x,pm),gt1x));
expt_gt1_neg: LEMMA (forall(gt1x: ((set(r: posreal): >(r,1))), pm: posnat): <(^(gt1x,-(pm)),1));
expt_gt1_nonpos: LEMMA (forall(gt1x: ((set(r: posreal): >(r,1))), m: nat): <=(^(gt1x,-(m)),1));
mult_expt: LEMMA (forall(i: int, n0x: nzreal, n0y: nzreal): =(^(*(n0x,n0y),i),*(^(n0x,i),^(n0y,i))));
div_expt: LEMMA (forall(i: int, n0x: nzreal, n0y: nzreal): =(^(/(n0x,n0y),i),/(^(n0x,i),^(n0y,i))));
inv_expt: LEMMA (forall(i: int, n0x: nzreal): =(^(/(1,n0x),i),/(1,^(n0x,i))));
abs_expt: LEMMA (forall(i: int, n0x: nzreal): =(^(abs(n0x),i),abs(^(n0x,i))));
expt_lt1_bound1: LEMMA (forall(lt1x: ((set(r: posreal): <(r,1))), n: nat): <=(expt(lt1x,n),1));
expt_lt1_bound2: LEMMA (forall(lt1x: ((set(r: posreal): <(r,1))), pn: posnat): <(expt(lt1x,pn),1));
expt_gt1_bound1: LEMMA (forall(gt1x: ((set(r: posreal): >(r,1))), n: nat): <=(1,expt(gt1x,n)));
expt_gt1_bound2: LEMMA (forall(gt1x: ((set(r: posreal): >(r,1))), pn: posnat): <(1,expt(gt1x,pn)));
large_expt: LEMMA (forall(px: posreal): IMPLIES(<(1,px),(forall(py: posreal): (exists(n: nat): <(py,expt(px,n))))));
small_expt: LEMMA (forall(px: posreal): IMPLIES(<(px,1),(forall(py: posreal): (exists(n: nat): <(expt(px,n),py)))));
exponent_adjust: LEMMA (forall(b: above(1), i: int, pm: posnat): <(+(^(b,i),^(b,-(i,pm))),^(b,+(i,1))));
exp_of_exists: LEMMA (forall(b: above(1), py: posreal): (exists(i: int): (<=(^(b,i),py) & <(py,^(b,+(i,1))))));


 END exponentiation_test



