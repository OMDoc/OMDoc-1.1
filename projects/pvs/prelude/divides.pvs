%%% This file is automatically generated, from an OMDoc document 
%%% by an XSL style sheet (omdoc2xxx.xsl)  do not edit
%%% for information about OMDoc, see http://www.mathweb.org/omdoc


%%% The original omdoc with identifier `divides.omdoc`
%%% was created by: PVS (author)
%%% on: 2001-6-11@2:5:33 (created)

divides_test: THEORY
 BEGIN

  divides: funtype(int,int,bool) = (lambda(n: int, m: int): (exists(x: int): =(m,*(n,x))));
  divides: funtype(int,funtype(int,bool)) = (lambda(n: int): (lambda(m: int): divides(n,m)));
divides_sum: LEMMA (forall(m: int, n: int, x: int): IMPLIES(AND(divides(x,n),divides(x,m)),divides(x,+(n,m))));
divides_diff: LEMMA (forall(m: int, n: int, x: int): IMPLIES(AND(divides(x,n),divides(x,m)),divides(x,-(n,m))));
divides_opposite: LEMMA (forall(n: int, x: int): IFF(divides(x,-(n)),divides(x,n)));
opposite_divides: LEMMA (forall(n: int, x: int): IFF(divides(-(x),n),divides(x,n)));
divides_prod1: LEMMA (forall(m: int, n: int, x: int): IMPLIES(divides(x,n),divides(x,*(n,m))));
divides_prod2: LEMMA (forall(m: int, n: int, x: int): IMPLIES(divides(x,n),divides(x,*(m,n))));
divides_prod_elim1: LEMMA (forall(m: int, n: int, nz: nzint): IFF(divides(*(nz,n),*(nz,m)),divides(n,m)));
divides_prod_elim2: LEMMA (forall(m: int, n: int, nz: nzint): IFF(divides(*(n,nz),*(m,nz)),divides(n,m)));
divides_reflexive: LEMMA (forall(n: int): divides(n,n));
divides_transitive: LEMMA (forall(l: int, m: int, n: int): IMPLIES(AND(divides(n,m),divides(m,l)),divides(n,l)));
product_one: LEMMA (forall(x: int, y: int): IFF(=(*(x,y),1),OR(AND(=(x,1),=(y,1)),AND(=(x,-(1)),=(y,-(1))))));
mutual_divisors: LEMMA (forall(m: int, n: int): IMPLIES(AND(divides(n,m),divides(m,n)),OR(=(n,m),=(n,-(m)))));
mutual_divisors_nat: LEMMA (forall(p: nat, q: nat): IMPLIES(AND(divides(p,q),divides(q,p)),=(p,q)));
one_divides: LEMMA (forall(n: int): divides(1,n));
divides_zero: LEMMA (forall(n: int): divides(n,0));
zero_div_zero: LEMMA (forall(n: int): IFF(divides(0,n),=(n,0)));
divisors_of_one: LEMMA (forall(n: int): IFF(divides(n,1),OR(=(n,1),=(n,-(1)))));
one_div_one: LEMMA (forall(p: nat): IFF(divides(p,1),=(p,1)));
divisor_smaller: LEMMA (forall(p: nat, q: nat): IMPLIES(divides(p,q),OR(=(q,0),<=(p,q))));


 END divides_test



