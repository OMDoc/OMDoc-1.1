%%% This file is automatically generated, from an OMDoc document 
%%% by an XSL style sheet (omdoc2xxx.xsl)  do not edit
%%% for information about OMDoc, see http://www.mathweb.org/omdoc


%%% The original omdoc with identifier `function_image.omdoc`
%%% was created by: PVS (author)
%%% on: 2001-6-11@2:5:21 (created)

function_image_test: THEORY
 BEGIN

fun_exists: LEMMA IMPLIES(OR((exists(y: R): TRUE),NOT((exists(x: D): TRUE))),(exists(f: funtype(D,R)): TRUE));
  image: funtype(funtype(D,R),set,set) = (lambda(f: funtype(D,R), X: set): (set(y: R): (exists(x: (X)): =(y,f(x)))));
  image: funtype(funtype(D,R),funtype(set,set)) = (lambda(f: funtype(D,R)): (lambda(X: set): image(f,X)));
  inverse_image: funtype(funtype(D,R),set,set) = (lambda(f: funtype(D,R), Y: set): (set(x: D): member(f(x),Y)));
  inverse_image: funtype(funtype(D,R),funtype(set,set)) = (lambda(f: funtype(D,R)): (lambda(Y: set): inverse_image(f,Y)));
image_inverse_image: LEMMA (forall(Y: set, f: funtype(D,R)): subset?(image(f,inverse_image(f,Y)),Y));
inverse_image_image: LEMMA (forall(X: set, f: funtype(D,R)): subset?(X,inverse_image(f,image(f,X))));
image_subset: LEMMA (forall(X1: set, X2: set, f: funtype(D,R)): IMPLIES(subset?(X1,X2),subset?(image(f,X1),image(f,X2))));
inverse_image_subset: LEMMA (forall(Y1: set, Y2: set, f: funtype(D,R)): IMPLIES(subset?(Y1,Y2),subset?(inverse_image(f,Y1),inverse_image(f,Y2))));
image_union: LEMMA (forall(X1: set, X2: set, f: funtype(D,R)): =(image(f,union(X1,X2)),union(image(f,X1),image(f,X2))));
image_intersection: LEMMA (forall(X1: set, X2: set, f: funtype(D,R)): subset?(image(f,intersection(X1,X2)),intersection(image(f,X1),image(f,X2))));
inverse_image_union: LEMMA (forall(Y1: set, Y2: set, f: funtype(D,R)): =(inverse_image(f,union(Y1,Y2)),union(inverse_image(f,Y1),inverse_image(f,Y2))));
inverse_image_intersection: LEMMA (forall(Y1: set, Y2: set, f: funtype(D,R)): =(inverse_image(f,intersection(Y1,Y2)),intersection(inverse_image(f,Y1),inverse_image(f,Y2))));
inverse_image_complement: LEMMA (forall(Y: set, f: funtype(D,R)): =(inverse_image(f,complement(Y)),complement(inverse_image(f,Y))));


 END function_image_test



