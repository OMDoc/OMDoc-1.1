%%% This file is automatically generated, from an OMDoc document 
%%% by an XSL style sheet (omdoc2xxx.xsl)  do not edit
%%% for information about OMDoc, see http://www.mathweb.org/omdoc


%%% The original omdoc with identifier `bv_nat.omdoc`
%%% was created by: PVS (author)
%%% on: 2001-6-11@2:5:42 (created)

bv_nat_test: THEORY
 BEGIN

  bv2nat_rec: RECURSIVE funtype(upto(N),bvec,nat) = (lambda(n: upto(N), bv: bvec):  IF =(n,0) THEN 0 ELSE +(*(exp2(-(n,1)),b2n(^(bv,-(n,1)))),bv2nat_rec(-(n,1),bv)) ENDIF ) MEASURE n;
bv_lem: LEMMA (forall(n: below(N), bv: bvec): OR(=(bv(n),FALSE),=(bv(n),TRUE)));
bv2nat_rec_bound: LEMMA (forall(n: upto(N), bv: bvec): <(bv2nat_rec(n,bv),exp2(n)));
  bv2nat: funtype(bvec,below(exp2(N))) = (lambda(bv: bvec): bv2nat_rec(N,bv));
bv2nat_inj_rec: LEMMA (forall(bv1: bvec, bv2: bvec, n: upto(N)): (=(bv2nat_rec(n,bv1),bv2nat_rec(n,bv2)) <=> (forall(m: below(N)): IMPLIES(<(m,n),=(bv1(m),bv2(m))))));
bv2nat_surj_rec: LEMMA (forall(n: upto(N), y: below(exp2(n))): (exists(bv: bvec): =(bv2nat_rec(n,bv),y)));
bv2nat_inj: THEOREM (forall(x: bvec, y: bvec): IMPLIES(=(bv2nat(x),bv2nat(y)),=(x,y)));
bv2nat_surj: THEOREM (forall(y: below(exp2(N))): (exists(x: bvec): =(bv2nat(x),y)));
bv2nat_bij: THEOREM bijective?(bv2nat);
bv2nat_rec_fill_F: LEMMA (forall(n: upto(N)): =(bv2nat_rec(n,fill(FALSE)),0));
bv2nat_rec_fill_T: LEMMA (forall(n: upto(N)): =(bv2nat_rec(n,fill(TRUE)),-(exp2(n),1)));
bv2nat_fill_F: LEMMA =(bv2nat(fill(FALSE)),0);
bv2nat_fill_T: LEMMA =(bv2nat(fill(TRUE)),-(exp2(N),1));
bv2nat_eq0: LEMMA (forall(bv: bvec): IMPLIES(=(bv2nat(bv),0),=(bv,fill(FALSE))));
bv2nat_eq_max: LEMMA (forall(bv: bvec): IMPLIES(=(bv2nat(bv),-(exp2(N),1)),=(bv,fill(TRUE))));
bv2nat_top_bit: THEOREM (forall(bv: bvec): IMPLIES(>(N,0), IF <(bv2nat(bv),exp2(-(N,1))) THEN =(^(bv,-(N,1)),FALSE) ELSE =(^(bv,-(N,1)),TRUE) ENDIF ));
bv2nat_topbit: THEOREM (forall(bv: bvec): IMPLIES(>(N,0),=(^(bv,-(N,1)),>=(bv2nat(bv),exp2(-(N,1))))));
  nat2bv: (sigmatype(val: below(exp2(N))): ((set(bv: bvec): =(bv2nat(bv),val))));
nat2bv_def: LEMMA =(nat2bv,inverse(bv2nat));
nat2bv_bij: THEOREM bijective?(nat2bv);
nat2bv_inv: THEOREM (forall(bv: bvec): =(nat2bv(bv2nat(bv)),bv));
nat2bv_rew: LEMMA (forall(bv: bvec, val: below(exp2(N))): IFF(=(nat2bv(val),bv),=(bv2nat(bv),val)));
bv2nat_inv: THEOREM (forall(val: below(exp2(N))): =(bv2nat(nat2bv(val)),val));


 END bv_nat_test



