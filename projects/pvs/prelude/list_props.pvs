%%% This file is automatically generated, from an OMDoc document 
%%% by an XSL style sheet (omdoc2xxx.xsl)  do not edit
%%% for information about OMDoc, see http://www.mathweb.org/omdoc


%%% The original omdoc with identifier `list_props.omdoc`
%%% was created by: PVS (author)
%%% on: 2001-6-11@2:5:38 (created)

list_props_test: THEORY
 BEGIN

  length: RECURSIVE funtype(list,nat) = (lambda(l: list):  CASES l OF null: 0, cons(x, y):+(length(y),1) ENDCASES ) MEASURE reduce_nat(0,(lambda(x: T, n: nat): +(n,1)));
  member: RECURSIVE funtype(T,list,bool) = (lambda(x: T, l: list):  CASES l OF null: FALSE, cons(hd, tl):OR(=(x,hd),member(x,tl)) ENDCASES ) MEASURE length(l);
member_null: LEMMA (forall(l: list, x: T): IMPLIES(member(x,l),NOT(null?(l))));
  nth: RECURSIVE funtype(l: list,below,T) = (lambda(l: list, n: below):  IF =(n,0) THEN car(l) ELSE nth(cdr(l),-(n,1)) ENDIF ) MEASURE length(l);
  append: RECURSIVE funtype(list,list,list) = (lambda(l1: list, l2: list):  CASES l1 OF null: l2, cons(x, y):cons(x,append(y,l2)) ENDCASES ) MEASURE length(l1);
  reverse: RECURSIVE funtype(list,list) = (lambda(l: list):  CASES l OF null: l, cons(x, y):append(reverse(y),cons(x,null)) ENDCASES ) MEASURE length;
append_null: LEMMA (forall(l: list): =(append(l,null),l));
append_assoc: LEMMA (forall(l1: list, l2: list, l3: list): =(append(append(l1,l2),l3),append(l1,append(l2,l3))));
reverse_append: LEMMA (forall(l1: list, l2: list): =(reverse(append(l1,l2)),append(reverse(l2),reverse(l1))));
reverse_reverse: LEMMA (forall(l: list): =(reverse(reverse(l)),l));
length_append: LEMMA (forall(l1: list, l2: list): =(length(append(l1,l2)),+(length(l1),length(l2))));
length_reverse: LEMMA (forall(l: list): =(length(reverse(l)),length(l)));
list_rep: LEMMA (forall(a: T, b: T, c: T): =(list(a,b,c),cons(a,cons(b,cons(c,null)))));
every_append: LEMMA (forall(P: PRED, l1: list, l2: list): IFF(every(P)(append(l1,l2)),AND(every(P)(l1),every(P)(l2))));
every_disjunct1: LEMMA (forall(P: PRED, Q: PRED, l: list): IMPLIES(every(P)(l),every((lambda(x: T): OR(P(x),Q(x))))(l)));
every_disjunct2: LEMMA (forall(P: PRED, Q: PRED, l: list): IMPLIES(every(Q)(l),every((lambda(x: T): OR(P(x),Q(x))))(l)));
every_conjunct: LEMMA (forall(P: PRED, Q: PRED, l: list): =>(every((lambda(x: T): AND(P(x),Q(x))))(l),AND(every(P)(l),every(Q)(l))));
every_member: LEMMA (forall(l: list): every((set(c: T): member(c,l)))(l));


 END list_props_test



