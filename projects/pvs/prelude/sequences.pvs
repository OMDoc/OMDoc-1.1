%%% This file is automatically generated, from an OMDoc document 
%%% by an XSL style sheet (omdoc2xxx.xsl)  do not edit
%%% for information about OMDoc, see http://www.mathweb.org/omdoc


%%% The original omdoc with identifier `sequences.omdoc`
%%% was created by: PVS (author)
%%% on: 2001-6-11@2:5:36 (created)

sequences_test: THEORY
 BEGIN

  sequence: TYPE = funtype(nat,T);
  nth: funtype(sequence,nat,T) = (lambda(seq: sequence, n: nat): seq(n));
  suffix: funtype(sequence,nat,sequence) = (lambda(seq: sequence, n: nat): (lambda(i: nat): seq(+(i,n))));
  first: funtype(sequence,T) = (lambda(seq: sequence): nth(seq,0));
  rest: funtype(sequence,sequence) = (lambda(seq: sequence): suffix(seq,1));
  delete: funtype(nat,sequence,sequence) = (lambda(n: nat, seq: sequence): (lambda(i: nat):  IF <(i,n) THEN seq(i) ELSE seq(+(i,1)) ENDIF ));
  insert: funtype(T,nat,sequence,sequence) = (lambda(x: T, n: nat, seq: sequence): (lambda(i: nat):  IF <(i,n) THEN seq(i) ELSE  IF =(i,n) THEN x ELSE seq(-(i,1)) ENDIF  ENDIF ));
  add: funtype(T,sequence,sequence) = (lambda(x: T, seq: sequence): insert(x,0,seq));
insert_delete: LEMMA (forall(n: nat, seq: sequence): =(insert(nth(seq,n),n,delete(n,seq)),seq));
add_first_rest: LEMMA (forall(seq: sequence): =(add(first(seq),rest(seq)),seq));
  every: funtype(pred,funtype(sequence,bool)) = (lambda(p: pred): (lambda(seq: sequence): (forall(n: nat): p(nth(seq,n)))));
  every: funtype(pred,sequence,bool) = (lambda(p: pred, seq: sequence): (forall(n: nat): p(nth(seq,n))));
  some: funtype(pred,funtype(sequence,bool)) = (lambda(p: pred): (lambda(seq: sequence): (exists(n: nat): p(nth(seq,n)))));
  some: funtype(pred,sequence,bool) = (lambda(p: pred, seq: sequence): (exists(n: nat): p(nth(seq,n))));
sequence_induction: LEMMA (forall(p: pred, seq: sequence): IMPLIES(AND(p(nth(seq,0)),(forall(n: nat): IMPLIES(p(nth(seq,n)),p(nth(seq,+(n,1)))))),every(p)(seq)));
  ascends?: funtype(sequence,PRED,bool) = (lambda(seq: sequence, Trel: PRED): preserves(seq,(lambda(i: nat, n: nat): <=(i,n)),Trel));
  descends?: funtype(sequence,PRED,bool) = (lambda(seq: sequence, Trel: PRED): inverts(seq,(lambda(i: nat, n: nat): <=(i,n)),Trel));


 END sequences_test



