%%% This file is automatically generated, from an OMDoc document 
%%% by an XSL style sheet (omdoc2xxx.xsl)  do not edit
%%% for information about OMDoc, see http://www.mathweb.org/omdoc


%%% The original omdoc with identifier `sets_lemmas.omdoc`
%%% was created by: PVS (author)
%%% on: 2001-6-11@2:5:19 (created)

sets_lemmas_test: THEORY
 BEGIN

extensionality: LEMMA (forall(a: set, b: set): IMPLIES((forall(x: T): IFF(member(x,a),member(x,b))),=(a,b)));
emptyset_is_empty?: LEMMA (forall(a: set): IFF(empty?(a),=(a,emptyset)));
empty_no_members: LEMMA (forall(x: T): NOT(member(x,emptyset)));
emptyset_min: LEMMA (forall(a: set): IMPLIES(subset?(a,emptyset),=(a,emptyset)));
nonempty_member: LEMMA (forall(a: set): IFF(nonempty?(a),(exists(x: T): member(x,a))));
fullset_member: LEMMA (forall(x: T): member(x,fullset));
fullset_max: LEMMA (forall(a: set): IMPLIES(subset?(fullset,a),=(a,fullset)));
nonempty_exists: LEMMA (forall(a: set): IFF(nonempty?(a),(exists(x: (a)): TRUE)));
subset_reflexive: LEMMA (forall(a: set): subset?(a,a));
subset_antisymmetric: LEMMA (forall(a: set, b: set): IMPLIES(AND(subset?(a,b),subset?(b,a)),=(a,b)));
subset_transitive: LEMMA (forall(a: set, b: set, c: set): IMPLIES(AND(subset?(a,b),subset?(b,c)),subset?(a,c)));
subset_partial_order: LEMMA partial_order?(subset?);
subset_emptyset: LEMMA (forall(a: set): subset?(emptyset,a));
subset_fullset: LEMMA (forall(a: set): subset?(a,fullset));
union_idempotent: LEMMA (forall(a: set): =(union(a,a),a));
union_commutative: LEMMA (forall(a: set, b: set): =(union(a,b),union(b,a)));
union_associative: LEMMA (forall(a: set, b: set, c: set): =(union(union(a,b),c),union(a,union(b,c))));
union_empty: LEMMA (forall(a: set): =(union(a,emptyset),a));
union_full: LEMMA (forall(a: set): =(union(a,fullset),fullset));
union_subset1: LEMMA (forall(a: set, b: set): subset?(a,union(a,b)));
union_subset2: LEMMA (forall(a: set, b: set): IMPLIES(subset?(a,b),=(union(a,b),b)));
union_upper_bound: LEMMA (forall(a: set, b: set, c: set): IMPLIES(AND(subset?(a,c),subset?(b,c)),subset?(union(a,b),c)));
union_difference: LEMMA (forall(a: set, b: set): =(union(a,b),union(a,difference(b,a))));
union_diff_subset: LEMMA (forall(a: set, b: set): IMPLIES(subset?(a,b),=(union(a,difference(b,a)),b)));
intersection_idempotent: LEMMA (forall(a: set): =(intersection(a,a),a));
intersection_commutative: LEMMA (forall(a: set, b: set): =(intersection(a,b),intersection(b,a)));
intersection_associative: LEMMA (forall(a: set, b: set, c: set): =(intersection(intersection(a,b),c),intersection(a,intersection(b,c))));
intersection_empty: LEMMA (forall(a: set): =(intersection(a,emptyset),emptyset));
intersection_full: LEMMA (forall(a: set): =(intersection(a,fullset),a));
intersection_subset1: LEMMA (forall(a: set, b: set): subset?(intersection(a,b),a));
intersection_subset2: LEMMA (forall(a: set, b: set): IMPLIES(subset?(a,b),=(intersection(a,b),a)));
intersection_lower_bound: LEMMA (forall(a: set, b: set, c: set): IMPLIES(AND(subset?(c,a),subset?(c,b)),subset?(c,intersection(a,b))));
distribute_intersection_union: LEMMA (forall(a: set, b: set, c: set): =(intersection(a,union(b,c)),union(intersection(a,b),intersection(a,c))));
distribute_union_intersection: LEMMA (forall(a: set, b: set, c: set): =(union(a,intersection(b,c)),intersection(union(a,b),union(a,c))));
complement_emptyset: LEMMA =(complement(emptyset),fullset);
complement_fullset: LEMMA =(complement(fullset),emptyset);
complement_complement: LEMMA (forall(a: set): =(complement(complement(a)),a));
subset_complement: LEMMA (forall(a: set, b: set): IFF(subset?(complement(a),complement(b)),subset?(b,a)));
demorgan1: LEMMA (forall(a: set, b: set): =(complement(union(a,b)),intersection(complement(a),complement(b))));
demorgan2: LEMMA (forall(a: set, b: set): =(complement(intersection(a,b)),union(complement(a),complement(b))));
difference_emptyset1: LEMMA (forall(a: set): =(difference(a,emptyset),a));
difference_emptyset2: LEMMA (forall(a: set): =(difference(emptyset,a),emptyset));
difference_fullset1: LEMMA (forall(a: set): =(difference(a,fullset),emptyset));
difference_fullset2: LEMMA (forall(a: set): =(difference(fullset,a),complement(a)));
difference_intersection: LEMMA (forall(a: set, b: set): =(difference(a,b),intersection(a,complement(b))));
difference_difference1: LEMMA (forall(a: set, b: set, c: set): =(difference(difference(a,b),c),difference(a,union(b,c))));
difference_difference2: LEMMA (forall(a: set, b: set, c: set): =(difference(a,difference(b,c)),union(difference(a,b),intersection(a,c))));
difference_subset: LEMMA (forall(a: set, b: set): subset?(difference(a,b),a));
difference_disjoint: LEMMA (forall(a: set, b: set): disjoint?(a,difference(b,a)));
diff_union_inter: LEMMA (forall(a: set, b: set): =(difference(union(a,b),a),difference(b,intersection(a,b))));
nonempty_add: LEMMA (forall(a: set, x: T): NOT(empty?(add(x,a))));
member_add: LEMMA (forall(a: set, x: T): IMPLIES(member(x,a),=(add(x,a),a)));
member_remove: LEMMA (forall(a: set, x: T): IMPLIES(NOT(member(x,a)),=(remove(x,a),a)));
add_remove_member: LEMMA (forall(a: set, x: T): IMPLIES(member(x,a),=(add(x,remove(x,a)),a)));
remove_add_member: LEMMA (forall(a: set, x: T): IMPLIES(NOT(member(x,a)),=(remove(x,add(x,a)),a)));
subset_add: LEMMA (forall(a: set, x: T): subset?(a,add(x,a)));
add_as_union: LEMMA (forall(a: set, x: T): =(add(x,a),union(a,singleton(x))));
singleton_as_add: LEMMA (forall(x: T): =(singleton(x),add(x,emptyset)));
subset_remove: LEMMA (forall(a: set, x: T): subset?(remove(x,a),a));
remove_as_difference: LEMMA (forall(a: set, x: T): =(remove(x,a),difference(a,singleton(x))));
remove_member_singleton: LEMMA (forall(x: T): =(remove(x,singleton(x)),emptyset));
choose_rest: LEMMA (forall(a: set): IMPLIES(NOT(empty?(a)),=(add(choose(a),rest(a)),a)));
choose_member: LEMMA (forall(a: set): IMPLIES(NOT(empty?(a)),member(choose(a),a)));
choose_not_member: LEMMA (forall(a: set): IMPLIES(NOT(empty?(a)),NOT(member(choose(a),rest(a)))));
rest_not_equal: LEMMA (forall(a: set): IMPLIES(NOT(empty?(a)),/=(rest(a),a)));
rest_member: LEMMA (forall(a: set, x: T): IMPLIES(member(x,rest(a)),member(x,a)));
rest_subset: LEMMA (forall(a: set): subset?(rest(a),a));
choose_add: LEMMA (forall(a: set, x: T): OR(=(choose(add(x,a)),x),member(choose(add(x,a)),a)));
choose_rest_or: LEMMA (forall(a: set, x: T): IMPLIES(member(x,a),OR(member(x,rest(a)),=(x,choose(a)))));
choose_singleton: LEMMA (forall(x: T): =(choose(singleton(x)),x));
rest_singleton: LEMMA (forall(x: T): =(rest(singleton(x)),emptyset));
singleton_subset: LEMMA (forall(a: set, x: T): IFF(member(x,a),subset?(singleton(x),a)));
rest_empty_lem: LEMMA (forall(a: set): IMPLIES(AND(NOT(empty?(a)),empty?(rest(a))),=(a,extend(singleton(choose(a))))));
singleton_disjoint: LEMMA (forall(a: set, x: T): IMPLIES(NOT(member(x,a)),disjoint?(singleton(x),a)));
disjoint_remove_left: LEMMA (forall(a: set, b: set, x: T): IMPLIES(disjoint?(a,b),disjoint?(remove(x,a),b)));
disjoint_remove_right: LEMMA (forall(a: set, b: set, x: T): IMPLIES(disjoint?(a,b),disjoint?(a,remove(x,b))));
union_disj_remove_left: LEMMA (forall(a: set, b: set, x: T): IMPLIES(AND(disjoint?(a,b),a(x)),=(union(remove(x,a),b),remove(x,union(a,b)))));
union_disj_remove_right: LEMMA (forall(a: set, b: set, x: T): IMPLIES(AND(disjoint?(a,b),b(x)),=(union(a,remove(x,b)),remove(x,union(a,b)))));


 END sets_lemmas_test



