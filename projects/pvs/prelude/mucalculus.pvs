%%% This file is automatically generated, from an OMDoc document 
%%% by an XSL style sheet (omdoc2xxx.xsl)  do not edit
%%% for information about OMDoc, see http://www.mathweb.org/omdoc


%%% The original omdoc with identifier `mucalculus.omdoc`
%%% was created by: PVS (author)
%%% on: 2001-6-11@2:5:40 (created)

mucalculus_test: THEORY
 BEGIN

  predicate_transformer: TYPE = funtype(pred,pred);
  <=: funtype(pred,pred,bool) = (lambda(p1: pred, p2: pred): (forall(s: T): IMPLIES(p1(s),p2(s))));
  monotonic?: funtype(predicate_transformer,bool) = (lambda(pp: predicate_transformer): (forall(p1: pred, p2: pred): IMPLIES(<=(p1,p2),<=(pp(p1),pp(p2)))));
  fixpoint?: funtype(predicate_transformer,pred,bool) = (lambda(pp: predicate_transformer, p: pred): =(pp(p),p));
  fixpoint?: funtype(predicate_transformer,funtype(pred,bool)) = (lambda(pp: predicate_transformer): (lambda(p: pred): fixpoint?(pp,p)));
  glb: funtype(pred,pred) = (lambda(setofpred: pred): (lambda(s: T): (forall(p: pred): IMPLIES(member(p,setofpred),p(s)))));
  lfp: funtype(predicate_transformer,pred) = (lambda(pp: predicate_transformer): glb((set(p: pred): <=(pp(p),p))));
  mu: funtype(predicate_transformer,pred) = (lambda(pp: predicate_transformer): lfp(pp));
  lfp?: funtype(predicate_transformer,pred,bool) = (lambda(pp: predicate_transformer, p1: pred): AND(fixpoint?(pp,p1),(forall(p2: pred): IMPLIES(fixpoint?(pp,p2),<=(p1,p2)))));
  lfp?: funtype(predicate_transformer,funtype(pred,bool)) = (lambda(pp: predicate_transformer): (lambda(p1: pred): lfp?(pp,p1)));
  lub: funtype(pred,pred) = (lambda(setofpred: pred): (lambda(s: T): (exists(p: pred): AND(member(p,setofpred),p(s)))));
  gfp: funtype(predicate_transformer,pred) = (lambda(pp: predicate_transformer): lub((set(p: pred): <=(p,pp(p)))));
  nu: funtype(predicate_transformer,pred) = (lambda(pp: predicate_transformer): gfp(pp));
  gfp?: funtype(predicate_transformer,pred,bool) = (lambda(pp: predicate_transformer, p1: pred): AND(fixpoint?(pp,p1),(forall(p2: pred): IMPLIES(fixpoint?(pp,p2),<=(p2,p1)))));
  gfp?: funtype(predicate_transformer,funtype(pred,bool)) = (lambda(pp: predicate_transformer): (lambda(p1: pred): gfp?(pp,p1)));


 END mucalculus_test



