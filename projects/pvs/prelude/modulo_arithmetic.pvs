%%% This file is automatically generated, from an OMDoc document 
%%% by an XSL style sheet (omdoc2xxx.xsl)  do not edit
%%% for information about OMDoc, see http://www.mathweb.org/omdoc


%%% The original omdoc with identifier `modulo_arithmetic.omdoc`
%%% was created by: PVS (author)
%%% on: 2001-6-11@2:5:33 (created)

modulo_arithmetic_test: THEORY
 BEGIN

  rem: (sigmatype(b: posnat): (sigmatype(x: int): ((set(r: mod(b)): (exists(q: int): =(x,+(r,*(b,q))))))));
rem_def: LEMMA (forall(b: posnat, x: int, r: mod(b)): IFF(=(rem(b)(x),r),(exists(q: int): =(x,+(*(b,q),r)))));
rem_def2: LEMMA (forall(b: posnat, x: int, r: mod(b)): IFF(=(rem(b)(x),r),divides(b,-(x,r))));
rem_def3: LEMMA (forall(b: posnat, x: int, r: mod(b)): IFF(=(rem(b)(x),r),divides(b,-(r,x))));
rem_mod: LEMMA (forall(b: posnat, r: mod(b)): =(rem(b)(r),r));
rem_mod2: LEMMA (forall(b: posnat, x: int): IMPLIES(AND(<=(0,x),<(x,b)),=(rem(b)(x),x)));
rem_zero: LEMMA (forall(b: posnat): =(rem(b)(0),0));
rem_self: LEMMA (forall(b: posnat): =(rem(b)(b),0));
rem_multiple1: LEMMA (forall(b: posnat, x: int): =(rem(b)(*(b,x)),0));
rem_multiple2: LEMMA (forall(b: posnat, x: int): =(rem(b)(*(x,b)),0));
rem_one: LEMMA (forall(b: posnat): IMPLIES(/=(b,1),=(rem(b)(1),1)));
rem_minus_one: LEMMA (forall(b: posnat): =(rem(b)(-(1)),-(b,1)));
same_remainder: LEMMA (forall(b: posnat, x: int, y: int): IFF(=(rem(b)(x),rem(b)(y)),divides(b,-(x,y))));
rem_rem: LEMMA (forall(b: posnat, x: int): =(rem(b)(rem(b)(x)),rem(b)(x)));
rem_sum: LEMMA (forall(b: posnat, t: int, x: int, y: int, z: int): IMPLIES(AND(=(rem(b)(x),rem(b)(y)),=(rem(b)(z),rem(b)(t))),=(rem(b)(+(x,z)),rem(b)(+(y,t)))));
rem_sum1: LEMMA (forall(b: posnat, x: int, y: int): =(rem(b)(+(rem(b)(x),y)),rem(b)(+(x,y))));
rem_sum2: LEMMA (forall(b: posnat, x: int, y: int): =(rem(b)(+(x,rem(b)(y))),rem(b)(+(x,y))));
rem_diff: LEMMA (forall(b: posnat, t: int, x: int, y: int, z: int): IMPLIES(AND(=(rem(b)(x),rem(b)(y)),=(rem(b)(z),rem(b)(t))),=(rem(b)(-(x,z)),rem(b)(-(y,t)))));
rem_diff1: LEMMA (forall(b: posnat, x: int, y: int): =(rem(b)(-(rem(b)(x),y)),rem(b)(-(x,y))));
rem_diff2: LEMMA (forall(b: posnat, x: int, y: int): =(rem(b)(-(x,rem(b)(y))),rem(b)(-(x,y))));
rem_prod1: LEMMA (forall(b: posnat, x: int, y: int): =(rem(b)(*(rem(b)(x),y)),rem(b)(*(x,y))));
rem_prod2: LEMMA (forall(b: posnat, x: int, y: int): =(rem(b)(*(x,rem(b)(y))),rem(b)(*(x,y))));
rem_prod: LEMMA (forall(b: posnat, t: int, x: int, y: int, z: int): IMPLIES(AND(=(rem(b)(x),rem(b)(y)),=(rem(b)(z),rem(b)(t))),=(rem(b)(*(x,z)),rem(b)(*(y,t)))));
rem_expt: LEMMA (forall(b: posnat, n: nat, x: int, y: int): IMPLIES(=(rem(b)(x),rem(b)(y)),=(rem(b)(expt(x,n)),rem(b)(expt(y,n)))));
rem_expt1: LEMMA (forall(b: posnat, n: nat, x: int): =(rem(b)(expt(rem(b)(x),n)),rem(b)(expt(x,n))));
rem_sum_elim1: LEMMA (forall(b: posnat, x: int, y: int, z: int): IFF(=(rem(b)(+(x,y)),rem(b)(+(x,z))),=(rem(b)(y),rem(b)(z))));
rem_sum_elim2: LEMMA (forall(b: posnat, x: int, y: int, z: int): IFF(=(rem(b)(+(y,x)),rem(b)(+(z,x))),=(rem(b)(y),rem(b)(z))));
rem_diff_elim1: LEMMA (forall(b: posnat, x: int, y: int, z: int): IFF(=(rem(b)(-(x,y)),rem(b)(-(x,z))),=(rem(b)(y),rem(b)(z))));
rem_diff_elim2: LEMMA (forall(b: posnat, x: int, y: int, z: int): IFF(=(rem(b)(-(y,x)),rem(b)(-(z,x))),=(rem(b)(y),rem(b)(z))));
rem_opposite_elim: LEMMA (forall(b: posnat, x: int, y: int): IFF(=(rem(b)(-(x)),rem(b)(-(y))),=(rem(b)(x),rem(b)(y))));
  ndiv: (sigmatype(d: tupletype(nat,posnat)): ((set(q: int): =(proj(1,d),+(rem(proj(2,d))(proj(1,d)),*(proj(2,d),q))))));


 END modulo_arithmetic_test



