<?xml version="1.0"?>
<!DOCTYPE omdoc PUBLIC "-//OMDoc//DTD OMDoc V1.1//EN"
                 "../../dtd/omdoc.dtd" []>
<!--  An example of OMDoc, that uses everything, this  is intended as an 
      example of proper usage and as a torture test for OMDoc tools.

      Initial Version: Michael Kohlhase 2000-07-02
      URL: http://www.mathweb.org/src/mathweb/omdoc/examples/usesall.omdoc
      Comments are welcome! (send mail to kohlhase@mathweb.org)
      See the documentation and examples at http://www.mathweb.org/omdoc
      (c) 2000, 2001 Michael Kohlhase, released under the GNU Public License -->

<omdoc id="usesall" mid="1111111" catalogue="../omstd/catalogue.omdoc">
 <metadata>
  <Title>A Feature-Complete OM Document</Title>
  <Creator role="aut">Michael Kohlhase</Creator> 
  <Contributor role="clb">Andreas Franke</Contributor>
  <Subject>OM Documents</Subject>
  <Description>
  An example of OMDoc, that uses everything, to be used for debugging of OMDoc
  tools
  </Description>
  <Publisher>MathWeb.org</Publisher>
  <Date action="initial">2000-07-02</Date>
  <Type>Web Document in OMDoc Format</Type>
  <Format>OMDoc</Format>
  <Identifier scheme="other">SR-00-02-usesall</Identifier>
  <Source xmlns="http://purl.org/DC">
   This document does not have a prior source, from which it is derived</Source>
  <Language>en-us</Language>
  <Rights>
   Copyright (c) 2000 by Michael Kohlhase, 
   This Document is released under the Gnu Public Licencse.
  </Rights>
 </metadata>

<catalogue>
  <loc theory="poset" omdoc="poset.omdoc"/>
  <loc theory="simpletypes" omdoc="../logics/simpletypes.omdoc"/>
  <loc theory="tuthval" omdoc="../logics/truthval.omdoc"/>
  <loc theory="ind" omdoc="../logics/ind.omdoc"/>
</catalogue>

 
 <omtext id="usesall-intro" type="introduction">
  <CMP xml:lang="en">
   In this document, we use all OMDoc elements as a reference document,
   to test OMDoc tools, such as parsers and for didactic purposes
  </CMP>
  <CMP xml:lang="de">
   In diesem Referenzdokument benutzen wir alle OMDoc Elemente zum Testen von
   OMDoc Tools, z. B. Parsern und fuer didaktische Zwecke</CMP>
</omtext>

 <omtext id="useall-t1">
  <CMP xml:lang="en">We will take the theory of monoids, rings  and
  natural numbers as a first example.</CMP>
 </omtext>

<theory id="monoids">
  <commonname>The theory of monoids</commonname>
  <symbol id="monoid">
    <commonname xml:lang="en">monoid</commonname>
    <commonname xml:lang="de">Monoid</commonname>
    <commonname xml:lang="it">monoide</commonname>
    <type system="simply-typed"><OMOBJ><OMSTR>set[any] -> (any -> any -> any) -> any -> bool</OMSTR></OMOBJ>
    </type>
  </symbol>

  <definition id="mon-d1" for="monoid" type="simple">
   <CMP> 
    A structure (M,*,e), in which (M,*) is a semi-group 
    with unit e is called a monoid.
   </CMP>
  </definition>
 </theory>

 <example id="nat-monoid-ex" for="mon-d1" type="for">
  <CMP xml:lang="en">The natural numbers with addition form a monoid</CMP>
 </example>

<theory id="group">
  <imports id="group-import" from="monoid" type="global"/>
  <axiom id="group-ax"><CMP> Every object in 
    <OMOBJ><OMS cd="monoids" name="set"/></OMOBJ> has an inverse. 
  </CMP></axiom>
</theory>
 


<theory id="ring">
  <symbol id="ring.set"/> 
  <symbol id="ring.plus"/> 
  <symbol id="ring.times"/> 
  <symbol id="ring.zero"/> 
  <symbol id="ring.one"/> 
  <symbol id="ring.setstar"/> 
  <imports id="ring.add.import" from="group" type="global">
    <morphism id="ring.add.import-morph"> 
      <requation id="ring.add.import-morph-set"> 
        <pattern><OMOBJ><OMS cd="group" name="set"/></OMOBJ></pattern>
        <value><OMOBJ><OMS cd="ring" name="ring.set"/></OMOBJ></value> 
      </requation> 
      <requation id="ring.add.import-morph-op">
        <pattern><OMOBJ><OMS cd="group" name="op"/></OMOBJ></pattern> 
        <value><OMOBJ><OMS cd="ring" name="ring.plus"/></OMOBJ></value> 
      </requation> 
      <requation  id="ring.add.import-morph-neut"> 
        <pattern><OMOBJ><OMS cd="group" name="neut"/></OMOBJ></pattern> 
        <value><OMOBJ><OMS cd="ring" name="ring.zero"/></OMOBJ></value>
      </requation> 
    </morphism> 
  </imports> 
  <imports id="ring.mult.import" from="monoid" type="global"> 
    <morphism id="ring.mult.import-morph"> 
      <requation  id="ring.mult.import-morph-set"> 
        <pattern><OMOBJ><OMS cd="monoids" name="set"/></OMOBJ></pattern> 
        <value><OMOBJ><OMS cd="ring" name="ring.setstar"/></OMOBJ></value>
      </requation> 
      <requation  id="ring.mult.import-morph-op"> 
        <pattern><OMOBJ><OMS cd="monoids" name="op"/></OMOBJ></pattern>
        <value><OMOBJ><OMS cd="ring" name="ring.times"/></OMOBJ></value> 
      </requation> 
      <requation  id="ring.mult.import-morph-neut">
        <pattern><OMOBJ><OMS cd="monoids" name="neut"/></OMOBJ></pattern> 
        <value><OMOBJ><OMS cd="ring" name="ring.one"/></OMOBJ></value> 
      </requation> 
    </morphism> 
  </imports> 
  <definition id="Ring.setstar.def" for="ring.setstar"> 
    <CMP> <OMOBJ><OMS cd="ring" name="ring.setstar"/></OMOBJ> is 
      <OMOBJ><OMS cd="ring" name="ring.set"/></OMOBJ> without 
      <OMOBJ><OMS cd="ring"  name="ring.zero"/></OMOBJ>.  
    </CMP> 
  </definition> 
  <axiom id="Ring.distribution"> 
    <CMP><OMOBJ><OMS cd="monoids" name="plus"/></OMOBJ> distributes over 
      <OMOBJ><OMS cd="monoids" name="times"/></OMOBJ> 
    </CMP> 
  </axiom>
</theory>

 <theory id="nats">
  <commonname>natural number theory</commonname>
  <CMP>The Peano Axiomatization of Natural Numbers</CMP>
  <adt id="nat-adt" type="free">
   <sortdef id="pos-nat">
    <commonname>the set of positive natural numbers</commonname>
    <constructor id="succ">
     <commonname>The successor function</commonname>
     <argument sort="nat">
      <selector total="yes" id="pred">
       <commonname>The predecessor function</commonname>
      </selector>
     </argument>
    </constructor>
   </sortdef>
   <sortdef id="nat">
    <commonname>the set of natural numbers</commonname>
    <constructor id="zero"/>
    <insort for="pos-nat"/>
   </sortdef>
  </adt>
  <symbol id="plus">
   <commonname>plus</commonname>
  </symbol>
  <definition id="plus-def" for="plus" type="inductive">
   <CMP>The recursive definition of plus</CMP>
   <requation id="nat-plus-base">
    <pattern><OMOBJ><OMA>
      <OMS cd="nats" name="plus"/>
      <OMV name="X"/>
      <OMS cd="nats" name="zero"/></OMA></OMOBJ>
    </pattern>
    <value><OMOBJ><OMV name="X"/></OMOBJ></value>
   </requation>
   <requation id="nat-plus-step">
    <pattern><OMOBJ>
     <OMA>
      <OMS cd="nats" name="plus"/>
      <OMA><OMS cd="nats" name="succ"/><OMV name="X"/></OMA>
      <OMV name="Y"/>
     </OMA></OMOBJ>
    </pattern>
    <value><OMOBJ>
      <OMA>
       <OMS cd="nats" name="succ"/>
      <OMA>
	<OMS cd="nats" name="plus"/>
	<OMV name="X"/>
	<OMV name="Y"/>
       </OMA>
      </OMA></OMOBJ>
    </value>
   </requation>
  </definition>
  <symbol id="times">
   <commonname>times</commonname>
  </symbol>
  <symbol id="unary-minus-nat">
   <commonname>minus</commonname>
  </symbol>
  <presentation id="umn" for="unary-minus-nat" parent="OMA" 
                fixity="prefix" precedence="5">
      <use format="html">-</use>
  </presentation>
  <presentation id="pl" for="plus" parent="OMA" fixity="assoc" precedence="20">
      <use format="html">+</use>
  </presentation>
  <presentation id="ti" for="times" parent="OMA" fixity="assoc" precedence="10">
      <use format="html">*</use>
  </presentation>
  <presentation id="ze" for="zero">
      <use format="html">0</use>
  </presentation>
  <presentation id="su" for="succ" parent="OMA" >
      <use format="html">s</use>
  </presentation>
  <assertion id="prec-test">
   <CMP>
    We will use an arithmetical expression to test the precedence:
   <OMOBJ>
    <OMA>
     <OMS cd="relation1" name="eq"/>
     <OMA>
      <OMS cd="nats" name="plus"/>
      <OMA>
       <OMS cd="nats" name="times"/>
       <OMI>3</OMI>
       <OMI>4</OMI>
      </OMA>
     <OMI>7</OMI>
    </OMA>
    <OMA>
     <OMS cd="nats" name="unary-minus-nat"/>
     <OMV name="X"/>
    </OMA>
   </OMA>
   </OMOBJ>
 this one should not contain any brackets. The next one is a variant of the
 left-hand side, it needs brackets around the sum. 
<OMOBJ> 
  <OMA>
      <OMS cd="nats" name="times"/>
      <OMA>
       <OMS cd="nats" name="plus"/>
       <OMI>3</OMI>
       <OMI>4</OMI>
      </OMA>
     <OMI>7</OMI>
    </OMA>
</OMOBJ>, since in our example, multiplication binds stronger than addition.
   </CMP>
 </assertion>

 </theory>

  <alternative id="nat-plus-def-2" for="plus"
		   type="inductive" theory="nats" 
		   entailed-by="plus-def" entails="plus-def"
		   entailed-by-thm="dummy1" entails-thm="dummy2">
  <CMP>The recursive definition of plus on the second argument</CMP>
  <requation id="nat-plus-2-base">
   <pattern><OMOBJ><OMA>
     <OMS cd="nats" name="plus"/>
     <OMS cd="nats" name="zero"/>
    <OMV name="X"/>
   </OMA></OMOBJ>
   </pattern>
   <value><OMOBJ><OMV name="X"/></OMOBJ></value>
  </requation>
  <requation id="nat-plus-2-step">
   <pattern><OMOBJ>
    <OMA>
     <OMS cd="nats" name="plus"/>
     <OMV name="Y"/>
     <OMA><OMS cd="nats" name="succ"/><OMV name="X"/></OMA>
    </OMA></OMOBJ>
   </pattern>
   <value><OMOBJ>
     <OMA>
      <OMS cd="nats" name="succ"/>
     <OMA>
       <OMS cd="nats" name="plus"/>
       <OMV name="X"/>
       <OMV name="Y"/>
      </OMA>
     </OMA></OMOBJ>
   </value>
  </requation>
 </alternative>
 

 <theory id="Param">                   
  <imports id="Param-imp" from="poset" type="global"/>
  <symbol id="Elem" kind="sort"/>       
  <symbol id="ord"/>
  <axiom id="po-ax">
   <FMP>
    <OMOBJ>
     <OMA><OMS cd="poset" name="partial-order"/><OMS cd="Param" name="ord"/></OMA>
    </OMOBJ>
   </FMP>
  </axiom>

  <assertion id="po-ass">
      <CMP> we try to format 3+3 for Mathematica</CMP>
   <FMP>
    <OMOBJ>
     <OMA><OMS cd="arith1" name="plus"/><OMI>3</OMI><OMI>3</OMI></OMA>
    </OMOBJ>
   </FMP>
  </assertion>
 </theory>
                                       
<assertion id="geq-ord" theory="nats"> 
  <CMP><OMOBJ><OMS name="geq" cd="nats"/></OMOBJ> is a
    partial order on <OMOBJ><OMS name="nat" cd="nats"/></OMOBJ>
  </CMP>
</assertion>

<theory id="list.thy">
  <imports id="list.im" type="global" from="Param"/>
  <symbol id="list-sort" kind="sort"/>
  <symbol id="cons"/>
  <symbol id="nil"/>
  <symbol id="ordered"/>
</theory>

<theory id="nat-list">
  <imports id="nat-list.im-nat" type="global" from="nats"/>
  <imports id="nat-list.im-Element" type="local"  from="List">
    <morphism id="elem-nat">
      <requation id="elem-nat-eq">
        <pattern><OMOBJ><OMS cd="Param" name="Elem"/></OMOBJ></pattern>
        <value><OMOBJ><OMS cd="nats" name="Nat"/></OMOBJ></value>
      </requation>
    </morphism>
  </imports>
  <inclusion via="elem-nat-incl"/>
</theory>

<axiom-inclusion id="elem-nat-incl" from="nat.thy" to="Param">
  <morphism id="elem-nat-incl-morph" base="elem-nat"/>
  <path-just local="dummy1" globals="dummy2 dummy3"/>
</axiom-inclusion>


<!-- now, we test the presentation elements and its use -->

<theory id="tpres">

<symbol id="nullary"/>
<presentation id="nullary-pres" for="nullary">
  <use format="TeX" requires="texdefs">\nullary</use>
  <use format="html">N</use>
</presentation>
  

<symbol id="prefix-lisp"/>
<presentation for="prefix-lisp" id="prefix-lisp-pres" 
              parent="OMA" fixity="prefix" lbrack="["
              rbrack="]" bracket-style="lisp">
 <use  format="TeX" requires="texdefs">\prefixlisp</use>
 <use  format="html">pl</use>
</presentation>

<symbol id="prefix-math"/>
<presentation for="prefix-math" id="prefix-math-pres" 
   parent="OMA" fixity="prefix" lbrack="[" rbrack="]">
 <use  format="TeX" requires="texdefs">\prefixmath</use>
 <use  format="html">pm</use>
</presentation>

<symbol id="infix"/>
<presentation id="infix-pres" for="infix" 
              fixity="infix" parent="OMA" lbrack="\{" rbrack="\}">
 <use format="TeX"  requires="texdefs">{\infix}</use>
 <use format="html">in</use>
</presentation>

<symbol id="assoc"/>
<presentation id="assoc-pres" for="assoc" 
              fixity="assoc" parent="OMA" lbrack="!" rbrack="!">
 <use format="TeX">{:}</use>
 <use format="html">:</use>
</presentation>
  
<symbol id="postfix"/>
<presentation id="postfix-pres" for="postfix" fixity="postfix" parent="OMA">
 <use format="TeX" requires="texdefs">\postfix</use>
 <use format="TeX">pm</use>
</presentation>

<symbol id="mixfix"/>
<presentation id="mixfix-pres" for="mixfix" parent="OMA" lbrack="(" rbrack=")">
 <use format="html">
  <![CDATA[<xsl:apply-templates select="*[2]" mode="html"/>
           |-<xsl:apply-templates select="*[3]" mode="html"/>
           :<xsl:apply-templates select="*[4]" mode="html"/>]]>
</use>
 <use format="TeX">
  <![CDATA[<xsl:apply-templates select="*[2]" mode="html"/>
           \vdash<xsl:apply-templates select="*[3]" mode="html"/>
           :<xsl:apply-templates select="*[4]" mode="html"/>]]>
</use>
</presentation>

</theory>

<omtext id="test">
  <CMP> Now, that we have set up everything, let us test it.</CMP>
</omtext>

<omtext id="test1">
  <CMP> 
    We first test a nullary constant: 
     <OMOBJ><OMS cd="tpres" name="nullary"/></OMOBJ>
     for which we have defined custom markup, and one for which we did not:
     <OMOBJ><OMS cd="tpres" name="generic"/></OMOBJ>
     and then a prefix (math brackets):     
     <OMOBJ><OMA><OMS cd="tpres" name="prefix-math"/><OMV  name="X"/><OMV  name="Y"/></OMA></OMOBJ>
    then a prefix with lisp brackets:  
     <OMOBJ><OMA><OMS cd="tpres" name="prefix-lisp"/><OMV  name="X"/><OMV  name="Y"/></OMA></OMOBJ>
    an infix operator, (note that this is only defined for binary operators, it
  disregards all other arguments):
     <OMOBJ><OMA><OMS cd="tpres" name="infix"/><OMV name="X"/><OMV
    name="Y"/></OMA></OMOBJ>.

and an associative operator (this should duplicate the function between any two arguments):
     <OMOBJ><OMA><OMS cd="tpres" name="assoc"/><OMV name="X"/><OMV name="Y"/><OMV name="Z"/><OMV name="U"/><OMV
    name="V"/></OMA></OMOBJ>.

    finally, we test a mixfix operator for which we have defined custom markup
     <OMOBJ><OMA><OMS cd="tpres" name="mixfix"/><OMV name="G"/><OMV
    name="A"/><OMV name="alpha"/></OMA></OMOBJ>.

   Of course, we can also have presentation for attributes, for instance for the
   type attribute: 
   <OMOBJ><OMBIND>
	  <OMS cd="quant1" name="forall"/>
	  <OMBVAR>
	    <OMATTR>
	      <OMATP>
		<OMS cd="simpletypes" name="type"/>
		<OMA>
		  <OMS cd="simpletypes" name="funtype"/>
		  <OMS cd="truthval" name="bool"/>
		  <OMS cd="ind" name="ind"/>
		  <OMV name="alpha"/>
		</OMA>
	      </OMATP>
	      <OMV name="X"/>
	    </OMATTR>
	  </OMBVAR>
	  <OMS cd="logic1" name="true"/>
	</OMBIND>
      </OMOBJ>
</CMP>
</omtext>

<private id="texdefs">
 <data  format="TeX">\def\nullary{n}\def\prefixmath{pm}\def\prefixlisp{pl}\def\postfix{p}\def\infix{i}</data>
</private>
</omdoc>

