<?xml version="1.0" encoding="utf-8"?>

<!DOCTYPE omdoc PUBLIC "-//OMDoc//DTD OMDoc V1.1//EN"
                 "../../dtd/omdoc.dtd" []>


<omdoc id="polyslp-omdoc" 
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" 
       xsi:schemaLocation="http://www.mathweb.org/omdoc
       http://www.mathweb.org/omdoc/xsd/omdoc.xsd"
       catalogue="catalogue.omdoc">

<metadata>
  <Title>The OpenMath Content Dictionary polyslp.ocd  in OMDoc form</Title>
  <Creator role="trl">Michael Kohlhase</Creator>
  <Creator role="ant">The OpenMath Society</Creator>
  <Date> 2000-02-11 </Date>
  <Source>Derived from the OpenMath CD http://www.openmath.org/cd/polyslp.ocd.</Source>
  <Type>Text</Type>
  <Format>application/omdoc+xml</Format>
  <Rights>Copyright (c) 2000-2002 Michael Kohlhase;
    This OMDoc content dictionary is released under the OpenMath license:
    http://monet.nag.co.uk/openmath/cdfiles/license.html
  </Rights>
  <Description>
    This CD contains operators to deal with polynomials and more precisely 
    polynomials held in Straight Line Program representation.
  </Description>
</metadata>

<theory id="polyslp">
  <imports id="polyslp-imports-sts" from="sts.omdoc#sts"/>
  <imports id="polyslp-imports-polysts" from="polysts.omdoc#polysts"/>
  <imports id="polyslp-imports-setname1" from="setname1.omdoc#setname1"/>
  <imports id="polyslp-imports-opnode" from="opnode.omdoc#opnode"/>
  <imports id="polyslp-imports-relation1" from="relation1.omdoc#relation1"/>
  <imports id="polyslp-imports-poly" from="poly.omdoc#poly"/>
  <imports id="polyslp-imports-typesorts" from="typesorts.omdoc#typesorts"/>

<omtext id="CDComment-10" type="introduction">
  <CMP>
    Definition of data-structure constructors
  </CMP>
</omtext>
<symbol id="polynomial_SLP">
  <CMP>
    The constructor of Polynomials built with Straight Line Program
    representation. 
    The first argument is the polynomial ring containing the polynomial 
    built with poly_ring_SLP,
    The second argument is the program body built with ProgBody. 
  </CMP>
  <commonname>polynomial SLP</commonname>
  <type system="sts">
    <OMOBJ>
      <OMA>
	<OMS name="mapsto" cd="sts"/>
	<OMA>
	  <OMS name="structure" cd="sts"/>
	  <OMS name="polynomial_ring" cd="polysts"/>
	</OMA>
	<OMV name="SLProgram"/>
	<OMV name="SLPPolynomial"/>
      </OMA>
    </OMOBJ>
  </type>
</symbol>
<example id="polynomial_SLP-ex-1" type="for" for="polynomial_SLP">
  <CMP> The polynomial x^2 + y^2,
    which may be represented as the Straight Line Program :

line 1 : InputNode	x
line 2 : InputNode	y
line 3 : OperationNode 	times line 1, line 1
line 4 : OperationNode 	times line 2, line 2
line 5 : OperationNode 	plus line 3, line 4 &gt;

may be encoded as :</CMP>


<OMOBJ>
  <OMA>
    <OMS cd="polyslp" name="polynomial_SLP"/>
    <OMA>
      <OMS cd="polyslp" name="poly_ring_SLP"/>
      <OMS cd="setname1" name="Z"/>
      <OMV name="x"/>
      <OMV name="y"/>
    </OMA>
    <OMA>
      <OMS cd="polyslp" name="prog_body"/>
      <OMA>
	<OMS cd="polyslp" name="inp_node"/>
	<OMV name="x"/>
      </OMA>
      <OMA>
	<OMS cd="polyslp" name="inp_node"/>
	<OMV name="y"/>
      </OMA>
      <OMA>
	<OMS cd="polyslp" name="op_node"/>
	<OMS cd="opnode" name="times"/>
	<OMI> 1 </OMI>
	<OMI> 1 </OMI>
      </OMA>
      <OMA>
	<OMS cd="polyslp" name="op_node"/>
	<OMS cd="opnode" name="times"/>
	<OMI> 2 </OMI>
	<OMI> 2 </OMI>
      </OMA>
      <OMA>
	<OMS cd="opnode" name="return"/>
	<OMA>
	  <OMS cd="polyslp" name="op_node"/>
	  <OMS cd="opnode" name="plus"/>
	  <OMI> 3 </OMI>
	  <OMI> 4 </OMI>
	</OMA>
      </OMA>
    </OMA>
  </OMA>
</OMOBJ>
</example>
<symbol id="prog_body">
  <CMP>
    the constructor of the body of the straight line program
    the arguments represent straight line instructions, as constructed by the
    following three constructors, op_node, inp_node and const_node. The order
    is taken to be the order in which they appear
  </CMP>
  <commonname>prog body</commonname>
  <type system="sts">
    <OMOBJ>
      <OMA>
	<OMS name="mapsto" cd="sts"/>
	<OMV name="SLInstructionList"/>
	<OMV name="SLProgram"/>
      </OMA>
    </OMOBJ>
  </type>
</symbol>
<symbol id="op_node">
  <CMP>
    This constructor takes three or four arguments.
    The first argument is a symbol from opnode, meant to specify
    whether the node is a plus, minus times or divide node, 
    the second and third arguments are integers, which are pointers
    to the lines which are the arguments of the operation
    The optional fourth argument is from opnode if it exists it must
    be return to specify that this is a return value of the straight
    line program.
  </CMP>
  <commonname>op node</commonname>
  <type system="sts">
    <OMOBJ>
      <OMA>
	<OMS name="mapsto" cd="sts"/>
	<OMS name="Object" cd="sts"/>
	<OMS name="N" cd="setname1"/>
	<OMS name="N" cd="setname1"/>
	<OMV name="SLPInstruction"/>
      </OMA>
    </OMOBJ>
  </type>
</symbol>
<symbol id="inp_node">
  <CMP>
    This constructor takes one argument, which is a variable the return value
    is intended to represent an input node.
    variables. 
  </CMP>
  <commonname>inp node</commonname>
  <type system="sts">
    <OMOBJ>
      <OMA>
	<OMS name="mapsto" cd="sts"/>
	<OMV name="PolynomialVariable"/>
	<OMV name="SLPInstruction"/>
      </OMA>
    </OMOBJ>
  </type>
</symbol>
<symbol id="const_node">
  <CMP>
    This constructor takes one argument, which is a value of type PolyRingslp
    it is intended to represent a constant node
  </CMP>
  <commonname>const node</commonname>
  <type system="sts">
    <OMOBJ>
      <OMA>
	<OMS name="mapsto" cd="sts"/>
	<OMV name="Ring"/>
	<OMV name="SLPInstruction"/>
      </OMA>
    </OMOBJ>
  </type>
</symbol>
<omtext id="CDComment-16" type="introduction">
  <CMP>
    Definition of some functions which are specific to slps
  </CMP>
</omtext>
<symbol id="length">
  <CMP>
    A unary function taking an slp as argument and returning the
    length of this slp.
  </CMP>
  <commonname>length</commonname>
  <type system="sts">
    <OMOBJ>
      <OMA>
	<OMS name="mapsto" cd="sts"/>
	<OMV name="SLPPolynomial"/>
	<OMS name="N" cd="setname1"/>
      </OMA>
    </OMOBJ>
  </type>
</symbol>
<symbol id="depth">
  <CMP>
    A unary function taking an slp as argument and returning the
    greatest depth of any leaf node, that is the greatest contiguous
    path to any leaf node.
  </CMP>
  <commonname>depth</commonname>
  <type system="sts">
    <OMOBJ>
      <OMA>
	<OMS name="mapsto" cd="sts"/>
	<OMV name="SLPPolynomial"/>
	<OMS name="N" cd="setname1"/>
      </OMA>
    </OMOBJ>
  </type>
</symbol>
<symbol id="slp_degree">
  <CMP>
    A unary function taking an slp as argument and returning the
    apparent multiplicative degree of the slp, without performing
    any cancellation.
  </CMP>
  <commonname>slp degree</commonname>
  <type system="sts">
    <OMOBJ>
      <OMA>
	<OMS name="mapsto" cd="sts"/>
	<OMV name="SLPPolynomial"/>
	<OMS name="N" cd="setname1"/>
      </OMA>
    </OMOBJ>
  </type>
</symbol>
<assertion id="slp_degree-prop-1" type="lemma">
  <CMP> The slp_degree of the polynomial x &gt; degree(x) </CMP>
  <FMP>
    <OMOBJ>
      <OMA>
	<OMS cd="relation1" name="gt"/>
	<OMA>
	  <OMS cd="polyslp" name="slp_degree"/>
	  <OMV name="x"/>
	</OMA>
	<OMA>
	  <OMS cd="poly" name="degree"/>
	  <OMV name="x"/>
	</OMA>
      </OMA>
    </OMOBJ>
  </FMP>
</assertion>
<example id="slp_degree-ex-3" type="for" for="slp_degree">
  <CMP>
    slpDegree(convert(x^2)@poly_ring_SLP - convert(x^2)@poly_ring_SLP) = 2</CMP>
  <OMOBJ>
    <OMA>
      <OMS cd="relation1" name="eq"/>
      <OMA>
	<OMS cd="polyslp" name="polynomial_SLP"/>
	<OMA>
	  <OMS cd="polyslp" name="poly_ring_SLP"/>
	  <OMS name="Z" cd="setname1"/>
	  <OMV name="x"/>
	</OMA>
	<OMA>
	  <OMS cd="polyslp" name="prog_body"/>
	  <OMA>
	    <OMS cd="polyslp" name="inp_node"/>
	    <OMV name="x"/>
	  </OMA>
	  <OMA>
	    <OMS cd="polyslp" name="op_node"/>
	    <OMS cd="opnode" name="times"/>
	    <OMI> 1 </OMI>
	    <OMI> 1 </OMI>
	  </OMA>
	  <OMA>
	    <OMS cd="opnode" name="return"/>
	    <OMA>
	      <OMS cd="polyslp" name="op_node"/>
	      <OMS cd="opnode" name="minus"/>
	      <OMI> 2 </OMI>
	      <OMI> 2 </OMI>
	    </OMA>
	  </OMA>
	</OMA>
      </OMA>
      <OMI> 2 </OMI>
    </OMA>
  </OMOBJ>
</example>
<symbol id="return_node">
  <CMP>
    Takes an slp as the argument
    returns the return node of the slp.
  </CMP>
  <commonname>return node</commonname>
  <type system="sts">
    <OMOBJ>
      <OMA>
	<OMS name="mapsto" cd="sts"/>
	<OMV name="SLPPolynomial"/>
	<OMV name="SLPInstruction"/>
      </OMA>
    </OMOBJ>
  </type>
</symbol>
<symbol id="node_selector">
  <CMP>
    Takes an slp as the first argument, the second argument is the
    position of the required node. Returns the node of the slp at
    this position.
  </CMP>
  <commonname>node selector</commonname>
  <type system="sts">
    <OMOBJ>
      <OMA>
	<OMS name="mapsto" cd="sts"/>
	<OMV name="SLPPolynomial"/>
	<OMS name="N" cd="setname1"/>
	<OMV name="SLPInstruction"/>
      </OMA>
    </OMOBJ>
  </type>
</symbol>
<symbol id="left_ref">
  <CMP>
    Takes as argument a node of an slp.
    returns the value of the left hand pointer of the node.
  </CMP>
  <commonname>left ref</commonname>
  <type system="sts">
    <OMOBJ>
      <OMA>
	<OMS name="mapsto" cd="sts"/>
	<OMV name="SLPInstruction"/>
	<OMS name="N" cd="setname1"/>
      </OMA>
    </OMOBJ>
  </type>
</symbol>
<symbol id="right_ref">
  <CMP>
    Takes as argument a node of an slp.
    returns the value of the right hand pointer of the node.
  </CMP>
  <commonname>right ref</commonname>
  <type system="sts">
    <OMOBJ>
      <OMA>
	<OMS name="mapsto" cd="sts"/>
	<OMV name="SLPInstruction"/>
	<OMS name="N" cd="setname1"/>
      </OMA>
    </OMOBJ>
  </type>
</symbol>
<omtext id="CDComment-24" type="introduction">
  <CMP>
    Definition of some functions which are very useful for slps
  </CMP>
</omtext>
<symbol id="quotient">
  <CMP>
    A quotient function for polynomials represented by slps. It is a
    requirement that this is an exact division.
  </CMP>
  <commonname>quotient</commonname>
  <type system="sts">
    <OMOBJ>
      <OMA>
	<OMS name="mapsto" cd="sts"/>
	<OMV name="SLPPolynomial"/>
	<OMV name="SLPPolynomial"/>
	<OMV name="SLPPolynomial"/>
      </OMA>
    </OMOBJ>
  </type>
</symbol>
<symbol id="monte_carlo_eq">
  <CMP>
    This is a Monte-Carlo equality test,
    it takes three arguments, the first two are slps representing
    polynomials, the third argument is the maximum probability of
    incorrectness that is required of the equality test.
    (Monte-Carlo equality tests are very important for slps as they
    offer the only tractable method of solving the equality problem
    in many cases)
  </CMP>
  <commonname>monte carlo eq</commonname>
  <type system="sts">
    <OMOBJ>
      <OMA>
	<OMS name="mapsto" cd="sts"/>
	<OMV name="SLPPolynomial"/>
	<OMV name="SLPPolynomial"/>
	<OMS name="Prop" cd="typesorts"/>
      </OMA>
    </OMOBJ>
  </type>
</symbol>
<symbol id="poly_ring_SLP">
  <CMP>
    The constructor of the polynomial ring. The first argument is a ring, 
    (the ring of the coefficients), the rest are the variables, in any order
  </CMP>
  <commonname>poly ring SLP</commonname>
  <type system="sts">
    <OMOBJ>
      <OMA>
	<OMS name="mapsto" cd="sts"/>
	<OMA>
	  <OMS name="structure" cd="sts"/>
	  <OMV name="Ring"/>
	</OMA>
	<OMA>
	  <OMS name="nary" cd="sts"/>
	  <OMV name="PolynomialVariable"/>
	</OMA>
	<OMA>
	  <OMS name="structure" cd="sts"/>
	  <OMS name="polynomial_ring" cd="polysts"/>
	</OMA>
      </OMA>
    </OMOBJ>
  </type>
</symbol>
<example id="poly_ring_SLP-ex-1" type="for" for="poly_ring_SLP">
  <CMP>
    An example to represent a polynomial ring over the integers, with the
    two variables x,y. viz. Z[x,y]</CMP>
  <OMOBJ>
    <OMA>
      <OMS name="poly_ring_SLP" cd="polyslp"/>
      <OMS name="Z" cd="setname1"/>
      <OMV name="x"/>
      <OMV name="y"/>
    </OMA>
  </OMOBJ>
</example>
</theory>
</omdoc>
