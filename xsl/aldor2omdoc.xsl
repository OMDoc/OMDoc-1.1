<?xml version="1.0" encoding="utf-8"?>
<xsl:stylesheet xmlns:xsl="http://www.w3.org/1999/XSL/Transform"
                version="1.0">

<xsl:output method="xml" indent="yes" version="1.0" standalone="yes"
  doctype-system="http://www.mathweb.org/omdoc/omdoc.dtd"/>

<xsl:strip-space elements="*"/>

  <xsl:template match="*">
    <xsl:copy-of select="."/>
  </xsl:template>

  <xsl:template match="/">
    <xsl:text>&#xA;&#xA;</xsl:text>
    <xsl:comment> This file is automatically generated from an ALdor library file, do not edit
  </xsl:comment>
    <xsl:text>&#xA;&#xA;</xsl:text>
    <xsl:apply-templates/>
    <xsl:text>&#xA;</xsl:text>
  </xsl:template>

  <xsl:template match="preOMDoc"><xsl:apply-templates/></xsl:template>

  <xsl:template match="theory">
    <xsl:text>&#xA;</xsl:text>
    <theory id="{id}">
      <xsl:apply-templates select="description"/>
      <symbol id="basetype" kind="type" scope="global">
        <CMP>The base type of the domain <xsl:value-of select="../theory/id"/>.</CMP>
      </symbol>
      <xsl:apply-templates select="child::node()[not(self::description)]"/>
    </theory>
    <xsl:text>&#xA;</xsl:text>
  </xsl:template>

  <xsl:template match="id"/>

  <xsl:template match="description">
    <CMP><xsl:apply-templates/></CMP>
    <xsl:text>&#xA;</xsl:text>
  </xsl:template>

  <xsl:template match="parameters"><xsl:apply-templates/></xsl:template>

  <xsl:template match="parameter">
    <xsl:apply-templates select="id[2]" mode="import"/>
  </xsl:template>


  <xsl:template match="directinh">
    <xsl:apply-templates select="type/*" mode="import"/>
  </xsl:template>

  <xsl:template match="id" mode="import">
    <imports id="{ancestor::theory/id}-imp-{.}" from="{.}" type="global"/>
  </xsl:template>

  <xsl:template match="fn" mode="import">
    <xsl:variable name="val" select="*[1]"/>
    <xsl:if test="$val='Join'">
      <xsl:apply-templates select="*[position()!=1]" mode="import"/>
    </xsl:if>
  </xsl:template>

  <xsl:template match="exports"><xsl:apply-templates/></xsl:template>

  <xsl:template match="export">
    <symbol id="{id}" kind="object" scope="global">
      <xsl:if test="description">
        <CMP><xsl:value-of select="description"/></CMP>
      </xsl:if>
      <type system="aldor"><xsl:apply-templates select="type"/></type>
    </symbol>
  </xsl:template>

  <xsl:template match="type">
    <OMOBJ><xsl:apply-templates select="fn_type"/></OMOBJ>
  </xsl:template>

  <xsl:template match="id" mode="local">
    <xsl:variable name="it" select="."/>
    <xsl:choose>
      <xsl:when test="$it='%'">
        <xsl:variable name="theo" select="ancestor::theory/id"/>
        <OMS cd="{$theo}" name="basetype"/>
      </xsl:when>
      <xsl:when test="$it=string(ancestor::theory/parameters/parameter/id)">
        <xsl:variable name="theo" select="ancestor::theory/parameters/parameter[string(id)=$it]/id[2]"/>
        <OMS cd="{$theo}" name="basetype"/>
      </xsl:when>
      <xsl:otherwise>
        <OMS cd="{.}" name="basetype"/>
      </xsl:otherwise>
    </xsl:choose>
  </xsl:template>

  <xsl:template match="type/id|left/id|right/id">
    <xsl:apply-templates select="." mode="local"/>
  </xsl:template>

  <xsl:template match="left/parameter|right/parameter">
    <xsl:apply-templates select="id[2]" mode="local"/>
  </xsl:template>

  <xsl:template match="qualify">
    <OMA>
      <OMS cd="aldortypes" name="{id[2]}"/>
      <xsl:apply-templates select="id[1]" mode="local"/>
    </OMA>
  </xsl:template>

  <xsl:template match="fn">
    <OMA>
      <OMS cd="aldortypes" name="{id[1]}"/>
      <xsl:for-each select="id[position()!=1]">        
        <xsl:apply-templates select="." mode="local"/>
      </xsl:for-each>
    </OMA>
  </xsl:template>

  <xsl:template match="fn_type">
    <OMA><OMS cd="aldortypes" name="funtype"/>
    <xsl:for-each select="left/*">    
      <xsl:apply-templates select="."/>
    </xsl:for-each>
    <xsl:apply-templates select="right/*"/>
   </OMA>
 </xsl:template>

</xsl:stylesheet>
