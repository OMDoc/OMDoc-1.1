%!PS-Adobe-2.0 EPSF-1.2
%%Title: pspic1.dvi
%%Creator: dvips(k) 5.86 Copyright 1999 Radical Eye Software
%%CreationDate: Nov 12 13:16
%%For:kohlhase kohlhase
%%Pages: 1
%%DocumentFonts:
%%BoundingBox: 154 570 475 668
%%BeginPreview: 321 98 1 98
% 0000000000000000000001040000000000000000000000000000000000000000000000000000000000
% 0000000000000000000001000000000000000000000000000000000000000000000000000000000000
% 0000000000000000000003cc1c00000000000000000000000000000000000000000000000000000000
% 0000000000000000000001042000000000000000000000000000000000000000000000000000000000
% 0000000000000000000001242000000000000000000000000000000000000000000000000000000000
% 0000000000000000000001ef1c00000000000000000000000000000000000000000000000000000000
% 0000000000000000000000000000000000000000000000000000000000000000000000000000000000
% 0000000000000000000000000000000000000000000000000000000000000000000000000000000000
% 0000000000000000000000000000000000000000000000000000000000000000000000000000000000
% 0000000000000000000000000000000000000000000000000000000000000000000000000000000000
% 0000000000000000000000000000000000000000000000000000000000000000000000000000000000
% 0000000000000000000007e7e000000000000000000000000000000000000000000000000000000000
% 00000000000000000007e7e7e7e7e00000000000000000000000000000000000000000000000000000
% 000000000000000067e7e0000007e7e000000000000000000000000000000000000000000000000000
% 0000000ffffc0007e0000000000003e78083ffff000000000000000000000000000000000000000000
% 00000008000401e38000000000000007c0c20001000000000000000000000000000000000000000000
% 00000008000403e00000000000000000c7f20001000000000000000000000000000000000000000000
% 000000080007e000000000000000000007fa0001000000000000000000043000000010003000100000
% 000000080107c000000000000000000001fe00e1000000000000000006041000000000001000000000
% 0000000803040000000000000000000000620111000000000000000003cf1cf77db7b1e3934731cf00
% 000000083907f3f3f3f3f3f3f3f3f3f7e7fe1c11000000000001f8fe3ff415f8a0a010a41147122500
% 0000000841040000000000000000000000322021000000000000000003c4958ca0e010a41140932500
% 000000084104000000000000000000000002204100000000000000000607bef778403df3bde7bdcf80
% 000000083b840000000000000000000000021df1000000000000000000000000004000000000000000
% 000000080004000000000000000000000002000100000000000000000000000001c000000000000000
% 0000000800040000000000000000000000020001000000000000000000000000000000000000000000
% 0000000800040000000000000100000000020001000000000000000000000000000000000000000000
% 0000000ffffc000000000000000000000007ffff000000000000000000000000000000000000000000
% 0000007000300000000000003b0e0000003c000c000000000000000000000000000000000000000000
% 000003f0001c0000000000004110000001f8000e000000000000000000000000000000000000000000
% 000001e0001e000000000000411000000078000f800000000000000000000000000000000000000000
% 000003e0001e0000000000003bce000001f00007000000000000000000000000000000000000000000
% 00000740001e0000001000000000000003e0000780000000000000000000000800004000c000800000
% 00001e00000f0000000000000000000007000005800000000000000001800000000000004000000000
% 00003c00000380000e31c000000000000e000001c00000000001f3e7cff0ef98efbccf1c4d39877800
% 000070000001c0000e11c000000000003c000000e00000000000000000e0e7091a804520453888a800
% ffffe0000000c0001a13400000007ffff800000070000000000000000101a3099a80452045048ca800
% 800040000000e0001f3fe000000040002000000030000000000000000001fd9eef80ff9cf7bde77c00
% 8000400000007000000000000000400020000000380000000000000000000000000000000000000000
% 80004000000038000000000000004000200000001c0000000000000000000000000000000000000000
% 8010400000001800000000000000401c200000000e0000000000000000000000000000000000000000
% 8030400000001c00000000000000402220000000060000000000000000000000000000000000000000
% 8710400000000e00000000000007438220000000070000000000000000000000000000000000000000
% 87107e7e7e7e7e7e7e7e7e7e7e7fc38420000000038000000000000000000000000000000000000000
% 8d1040000000030000000000000646882000000001c000000000000000000000000000000000000000
% 8fb840000000038000000000000047fe2000000000c000000000000000000000020000010000000000
% 80004000000001c000000000000040002000000000e000000000000000000000000000010000000000
% 80004000000000c0000000000000400020018230007000000000000003000000067fc77fc700000000
% 80004000000000e0000000000000400020008010003800000001ffffffe00000025528a10700000000
% ffffc000000000700000000000007fffe000e61c001800000001ffffffe0000002552ca12080000000
% 0000600000000038000000000000c00200009212001c0000000000000300000007fdc779e780000000
% 0000780000000018000000000003c00300009212000e00000000000004000000000100000000000000
% 00003e00000000ffffe00000000f8003c000e79c003ffff00000000000000000000300000000000000
% 00003e00000000800020000000078001e0000000002000100000000000000000000000000000000000
% 00001f000000008000200000001f0001d0000000002000100000000000000000000000000000000000
% 000007800000008000200000003d0001e0000000002000100000000000000000000000000000000000
% 000001c00000008c08200000007000016000000000230e100000000000000000000000000000000000
% 000000e0000000841820000000e0000070000000062111100000000000000000000000000000000000
% 0000007000000087083f3f3f3fff3f3f3f3f3f3f3fe1c1100000000000000000000000000000000000
% 0000003c0000008488200000038000001800000003a122100000000000000000000000000000000000
% 0000001e00000084882000000f0000001c000000062124100000000000000000000000000000000000
% 00000007000000871c2000001e0000000c0000000021df100000000000000000000000000000000000
% 0000000380000080003fc000380000000e000000002000100000000000000000000000000000000000
% 00000001c0000080003f00007000000006000000002000100000000000000000000000000000000000
% 00000000e00000800027e000e000000007000000002000100000000000000000000000000000000000
% 00000000780000ffffe2fc03c000000003800000003ffff00000000000000000000000000000000000
% 000000003c00000000013f078000000001800000001800000000000000000000000000000000000000
% 000000000e000000000007ef0000000001c00000007800000000000000000000000000000000000000
% 0000000007000000000000fc0000000000c0000000f000000000000000000000000000000000000000
% 00000000038000000000003f0000000000e0000000f000000000000000000000000000000000000000
% 0000000001e0000000000077e00000000070000001f000000000000000000000000000000000000000
% 0000000000f00000000001e1f80000000030000001e000000000000000000000000000000000000000
% 0000000000380000000003c03f00000000380000038000000000000000000000000000000000000000
% 00000000001c00000000070007e0000000180000070000000000000000000000000000000000000000
% 00000000000e000000000e0001f80000001c00000e0000000000000000000000000000000000000000
% 000000000007000000001c00003f0000000e00001c0000000000000000000000000000000000000000
% 000000000003c000000038000007c00000060000380000000000000000000000000000000000000000
% 000000000001e0000000f0000001f80000070000700000000000000000000000000000000000000000
% 00000000000070000001e00000003f0000030000600000000000000000000000000000000000000000
% 00000000000038000003800000000fc000038000e00000000000000000000000000000000000000000
% 0000000000001c0000070000000001f800018001c00000000000000000000000000000000000000000
% 0000000000000f00000e00000000003f0000c003800000000000000000000000000000000000000000
% 0000000000000780003c00000000000fc000e007000000000000000000000000000000000000000000
% 00000000000003c00078000000000001f800600e000000000000000000000000000000000000000000
% 00000000000000c000700000000000007e00700c000000000000000000000000000000000000000000
% 00000000000003fffff80000000000000fdfffffc00000000000000000000000000000000000000000
% 0000000000000200000800000000000001f00000400000000000000000000000000000000000000000
% 0000000000000200000800000000000000700000400000000000000000000000000000000000000000
% 0000000000000200000800000000000000100000400000000000000000000000000000000000000000
% 0000000000000211820800000000000000108c38400000000000000000000000000000000000000000
% 0000000000000210860800000000000000108444400000000000000000000000000000000000000000
% 000000000000023ce2080000000000000011e704400000000000000000000000000000000000000000
% 0000000000000210a20800000000000000108508400000000000000000000000000000000000000000
% 0000000000000212a20800000000000000109510400000000000000000000000000000000000000000
% 000000000000021ff7080000000000000010fffc400000000000000000000000000000000000000000
% 0000000000000200000800000000000000100000400000000000000000000000000000000000000000
% 0000000000000200000800000000000000100000400000000000000000000000000000000000000000
% 00000000000003fffff8000000000000001fffffc00000000000000000000000000000000000000000
%%EndImage
%%EndPreview
save
countdictstack
mark
newpath
/showpage {} def
/setpagedevice {pop} def
%%EndProlog
%%Page 1 1
%DVIPSWebPage: (www.radicaleye.com)
%DVIPSCommandLine: dvips pspic1.dvi -o pspic1.ps
%DVIPSParameters: dpi=600, compressed
%DVIPSSource:  TeX output 2001.11.12:1315
%!
/TeXDict 300 dict def TeXDict begin/N{def}def/B{bind def}N/S{exch}N/X{S
N}B/A{dup}B/TR{translate}N/isls false N/vsize 11 72 mul N/hsize 8.5 72
mul N/landplus90{false}def/@rigin{isls{[0 landplus90{1 -1}{-1 1}ifelse 0
0 0]concat}if 72 Resolution div 72 VResolution div neg scale isls{
landplus90{VResolution 72 div vsize mul 0 exch}{Resolution -72 div hsize
mul 0}ifelse TR}if Resolution VResolution vsize -72 div 1 add mul TR[
matrix currentmatrix{A A round sub abs 0.00001 lt{round}if}forall round
exch round exch]setmatrix}N/@landscape{/isls true N}B/@manualfeed{
statusdict/manualfeed true put}B/@copies{/#copies X}B/FMat[1 0 0 -1 0 0]
N/FBB[0 0 0 0]N/nn 0 N/IEn 0 N/ctr 0 N/df-tail{/nn 8 dict N nn begin
/FontType 3 N/FontMatrix fntrx N/FontBBox FBB N string/base X array
/BitMaps X/BuildChar{CharBuilder}N/Encoding IEn N end A{/foo setfont}2
array copy cvx N load 0 nn put/ctr 0 N[}B/sf 0 N/df{/sf 1 N/fntrx FMat N
df-tail}B/dfs{div/sf X/fntrx[sf 0 0 sf neg 0 0]N df-tail}B/E{pop nn A
definefont setfont}B/Cw{Cd A length 5 sub get}B/Ch{Cd A length 4 sub get
}B/Cx{128 Cd A length 3 sub get sub}B/Cy{Cd A length 2 sub get 127 sub}
B/Cdx{Cd A length 1 sub get}B/Ci{Cd A type/stringtype ne{ctr get/ctr ctr
1 add N}if}B/id 0 N/rw 0 N/rc 0 N/gp 0 N/cp 0 N/G 0 N/CharBuilder{save 3
1 roll S A/base get 2 index get S/BitMaps get S get/Cd X pop/ctr 0 N Cdx
0 Cx Cy Ch sub Cx Cw add Cy setcachedevice Cw Ch true[1 0 0 -1 -.1 Cx
sub Cy .1 sub]/id Ci N/rw Cw 7 add 8 idiv string N/rc 0 N/gp 0 N/cp 0 N{
rc 0 ne{rc 1 sub/rc X rw}{G}ifelse}imagemask restore}B/G{{id gp get/gp
gp 1 add N A 18 mod S 18 idiv pl S get exec}loop}B/adv{cp add/cp X}B
/chg{rw cp id gp 4 index getinterval putinterval A gp add/gp X adv}B/nd{
/cp 0 N rw exit}B/lsh{rw cp 2 copy get A 0 eq{pop 1}{A 255 eq{pop 254}{
A A add 255 and S 1 and or}ifelse}ifelse put 1 adv}B/rsh{rw cp 2 copy
get A 0 eq{pop 128}{A 255 eq{pop 127}{A 2 idiv S 128 and or}ifelse}
ifelse put 1 adv}B/clr{rw cp 2 index string putinterval adv}B/set{rw cp
fillstr 0 4 index getinterval putinterval adv}B/fillstr 18 string 0 1 17
{2 copy 255 put pop}for N/pl[{adv 1 chg}{adv 1 chg nd}{1 add chg}{1 add
chg nd}{adv lsh}{adv lsh nd}{adv rsh}{adv rsh nd}{1 add adv}{/rc X nd}{
1 add set}{1 add clr}{adv 2 chg}{adv 2 chg nd}{pop nd}]A{bind pop}
forall N/D{/cc X A type/stringtype ne{]}if nn/base get cc ctr put nn
/BitMaps get S ctr S sf 1 ne{A A length 1 sub A 2 index S get sf div put
}if put/ctr ctr 1 add N}B/I{cc 1 add D}B/bop{userdict/bop-hook known{
bop-hook}if/SI save N @rigin 0 0 moveto/V matrix currentmatrix A 1 get A
mul exch 0 get A mul add .99 lt{/QV}{/RV}ifelse load def pop pop}N/eop{
SI restore userdict/eop-hook known{eop-hook}if showpage}N/@start{
userdict/start-hook known{start-hook}if pop/VResolution X/Resolution X
1000 div/DVImag X/IEn 256 array N 2 string 0 1 255{IEn S A 360 add 36 4
index cvrs cvn put}for pop 65781.76 div/vsize X 65781.76 div/hsize X}N
/p{show}N/RMat[1 0 0 -1 0 0]N/BDot 260 string N/Rx 0 N/Ry 0 N/V{}B/RV/v{
/Ry X/Rx X V}B statusdict begin/product where{pop false[(Display)(NeXT)
(LaserWriter 16/600)]{A length product length le{A length product exch 0
exch getinterval eq{pop true exit}if}{pop}ifelse}forall}{false}ifelse
end{{gsave TR -.1 .1 TR 1 1 scale Rx Ry false RMat{BDot}imagemask
grestore}}{{gsave TR -.1 .1 TR Rx Ry scale 1 1 false RMat{BDot}
imagemask grestore}}ifelse B/QV{gsave newpath transform round exch round
exch itransform moveto Rx 0 rlineto 0 Ry neg rlineto Rx neg 0 rlineto
fill grestore}B/a{moveto}B/delta 0 N/tail{A/delta X 0 rmoveto}B/M{S p
delta add tail}B/b{S p tail}B/c{-4 M}B/d{-3 M}B/e{-2 M}B/f{-1 M}B/g{0 M}
B/h{1 M}B/i{2 M}B/j{3 M}B/k{4 M}B/w{0 rmoveto}B/l{p -4 w}B/m{p -3 w}B/n{
p -2 w}B/o{p -1 w}B/q{p 1 w}B/r{p 2 w}B/s{p 3 w}B/t{p 4 w}B/x{0 S
rmoveto}B/y{3 2 roll p a}B/bos{/SS save N}B/eos{SS restore}B end

%!
% PostScript prologue for pstricks.tex.
% Version 97 patch 3, 98/06/01
% For distribution, see pstricks.tex.
%
/tx@Dict 200 dict def tx@Dict begin
/ADict 25 dict def
/CM { matrix currentmatrix } bind def
/SLW /setlinewidth load def
/CLW /currentlinewidth load def
/CP /currentpoint load def
/ED { exch def } bind def
/L /lineto load def
/T /translate load def
/TMatrix { } def
/RAngle { 0 } def
/Atan { /atan load stopped { pop pop 0 } if } def
/Div { dup 0 eq { pop } { div } ifelse } def
/NET { neg exch neg exch T } def
/Pyth { dup mul exch dup mul add sqrt } def
/PtoC { 2 copy cos mul 3 1 roll sin mul } def
/PathLength@ { /z z y y1 sub x x1 sub Pyth add def /y1 y def /x1 x def }
def
/PathLength { flattenpath /z 0 def { /y1 ED /x1 ED /y2 y1 def /x2 x1 def
} { /y ED /x ED PathLength@ } {} { /y y2 def /x x2 def PathLength@ }
/pathforall load stopped { pop pop pop pop } if z } def
/STP { .996264 dup scale } def
/STV { SDict begin normalscale end STP  } def
/DashLine { dup 0 gt { /a .5 def PathLength exch div } { pop /a 1 def
PathLength } ifelse /b ED /x ED /y ED /z y x add def b a .5 sub 2 mul y
mul sub z Div round z mul a .5 sub 2 mul y mul add b exch Div dup y mul
/y ED x mul /x ED x 0 gt y 0 gt and { [ y x ] 1 a sub y mul } { [ 1 0 ]
0 } ifelse setdash stroke } def
/DotLine { /b PathLength def /a ED /z ED /y CLW def /z y z add def a 0 gt
{ /b b a div def } { a 0 eq { /b b y sub def } { a -3 eq { /b b y add
def } if } ifelse } ifelse [ 0 b b z Div round Div dup 0 le { pop 1 } if
] a 0 gt { 0 } { y 2 div a -2 gt { neg } if } ifelse setdash 1
setlinecap stroke } def
/LineFill { gsave abs CLW add /a ED a 0 dtransform round exch round exch
2 copy idtransform exch Atan rotate idtransform pop /a ED .25 .25
% DG/SR modification begin - Dec. 12, 1997 - Patch 2
%itransform translate pathbbox /y2 ED a Div ceiling cvi /x2 ED /y1 ED a
itransform pathbbox /y2 ED a Div ceiling cvi /x2 ED /y1 ED a
% DG/SR modification end
Div cvi /x1 ED /y2 y2 y1 sub def clip newpath 2 setlinecap systemdict
/setstrokeadjust known { true setstrokeadjust } if x2 x1 sub 1 add { x1
% DG/SR modification begin - Jun.  1, 1998 - Patch 3 (from Michael Vulis)
% a mul y1 moveto 0 y2 rlineto stroke /x1 x1 1 add def } repeat grestore }
% def
a mul y1 moveto 0 y2 rlineto stroke /x1 x1 1 add def } repeat grestore
pop pop } def
% DG/SR modification end
/BeginArrow { ADict begin /@mtrx CM def gsave 2 copy T 2 index sub neg
exch 3 index sub exch Atan rotate newpath } def
/EndArrow { @mtrx setmatrix CP grestore end } def
/Arrow { CLW mul add dup 2 div /w ED mul dup /h ED mul /a ED { 0 h T 1 -1
scale } if w neg h moveto 0 0 L w h L w neg a neg rlineto gsave fill
grestore } def
/Tbar { CLW mul add /z ED z -2 div CLW 2 div moveto z 0 rlineto stroke 0
CLW moveto } def
/Bracket { CLW mul add dup CLW sub 2 div /x ED mul CLW add /y ED /z CLW 2
div def x neg y moveto x neg CLW 2 div L x CLW 2 div L x y L stroke 0
CLW moveto } def
/RoundBracket { CLW mul add dup 2 div /x ED mul /y ED /mtrx CM def 0 CLW
2 div T x y mul 0 ne { x y scale } if 1 1 moveto .85 .5 .35 0 0 0
curveto -.35 0 -.85 .5 -1 1 curveto mtrx setmatrix stroke 0 CLW moveto }
def
/SD { 0 360 arc fill } def
/EndDot { { /z DS def } { /z 0 def } ifelse /b ED 0 z DS SD b { 0 z DS
CLW sub SD } if 0 DS z add CLW 4 div sub moveto } def
/Shadow { [ { /moveto load } { /lineto load } { /curveto load } {
/closepath load } /pathforall load stopped { pop pop pop pop CP /moveto
load } if ] cvx newpath 3 1 roll T exec } def
/NArray { aload length 2 div dup dup cvi eq not { exch pop } if /n exch
cvi def } def
/NArray { /f ED counttomark 2 div dup cvi /n ED n eq not { exch pop } if
f { ] aload /Points ED } { n 2 mul 1 add -1 roll pop } ifelse } def
/Line { NArray n 0 eq not { n 1 eq { 0 0 /n 2 def } if ArrowA /n n 2 sub
def n { Lineto } repeat CP 4 2 roll ArrowB L pop pop } if } def
/Arcto { /a [ 6 -2 roll ] cvx def a r /arcto load stopped { 5 } { 4 }
ifelse { pop } repeat a } def
/CheckClosed { dup n 2 mul 1 sub index eq 2 index n 2 mul 1 add index eq
and { pop pop /n n 1 sub def } if } def
/Polygon { NArray n 2 eq { 0 0 /n 3 def } if n 3 lt { n { pop pop }
repeat } { n 3 gt { CheckClosed } if n 2 mul -2 roll /y0 ED /x0 ED /y1
ED /x1 ED x1 y1 /x1 x0 x1 add 2 div def /y1 y0 y1 add 2 div def x1 y1
moveto /n n 2 sub def n { Lineto } repeat x1 y1 x0 y0 6 4 roll Lineto
Lineto pop pop closepath } ifelse } def
/Diamond { /mtrx CM def T rotate /h ED /w ED dup 0 eq { pop } { CLW mul
neg /d ED /a w h Atan def /h d a sin Div h add def /w d a cos Div w add
def } ifelse mark w 2 div h 2 div w 0 0 h neg w neg 0 0 h w 2 div h 2
div /ArrowA { moveto } def /ArrowB { } def false Line closepath mtrx
setmatrix } def
% DG modification begin - Jan. 15, 1997
%/Triangle { /mtrx CM def translate rotate /h ED 2 div /w ED dup 0 eq {
%pop } { CLW mul /d ED /h h d w h Atan sin Div sub def /w w d h w Atan 2
%div dup cos exch sin Div mul sub def } ifelse mark 0 d w neg d 0 h w d 0
%d /ArrowA { moveto } def /ArrowB { } def false Line closepath mtrx
%setmatrix } def
/Triangle { /mtrx CM def translate rotate /h ED 2 div /w ED dup
CLW mul /d ED /h h d w h Atan sin Div sub def /w w d h w Atan 2
div dup cos exch sin Div mul sub def mark 0 d w neg d 0 h w d 0
d /ArrowA { moveto } def /ArrowB { } def false Line closepath mtrx
% DG/SR modification begin - Jun.  1, 1998 - Patch 3 (from Michael Vulis)
% setmatrix } def
setmatrix pop } def
% DG/SR modification end
/CCA { /y ED /x ED 2 copy y sub /dy1 ED x sub /dx1 ED /l1 dx1 dy1 Pyth
def } def
/CCA { /y ED /x ED 2 copy y sub /dy1 ED x sub /dx1 ED /l1 dx1 dy1 Pyth
def } def
/CC { /l0 l1 def /x1 x dx sub def /y1 y dy sub def /dx0 dx1 def /dy0 dy1
def CCA /dx dx0 l1 c exp mul dx1 l0 c exp mul add def /dy dy0 l1 c exp
mul dy1 l0 c exp mul add def /m dx0 dy0 Atan dx1 dy1 Atan sub 2 div cos
abs b exp a mul dx dy Pyth Div 2 div def /x2 x l0 dx mul m mul sub def
/y2 y l0 dy mul m mul sub def /dx l1 dx mul m mul neg def /dy l1 dy mul
m mul neg def } def
/IC { /c c 1 add def c 0 lt { /c 0 def } { c 3 gt { /c 3 def } if }
ifelse /a a 2 mul 3 div 45 cos b exp div def CCA /dx 0 def /dy 0 def }
def
/BOC { IC CC x2 y2 x1 y1 ArrowA CP 4 2 roll x y curveto } def
/NC { CC x1 y1 x2 y2 x y curveto } def
/EOC { x dx sub y dy sub 4 2 roll ArrowB 2 copy curveto } def
/BAC { IC CC x y moveto CC x1 y1 CP ArrowA } def
/NAC { x2 y2 x y curveto CC x1 y1 } def
/EAC { x2 y2 x y ArrowB curveto pop pop } def
/OpenCurve { NArray n 3 lt { n { pop pop } repeat } { BOC /n n 3 sub def
n { NC } repeat EOC } ifelse } def
/AltCurve { { false NArray n 2 mul 2 roll [ n 2 mul 3 sub 1 roll ] aload
/Points ED n 2 mul -2 roll } { false NArray } ifelse n 4 lt { n { pop
pop } repeat } { BAC /n n 4 sub def n { NAC } repeat EAC } ifelse } def
/ClosedCurve { NArray n 3 lt { n { pop pop } repeat } { n 3 gt {
CheckClosed } if 6 copy n 2 mul 6 add 6 roll IC CC x y moveto n { NC }
repeat closepath pop pop } ifelse } def
/SQ { /r ED r r moveto r r neg L r neg r neg L r neg r L fill } def
/ST { /y ED /x ED x y moveto x neg y L 0 x L fill } def
/SP { /r ED gsave 0 r moveto 4 { 72 rotate 0 r L } repeat fill grestore }
def
/FontDot { DS 2 mul dup matrix scale matrix concatmatrix exch matrix
rotate matrix concatmatrix exch findfont exch makefont setfont } def
/Rect { x1 y1 y2 add 2 div moveto x1 y2 lineto x2 y2 lineto x2 y1 lineto
x1 y1 lineto closepath } def
/OvalFrame { x1 x2 eq y1 y2 eq or { pop pop x1 y1 moveto x2 y2 L } { y1
y2 sub abs x1 x2 sub abs 2 copy gt { exch pop } { pop } ifelse 2 div
exch { dup 3 1 roll mul exch } if 2 copy lt { pop } { exch pop } ifelse
/b ED x1 y1 y2 add 2 div moveto x1 y2 x2 y2 b arcto x2 y2 x2 y1 b arcto
x2 y1 x1 y1 b arcto x1 y1 x1 y2 b arcto 16 { pop } repeat closepath }
ifelse } def
/Frame { CLW mul /a ED 3 -1 roll 2 copy gt { exch } if a sub /y2 ED a add
/y1 ED 2 copy gt { exch } if a sub /x2 ED a add /x1 ED 1 index 0 eq {
pop pop Rect } { OvalFrame } ifelse } def
/BezierNArray { /f ED counttomark 2 div dup cvi /n ED n eq not { exch pop
} if n 1 sub neg 3 mod 3 add 3 mod { 0 0 /n n 1 add def } repeat f { ]
aload /Points ED } { n 2 mul 1 add -1 roll pop } ifelse } def
/OpenBezier { BezierNArray n 1 eq { pop pop } { ArrowA n 4 sub 3 idiv { 6
2 roll 4 2 roll curveto } repeat 6 2 roll 4 2 roll ArrowB curveto }
ifelse } def
/ClosedBezier { BezierNArray n 1 eq { pop pop } { moveto n 1 sub 3 idiv {
6 2 roll 4 2 roll curveto } repeat closepath } ifelse } def
/BezierShowPoints { gsave Points aload length 2 div cvi /n ED moveto n 1
sub { lineto } repeat CLW 2 div SLW [ 4 4 ] 0 setdash stroke grestore }
def
/Parab { /y0 exch def /x0 exch def /y1 exch def /x1 exch def /dx x0 x1
sub 3 div def /dy y0 y1 sub 3 div def x0 dx sub y0 dy add x1 y1 ArrowA
x0 dx add y0 dy add x0 2 mul x1 sub y1 ArrowB curveto /Points [ x1 y1 x0
y0 x0 2 mul x1 sub y1 ] def } def
/Grid { newpath /a 4 string def /b ED /c ED /n ED cvi dup 1 lt { pop 1 }
if /s ED s div dup 0 eq { pop 1 } if /dy ED s div dup 0 eq { pop 1 } if
/dx ED dy div round dy mul /y0 ED dx div round dx mul /x0 ED dy div
round cvi /y2 ED dx div round cvi /x2 ED dy div round cvi /y1 ED dx div
round cvi /x1 ED /h y2 y1 sub 0 gt { 1 } { -1 } ifelse def /w x2 x1 sub
0 gt { 1 } { -1 } ifelse def b 0 gt { /z1 b 4 div CLW 2 div add def
/Helvetica findfont b scalefont setfont /b b .95 mul CLW 2 div add def }
if systemdict /setstrokeadjust known { true setstrokeadjust /t { } def }
{ /t { transform 0.25 sub round 0.25 add exch 0.25 sub round 0.25 add
exch itransform } bind def } ifelse gsave n 0 gt { 1 setlinecap [ 0 dy n
div ] dy n div 2 div setdash } { 2 setlinecap } ifelse /i x1 def /f y1
dy mul n 0 gt { dy n div 2 div h mul sub } if def /g y2 dy mul n 0 gt {
dy n div 2 div h mul add } if def x2 x1 sub w mul 1 add dup 1000 gt {
pop 1000 } if { i dx mul dup y0 moveto b 0 gt { gsave c i a cvs dup
stringwidth pop /z2 ED w 0 gt {z1} {z1 z2 add neg} ifelse h 0 gt {b neg}
{z1} ifelse rmoveto show grestore } if dup t f moveto g t L stroke /i i
w add def } repeat grestore gsave n 0 gt
% DG/SR modification begin - Nov. 7, 1997 - Patch 1
%{ 1 setlinecap [ 0 dx n div ] dy n div 2 div setdash }
{ 1 setlinecap [ 0 dx n div ] dx n div 2 div setdash }
% DG/SR modification end
{ 2 setlinecap } ifelse /i y1 def /f x1 dx mul
n 0 gt { dx n div 2 div w mul sub } if def /g x2 dx mul n 0 gt { dx n
div 2 div w mul add } if def y2 y1 sub h mul 1 add dup 1000 gt { pop
1000 } if { newpath i dy mul dup x0 exch moveto b 0 gt { gsave c i a cvs
dup stringwidth pop /z2 ED w 0 gt {z1 z2 add neg} {z1} ifelse h 0 gt
{z1} {b neg} ifelse rmoveto show grestore } if dup f exch t moveto g
exch t L stroke /i i h add def } repeat grestore } def
/ArcArrow { /d ED /b ED /a ED gsave newpath 0 -1000 moveto clip newpath 0
1 0 0 b grestore c mul /e ED pop pop pop r a e d PtoC y add exch x add
exch r a PtoC y add exch x add exch b pop pop pop pop a e d CLW 8 div c
mul neg d } def
/Ellipse { /mtrx CM def T scale 0 0 1 5 3 roll arc mtrx setmatrix } def
/Rot { CP CP translate 3 -1 roll neg rotate NET  } def
/RotBegin { tx@Dict /TMatrix known not { /TMatrix { } def /RAngle { 0 }
def } if /TMatrix [ TMatrix CM ] cvx def /a ED a Rot /RAngle [ RAngle
dup a add ] cvx def } def
/RotEnd { /TMatrix [ TMatrix setmatrix ] cvx def /RAngle [ RAngle pop ]
cvx def } def
/PutCoor { gsave CP T CM STV exch exec moveto setmatrix CP grestore } def
/PutBegin { /TMatrix [ TMatrix CM ] cvx def CP 4 2 roll T moveto } def
/PutEnd { CP /TMatrix [ TMatrix setmatrix ] cvx def moveto } def
/Uput { /a ED add 2 div /h ED 2 div /w ED /s a sin def /c a cos def /b s
abs c abs 2 copy gt dup /q ED { pop } { exch pop } ifelse def /w1 c b
div w mul def /h1 s b div h mul def q { w1 abs w sub dup c mul abs } {
h1 abs h sub dup s mul abs } ifelse } def
/UUput { /z ED abs /y ED /x ED q { x s div c mul abs y gt } { x c div s
mul abs y gt } ifelse { x x mul y y mul sub z z mul add sqrt z add } { q
{ x s div } { x c div } ifelse abs } ifelse a PtoC h1 add exch w1 add
exch } def
/BeginOL { dup (all) eq exch TheOL eq or { IfVisible not { Visible
/IfVisible true def } if } { IfVisible { Invisible /IfVisible false def
} if } ifelse } def
/InitOL { /OLUnit [ 3000 3000 matrix defaultmatrix dtransform ] cvx def
/Visible { CP OLUnit idtransform T moveto } def /Invisible { CP OLUnit
neg exch neg exch idtransform T moveto } def /BOL { BeginOL } def
/IfVisible true def } def
end
% END pstricks.pro

%%Creation Date: May 7, 1993
%% Version 97 patch 1, 99/12/16
%% Modified by Etienne Riga <etienne.riga@skynet.be> - Dec. 16, 1999
%% to add /Diamond, /SolidDiamond and /BoldDiamond
10 dict dup begin
  /FontType 3 def
  /FontMatrix [ .001 0 0 .001 0 0 ] def
  /FontBBox [ 0 0 0 0 ] def
  /Encoding 256 array def
  0 1 255 { Encoding exch /.notdef put } for
  Encoding
    dup (b) 0 get /Bullet put
    dup (c) 0 get /Circle put
    dup (C) 0 get /BoldCircle put
    dup (u) 0 get /SolidTriangle put
    dup (t) 0 get /Triangle put
    dup (T) 0 get /BoldTriangle put
    dup (r) 0 get /SolidSquare put
    dup (s) 0 get /Square put
    dup (S) 0 get /BoldSquare put
    dup (q) 0 get /SolidPentagon put
    dup (p) 0 get /Pentagon put
    dup (P) 0 get /BoldPentagon put
% DG/SR modification begin - Dec. 16, 1999 - From Etienne Riga
    dup (l) 0 get /SolidDiamond put
    dup (d) 0 get /Diamond put
        (D) 0 get /BoldDiamond put
% DG/SR modification end
  /Metrics 13 dict def
  Metrics begin
    /Bullet        1000   def
    /Circle        1000   def
    /BoldCircle    1000   def
    /SolidTriangle 1344   def
    /Triangle      1344   def
    /BoldTriangle  1344   def
    /SolidSquare    886   def
    /Square         886   def
    /BoldSquare     886   def
    /SolidPentagon 1093.2 def
    /Pentagon      1093.2 def
    /BoldPentagon  1093.2 def
% DG/SR modification begin - Dec. 16, 1999 - From Etienne Riga
    /SolidDiamond  1008   def
    /Diamond       1008   def
    /BoldDiamond   1008   def
% DG/SR modification end
    /.notdef 0 def
  end
  /BBoxes 13 dict def
  BBoxes begin
    /Circle        { -550 -550 550 550 } def
    /BoldCircle    /Circle load def
    /Bullet        /Circle load def
    /Triangle      { -571.5 -330 571.5 660 } def
    /BoldTriangle  /Triangle load def
    /SolidTriangle /Triangle load def
    /Square        { -450 -450 450 450 } def
    /BoldSquare    /Square load def
    /SolidSquare   /Square load def
    /Pentagon      { -546.6 -465 546.6 574.7 } def
    /BoldPentagon  /Pentagon load def
    /SolidPentagon /Pentagon load def
% DG/SR modification begin - Dec. 16, 1999 - From Etienne Riga
    /Diamond       { -428.5 -742.5 428.5 742.5 } def
    /BoldDiamond   /Diamond load def
    /SolidDiamond  /Diamond load def
% DG/SR modification end
    /.notdef { 0 0 0 0 } def
  end
  /CharProcs 20 dict def
  CharProcs begin
    /Adjust {
      2 copy dtransform floor .5 add exch floor .5 add exch idtransform
      3 -1 roll div 3 1 roll exch div exch scale
    } def
    /CirclePath    { 0 0 500 0 360 arc closepath } def
    /Bullet        { 500 500 Adjust CirclePath fill } def
    /Circle        { 500 500 Adjust CirclePath .9 .9 scale CirclePath
                     eofill } def
    /BoldCircle    { 500 500 Adjust CirclePath .8 .8 scale CirclePath
                     eofill } def
    /BoldCircle    { CirclePath .8 .8 scale CirclePath eofill } def
    /TrianglePath  { 0  660 moveto -571.5 -330 lineto 571.5 -330 lineto
                     closepath } def
    /SolidTriangle { TrianglePath fill } def
    /Triangle      { TrianglePath .85 .85 scale TrianglePath eofill } def
    /BoldTriangle  { TrianglePath .7 .7 scale TrianglePath eofill } def
    /SquarePath    { -450 450 moveto 450 450 lineto 450 -450 lineto
                     -450 -450 lineto closepath } def
    /SolidSquare   { SquarePath fill } def
    /Square        { SquarePath .89 .89 scale SquarePath eofill } def
    /BoldSquare    { SquarePath .78 .78 scale SquarePath eofill } def
    /PentagonPath  {
      -337.8 -465   moveto
       337.8 -465   lineto
       546.6  177.6 lineto
         0    574.7 lineto
      -546.6  177.6 lineto
      closepath
    } def
    /SolidPentagon { PentagonPath fill } def
    /Pentagon      { PentagonPath .89 .89 scale PentagonPath eofill } def
    /BoldPentagon  { PentagonPath .78 .78 scale PentagonPath eofill } def
% DG/SR modification begin - Dec. 16, 1999 - From Etienne Riga
    /DiamondPath   { 0 742.5 moveto -428.5 0 lineto 0 -742.5 lineto
                     428.5 0 lineto closepath } def
    /SolidDiamond  { DiamondPath fill } def
    /Diamond       { DiamondPath .85 .85 scale DiamondPath eofill } def
    /BoldDiamond   { DiamondPath .7 .7 scale DiamondPath eofill } def
% DG/SR modification end
    /.notdef { } def
  end
  /BuildGlyph {
    exch
    begin
      Metrics 1 index get exec 0
      BBoxes 3 index get exec
      setcachedevice
      CharProcs begin load exec end
    end
  } def
  /BuildChar {
    1 index /Encoding get exch get
    1 index /BuildGlyph get exec
  } bind def
end
/PSTricksDotFont exch definefont pop
%END pst-dots.pro

%!
% PostScript prologue for pst-node.tex.
% Version 97 patch 1, 97/05/09.
% For distribution, see pstricks.tex.
%
/tx@NodeDict 400 dict def tx@NodeDict begin
tx@Dict begin /T /translate load def end
/NewNode { gsave /next ED dict dup 3 1 roll def exch { dup 3 1 roll def }
if begin tx@Dict begin STV CP T exec end /NodeMtrx CM def next end
grestore } def
/InitPnode { /Y ED /X ED /NodePos { NodeSep Cos mul NodeSep Sin mul } def
} def
/InitCnode { /r ED /Y ED /X ED /NodePos { NodeSep r add dup Cos mul exch
Sin mul } def } def
/GetRnodePos { Cos 0 gt { /dx r NodeSep add def } { /dx l NodeSep sub def
} ifelse Sin 0 gt { /dy u NodeSep add def } { /dy d NodeSep sub def }
ifelse dx Sin mul abs dy Cos mul abs gt { dy Cos mul Sin div dy } { dx
dup Sin mul Cos Div } ifelse } def
/InitRnode { /Y ED /X ED X sub /r ED /l X neg def Y add neg /d ED Y sub
/u ED /NodePos { GetRnodePos } def } def
/DiaNodePos { w h mul w Sin mul abs h Cos mul abs add Div NodeSep add dup
Cos mul exch Sin mul } def
/TriNodePos { Sin s lt { d NodeSep sub dup Cos mul Sin Div exch } { w h
mul w Sin mul h Cos abs mul add Div NodeSep add dup Cos mul exch Sin mul
} ifelse } def
/InitTriNode { sub 2 div exch 2 div exch 2 copy T 2 copy 4 index index /d
ED pop pop pop pop -90 mul rotate /NodeMtrx CM def /X 0 def /Y 0 def d
sub abs neg /d ED d add /h ED 2 div h mul h d sub Div /w ED /s d w Atan
sin def /NodePos { TriNodePos } def } def
/OvalNodePos { /ww w NodeSep add def /hh h NodeSep add def Sin ww mul Cos
hh mul Atan dup cos ww mul exch sin hh mul } def
/GetCenter { begin X Y NodeMtrx transform CM itransform end } def
/XYPos { dup sin exch cos Do /Cos ED /Sin ED /Dist ED Cos 0 gt { Dist
Dist Sin mul Cos div } { Cos 0 lt { Dist neg Dist Sin mul Cos div neg }
{ 0 Dist Sin mul } ifelse } ifelse Do } def
/GetEdge { dup 0 eq { pop begin 1 0 NodeMtrx dtransform CM idtransform
exch atan sub dup sin /Sin ED cos /Cos ED /NodeSep ED NodePos NodeMtrx
dtransform CM idtransform end } { 1 eq {{exch}} {{}} ifelse /Do ED pop
XYPos } ifelse } def
/AddOffset { 1 index 0 eq { pop pop } { 2 copy 5 2 roll cos mul add 4 1
roll sin mul sub exch } ifelse } def
/GetEdgeA { NodeSepA AngleA NodeA NodeSepTypeA GetEdge OffsetA AngleA
AddOffset yA add /yA1 ED xA add /xA1 ED } def
/GetEdgeB { NodeSepB AngleB NodeB NodeSepTypeB GetEdge OffsetB AngleB
AddOffset yB add /yB1 ED xB add /xB1 ED } def
/GetArmA { ArmTypeA 0 eq { /xA2 ArmA AngleA cos mul xA1 add def /yA2 ArmA
AngleA sin mul yA1 add def } { ArmTypeA 1 eq {{exch}} {{}} ifelse /Do ED
ArmA AngleA XYPos OffsetA AngleA AddOffset yA add /yA2 ED xA add /xA2 ED
} ifelse } def
/GetArmB { ArmTypeB 0 eq { /xB2 ArmB AngleB cos mul xB1 add def /yB2 ArmB
AngleB sin mul yB1 add def } { ArmTypeB 1 eq {{exch}} {{}} ifelse /Do ED
ArmB AngleB XYPos OffsetB AngleB AddOffset yB add /yB2 ED xB add /xB2 ED
} ifelse } def
/InitNC { /b ED /a ED /NodeSepTypeB ED /NodeSepTypeA ED /NodeSepB ED
/NodeSepA ED /OffsetB ED /OffsetA ED tx@NodeDict a known tx@NodeDict b
known and dup { /NodeA a load def /NodeB b load def NodeA GetCenter /yA
ED /xA ED NodeB GetCenter /yB ED /xB ED } if } def
/LPutLine { 4 copy 3 -1 roll sub neg 3 1 roll sub Atan /NAngle ED 1 t sub
mul 3 1 roll 1 t sub mul 4 1 roll t mul add /Y ED t mul add /X ED } def
/LPutLines { mark LPutVar counttomark 2 div 1 sub /n ED t floor dup n gt
{ pop n 1 sub /t 1 def } { dup t sub neg /t ED } ifelse cvi 2 mul { pop
} repeat LPutLine cleartomark } def
/BezierMidpoint { /y3 ED /x3 ED /y2 ED /x2 ED /y1 ED /x1 ED /y0 ED /x0 ED
/t ED /cx x1 x0 sub 3 mul def /cy y1 y0 sub 3 mul def /bx x2 x1 sub 3
mul cx sub def /by y2 y1 sub 3 mul cy sub def /ax x3 x0 sub cx sub bx
sub def /ay y3 y0 sub cy sub by sub def ax t 3 exp mul bx t t mul mul
add cx t mul add x0 add ay t 3 exp mul by t t mul mul add cy t mul add
y0 add 3 ay t t mul mul mul 2 by t mul mul add cy add 3 ax t t mul mul
mul 2 bx t mul mul add cx add atan /NAngle ED /Y ED /X ED } def
/HPosBegin { yB yA ge { /t 1 t sub def } if /Y yB yA sub t mul yA add def
} def
/HPosEnd { /X Y yyA sub yyB yyA sub Div xxB xxA sub mul xxA add def
/NAngle yyB yyA sub xxB xxA sub Atan def } def
/HPutLine { HPosBegin /yyA ED /xxA ED /yyB ED /xxB ED HPosEnd  } def
/HPutLines { HPosBegin yB yA ge { /check { le } def } { /check { ge } def
} ifelse /xxA xA def /yyA yA def mark xB yB LPutVar { dup Y check { exit
} { /yyA ED /xxA ED } ifelse } loop /yyB ED /xxB ED cleartomark HPosEnd 
} def
/VPosBegin { xB xA lt { /t 1 t sub def } if /X xB xA sub t mul xA add def
} def
/VPosEnd { /Y X xxA sub xxB xxA sub Div yyB yyA sub mul yyA add def
/NAngle yyB yyA sub xxB xxA sub Atan def } def
/VPutLine { VPosBegin /yyA ED /xxA ED /yyB ED /xxB ED VPosEnd  } def
/VPutLines { VPosBegin xB xA ge { /check { le } def } { /check { ge } def
} ifelse /xxA xA def /yyA yA def mark xB yB LPutVar { 1 index X check {
exit } { /yyA ED /xxA ED } ifelse } loop /yyB ED /xxB ED cleartomark
VPosEnd  } def
/HPutCurve { gsave newpath /SaveLPutVar /LPutVar load def LPutVar 8 -2
roll moveto curveto flattenpath /LPutVar [ {} {} {} {} pathforall ] cvx
def grestore exec /LPutVar /SaveLPutVar load def } def
/NCCoor { /AngleA yB yA sub xB xA sub Atan def /AngleB AngleA 180 add def
GetEdgeA GetEdgeB /LPutVar [ xB1 yB1 xA1 yA1 ] cvx def /LPutPos {
LPutVar LPutLine } def /HPutPos { LPutVar HPutLine } def /VPutPos {
LPutVar VPutLine } def LPutVar } def
/NCLine { NCCoor tx@Dict begin ArrowA CP 4 2 roll ArrowB lineto pop pop
end } def
/NCLines { false NArray n 0 eq { NCLine } { 2 copy yA sub exch xA sub
Atan /AngleA ED n 2 mul dup index exch index yB sub exch xB sub Atan
/AngleB ED GetEdgeA GetEdgeB /LPutVar [ xB1 yB1 n 2 mul 4 add 4 roll xA1
yA1 ] cvx def mark LPutVar tx@Dict begin false Line end /LPutPos {
LPutLines } def /HPutPos { HPutLines } def /VPutPos { VPutLines } def }
ifelse } def
/NCCurve { GetEdgeA GetEdgeB xA1 xB1 sub yA1 yB1 sub Pyth 2 div dup 3 -1
roll mul /ArmA ED mul /ArmB ED /ArmTypeA 0 def /ArmTypeB 0 def GetArmA
GetArmB xA2 yA2 xA1 yA1 tx@Dict begin ArrowA end xB2 yB2 xB1 yB1 tx@Dict
begin ArrowB end curveto /LPutVar [ xA1 yA1 xA2 yA2 xB2 yB2 xB1 yB1 ]
cvx def /LPutPos { t LPutVar BezierMidpoint } def /HPutPos { { HPutLines
} HPutCurve } def /VPutPos { { VPutLines } HPutCurve } def } def
/NCAngles { GetEdgeA GetEdgeB GetArmA GetArmB /mtrx AngleA matrix rotate
def xA2 yA2 mtrx transform pop xB2 yB2 mtrx transform exch pop mtrx
itransform /y0 ED /x0 ED mark ArmB 0 ne { xB1 yB1 } if xB2 yB2 x0 y0 xA2
yA2 ArmA 0 ne { xA1 yA1 } if tx@Dict begin false Line end /LPutVar [ xB1
yB1 xB2 yB2 x0 y0 xA2 yA2 xA1 yA1 ] cvx def /LPutPos { LPutLines } def
/HPutPos { HPutLines } def /VPutPos { VPutLines } def } def
/NCAngle { GetEdgeA GetEdgeB GetArmB /mtrx AngleA matrix rotate def xB2
yB2 mtrx itransform pop xA1 yA1 mtrx itransform exch pop mtrx transform
/y0 ED /x0 ED mark ArmB 0 ne { xB1 yB1 } if xB2 yB2 x0 y0 xA1 yA1
tx@Dict begin false Line end /LPutVar [ xB1 yB1 xB2 yB2 x0 y0 xA1 yA1 ]
cvx def /LPutPos { LPutLines } def /HPutPos { HPutLines } def /VPutPos {
VPutLines } def } def
/NCBar { GetEdgeA GetEdgeB GetArmA GetArmB /mtrx AngleA matrix rotate def
xA2 yA2 mtrx itransform pop xB2 yB2 mtrx itransform pop sub dup 0 mtrx
transform 3 -1 roll 0 gt { /yB2 exch yB2 add def /xB2 exch xB2 add def }
{ /yA2 exch neg yA2 add def /xA2 exch neg xA2 add def } ifelse mark ArmB
0 ne { xB1 yB1 } if xB2 yB2 xA2 yA2 ArmA 0 ne { xA1 yA1 } if tx@Dict
begin false Line end /LPutVar [ xB1 yB1 xB2 yB2 xA2 yA2 xA1 yA1 ] cvx
def /LPutPos { LPutLines } def /HPutPos { HPutLines } def /VPutPos {
VPutLines } def } def
/NCDiag { GetEdgeA GetEdgeB GetArmA GetArmB mark ArmB 0 ne { xB1 yB1 } if
xB2 yB2 xA2 yA2 ArmA 0 ne { xA1 yA1 } if tx@Dict begin false Line end
/LPutVar [ xB1 yB1 xB2 yB2 xA2 yA2 xA1 yA1 ] cvx def /LPutPos {
LPutLines } def /HPutPos { HPutLines } def /VPutPos { VPutLines } def }
def
/NCDiagg { GetEdgeA GetArmA yB yA2 sub xB xA2 sub Atan 180 add /AngleB ED
GetEdgeB mark xB1 yB1 xA2 yA2 ArmA 0 ne { xA1 yA1 } if tx@Dict begin
false Line end /LPutVar [ xB1 yB1 xA2 yA2 xA1 yA1 ] cvx def /LPutPos {
LPutLines } def /HPutPos { HPutLines } def /VPutPos { VPutLines } def }
def
/NCLoop { GetEdgeA GetEdgeB GetArmA GetArmB /mtrx AngleA matrix rotate
def xA2 yA2 mtrx transform loopsize add /yA3 ED /xA3 ED /xB3 xB2 yB2
mtrx transform pop def xB3 yA3 mtrx itransform /yB3 ED /xB3 ED xA3 yA3
mtrx itransform /yA3 ED /xA3 ED mark ArmB 0 ne { xB1 yB1 } if xB2 yB2
xB3 yB3 xA3 yA3 xA2 yA2 ArmA 0 ne { xA1 yA1 } if tx@Dict begin false
Line end /LPutVar [ xB1 yB1 xB2 yB2 xB3 yB3 xA3 yA3 xA2 yA2 xA1 yA1 ]
cvx def /LPutPos { LPutLines } def /HPutPos { HPutLines } def /VPutPos {
VPutLines } def } def
% DG/SR modification begin - May 9, 1997 - Patch 1
%/NCCircle { 0 0 NodesepA nodeA \tx@GetEdge pop xA sub 2 div dup 2 exp r
%r mul sub abs sqrt atan 2 mul /a ED r AngleA 90 add PtoC yA add exch xA add
%exch 2 copy /LPutVar [ 4 2 roll r AngleA ] cvx def /LPutPos { LPutVar t 360
%mul add dup 5 1 roll 90 sub \tx@PtoC 3 -1 roll add /Y ED add /X ED /NAngle ED
/NCCircle { NodeSepA 0 NodeA 0 GetEdge pop 2 div dup 2 exp r
r mul sub abs sqrt atan 2 mul /a ED r AngleA 90 add PtoC yA add exch xA add
exch 2 copy /LPutVar [ 4 2 roll r AngleA ] cvx def /LPutPos { LPutVar t 360
mul add dup 5 1 roll 90 sub PtoC 3 -1 roll add /Y ED add /X ED /NAngle ED
% DG/SR modification end
} def /HPutPos { LPutPos } def /VPutPos { LPutPos } def r AngleA 90 sub a add
AngleA 270 add a sub tx@Dict begin /angleB ED /angleA ED /r ED /c 57.2957 r
Div def /y ED /x ED } def
/NCBox { /d ED /h ED /AngleB yB yA sub xB xA sub Atan def /AngleA AngleB
180 add def GetEdgeA GetEdgeB /dx d AngleB sin mul def /dy d AngleB cos
mul neg def /hx h AngleB sin mul neg def /hy h AngleB cos mul def
/LPutVar [ xA1 hx add yA1 hy add xB1 hx add yB1 hy add xB1 dx add yB1 dy
add xA1 dx add yA1 dy add ] cvx def /LPutPos { LPutLines } def /HPutPos
{ xB yB xA yA LPutLine } def /VPutPos { HPutPos } def mark LPutVar
tx@Dict begin false Polygon end } def
/NCArcBox { /l ED neg /d ED /h ED /a ED /AngleA yB yA sub xB xA sub Atan
def /AngleB AngleA 180 add def /tA AngleA a sub 90 add def /tB tA a 2
mul add def /r xB xA sub tA cos tB cos sub Div dup 0 eq { pop 1 } if def
/x0 xA r tA cos mul add def /y0 yA r tA sin mul add def /c 57.2958 r div
def /AngleA AngleA a sub 180 add def /AngleB AngleB a add 180 add def
GetEdgeA GetEdgeB /AngleA tA 180 add yA yA1 sub xA xA1 sub Pyth c mul
sub def /AngleB tB 180 add yB yB1 sub xB xB1 sub Pyth c mul add def l 0
eq { x0 y0 r h add AngleA AngleB arc x0 y0 r d add AngleB AngleA arcn }
{ x0 y0 translate /tA AngleA l c mul add def /tB AngleB l c mul sub def
0 0 r h add tA tB arc r h add AngleB PtoC r d add AngleB PtoC 2 copy 6 2
roll l arcto 4 { pop } repeat r d add tB PtoC l arcto 4 { pop } repeat 0
0 r d add tB tA arcn r d add AngleA PtoC r h add AngleA PtoC 2 copy 6 2
roll l arcto 4 { pop } repeat r h add tA PtoC l arcto 4 { pop } repeat }
ifelse closepath /LPutVar [ x0 y0 r AngleA AngleB h d ] cvx def /LPutPos
{ LPutVar /d ED /h ED /AngleB ED /AngleA ED /r ED /y0 ED /x0 ED t 1 le {
r h add AngleA 1 t sub mul AngleB t mul add dup 90 add /NAngle ED PtoC }
{ t 2 lt { /NAngle AngleB 180 add def r 2 t sub h mul t 1 sub d mul add
add AngleB PtoC } { t 3 lt { r d add AngleB 3 t sub mul AngleA 2 t sub
mul add dup 90 sub /NAngle ED PtoC } { /NAngle AngleA 180 add def r 4 t
sub d mul t 3 sub h mul add add AngleA PtoC } ifelse } ifelse } ifelse
y0 add /Y ED x0 add /X ED } def /HPutPos { LPutPos } def /VPutPos {
LPutPos } def } def
/Tfan { /AngleA yB yA sub xB xA sub Atan def GetEdgeA w xA1 xB sub yA1 yB
sub Pyth Pyth w Div CLW 2 div mul 2 div dup AngleA sin mul yA1 add /yA1
ED AngleA cos mul xA1 add /xA1 ED /LPutVar [ xA1 yA1 m { xB w add yB xB
w sub yB } { xB yB w sub xB yB w add } ifelse xA1 yA1 ] cvx def /LPutPos
{ LPutLines } def /VPutPos@ { LPutVar flag { 8 4 roll pop pop pop pop }
{ pop pop pop pop 4 2 roll } ifelse } def /VPutPos { VPutPos@ VPutLine }
def /HPutPos { VPutPos@ HPutLine } def mark LPutVar tx@Dict begin
/ArrowA { moveto } def /ArrowB { } def false Line closepath end } def
/LPutCoor { NAngle tx@Dict begin /NAngle ED end gsave CM STV CP Y sub neg
exch X sub neg exch moveto setmatrix CP grestore } def
/LPut { tx@NodeDict /LPutPos known { LPutPos } { CP /Y ED /X ED /NAngle 0
def } ifelse LPutCoor  } def
/HPutAdjust { Sin Cos mul 0 eq { 0 } { d Cos mul Sin div flag not { neg }
if h Cos mul Sin div flag { neg } if 2 copy gt { pop } { exch pop }
ifelse } ifelse s add flag { r add neg } { l add } ifelse X add /X ED }
def
/VPutAdjust { Sin Cos mul 0 eq { 0 } { l Sin mul Cos div flag { neg } if
r Sin mul Cos div flag not { neg } if 2 copy gt { pop } { exch pop }
ifelse } ifelse s add flag { d add } { h add neg } ifelse Y add /Y ED }
def
end
% END pst-node.pro

%!
TeXDict begin/rf{findfont dup length 1 add dict begin{1 index/FID ne 2
index/UniqueID ne and{def}{pop pop}ifelse}forall[1 index 0 6 -1 roll
exec 0 exch 5 -1 roll VResolution Resolution div mul neg 0 0]/Metrics
exch def dict begin Encoding{exch dup type/integertype ne{pop pop 1 sub
dup 0 le{pop}{[}ifelse}{FontMatrix 0 get div Metrics 0 get div def}
ifelse}forall Metrics/Metrics currentdict end def[2 index currentdict
end definefont 3 -1 roll makefont/setfont cvx]cvx def}def/ObliqueSlant{
dup sin S cos div neg}B/SlantFont{4 index mul add}def/ExtendFont{3 -1
roll mul exch}def/ReEncodeFont{CharStrings rcheck{/Encoding false def
dup[exch{dup CharStrings exch known not{pop/.notdef/Encoding true def}
if}forall Encoding{]exch pop}{cleartomark}ifelse}if/Encoding exch def}
def end

%!
TeXDict begin/SDict 200 dict N SDict begin/@SpecialDefaults{/hs 612 N
/vs 792 N/ho 0 N/vo 0 N/hsc 1 N/vsc 1 N/ang 0 N/CLIP 0 N/rwiSeen false N
/rhiSeen false N/letter{}N/note{}N/a4{}N/legal{}N}B/@scaleunit 100 N
/@hscale{@scaleunit div/hsc X}B/@vscale{@scaleunit div/vsc X}B/@hsize{
/hs X/CLIP 1 N}B/@vsize{/vs X/CLIP 1 N}B/@clip{/CLIP 2 N}B/@hoffset{/ho
X}B/@voffset{/vo X}B/@angle{/ang X}B/@rwi{10 div/rwi X/rwiSeen true N}B
/@rhi{10 div/rhi X/rhiSeen true N}B/@llx{/llx X}B/@lly{/lly X}B/@urx{
/urx X}B/@ury{/ury X}B/magscale true def end/@MacSetUp{userdict/md known
{userdict/md get type/dicttype eq{userdict begin md length 10 add md
maxlength ge{/md md dup length 20 add dict copy def}if end md begin
/letter{}N/note{}N/legal{}N/od{txpose 1 0 mtx defaultmatrix dtransform S
atan/pa X newpath clippath mark{transform{itransform moveto}}{transform{
itransform lineto}}{6 -2 roll transform 6 -2 roll transform 6 -2 roll
transform{itransform 6 2 roll itransform 6 2 roll itransform 6 2 roll
curveto}}{{closepath}}pathforall newpath counttomark array astore/gc xdf
pop ct 39 0 put 10 fz 0 fs 2 F/|______Courier fnt invertflag{PaintBlack}
if}N/txpose{pxs pys scale ppr aload pop por{noflips{pop S neg S TR pop 1
-1 scale}if xflip yflip and{pop S neg S TR 180 rotate 1 -1 scale ppr 3
get ppr 1 get neg sub neg ppr 2 get ppr 0 get neg sub neg TR}if xflip
yflip not and{pop S neg S TR pop 180 rotate ppr 3 get ppr 1 get neg sub
neg 0 TR}if yflip xflip not and{ppr 1 get neg ppr 0 get neg TR}if}{
noflips{TR pop pop 270 rotate 1 -1 scale}if xflip yflip and{TR pop pop
90 rotate 1 -1 scale ppr 3 get ppr 1 get neg sub neg ppr 2 get ppr 0 get
neg sub neg TR}if xflip yflip not and{TR pop pop 90 rotate ppr 3 get ppr
1 get neg sub neg 0 TR}if yflip xflip not and{TR pop pop 270 rotate ppr
2 get ppr 0 get neg sub neg 0 S TR}if}ifelse scaleby96{ppr aload pop 4
-1 roll add 2 div 3 1 roll add 2 div 2 copy TR .96 dup scale neg S neg S
TR}if}N/cp{pop pop showpage pm restore}N end}if}if}N/normalscale{
Resolution 72 div VResolution 72 div neg scale magscale{DVImag dup scale
}if 0 setgray}N/psfts{S 65781.76 div N}N/startTexFig{/psf$SavedState
save N userdict maxlength dict begin/magscale true def normalscale
currentpoint TR/psf$ury psfts/psf$urx psfts/psf$lly psfts/psf$llx psfts
/psf$y psfts/psf$x psfts currentpoint/psf$cy X/psf$cx X/psf$sx psf$x
psf$urx psf$llx sub div N/psf$sy psf$y psf$ury psf$lly sub div N psf$sx
psf$sy scale psf$cx psf$sx div psf$llx sub psf$cy psf$sy div psf$ury sub
TR/showpage{}N/erasepage{}N/copypage{}N/p 3 def @MacSetUp}N/doclip{
psf$llx psf$lly psf$urx psf$ury currentpoint 6 2 roll newpath 4 copy 4 2
roll moveto 6 -1 roll S lineto S lineto S lineto closepath clip newpath
moveto}N/endTexFig{end psf$SavedState restore}N/@beginspecial{SDict
begin/SpecialSave save N gsave normalscale currentpoint TR
@SpecialDefaults count/ocount X/dcount countdictstack N}N/@setspecial{
CLIP 1 eq{newpath 0 0 moveto hs 0 rlineto 0 vs rlineto hs neg 0 rlineto
closepath clip}if ho vo TR hsc vsc scale ang rotate rwiSeen{rwi urx llx
sub div rhiSeen{rhi ury lly sub div}{dup}ifelse scale llx neg lly neg TR
}{rhiSeen{rhi ury lly sub div dup scale llx neg lly neg TR}if}ifelse
CLIP 2 eq{newpath llx lly moveto urx lly lineto urx ury lineto llx ury
lineto closepath clip}if/showpage{}N/erasepage{}N/copypage{}N newpath}N
/@endspecial{count ocount sub{pop}repeat countdictstack dcount sub{end}
repeat grestore SpecialSave restore end}N/@defspecial{SDict begin}N
/@fedspecial{end}B/li{lineto}B/rl{rlineto}B/rc{rcurveto}B/np{/SaveX
currentpoint/SaveY X N 1 setlinecap newpath}N/st{stroke SaveX SaveY
moveto}N/fil{fill SaveX SaveY moveto}N/ellipse{/endangle X/startangle X
/yrad X/xrad X/savematrix matrix currentmatrix N TR xrad yrad scale 0 0
1 startangle endangle arc savematrix setmatrix}N end


% Copyright (C) 1997 American Mathematical Society.  All Rights Reserved.

11 dict begin
/FontInfo 7 dict dup begin
/version (1.00B) readonly def
/Notice (Copyright (C) 1997 American Mathematical Society. All Rights Reserved) readonly def
/FullName (CMTT10) readonly def
/FamilyName (Computer Modern) readonly def
/Weight (Medium) readonly def
/ItalicAngle 0 def
/isFixedPitch true def
end readonly def
/FontName /CMTT10 def
/PaintType 0 def
/FontType 1 def
/FontMatrix [0.001 0 0 0.001 0 0] readonly def
/Encoding 256 array
0 1 255 {1 index exch /.notdef put} for
dup 45 /hyphen put
dup 49 /one put
dup 50 /two put
dup 97 /a put
dup 98 /b put
dup 99 /c put
dup 101 /e put
dup 104 /h put
dup 105 /i put
dup 108 /l put
dup 109 /m put
dup 110 /n put
dup 111 /o put
dup 112 /p put
dup 114 /r put
dup 115 /s put
dup 116 /t put
dup 117 /u put
dup 120 /x put
dup 121 /y put
readonly def
/FontBBox{-4 -235 731 800}readonly def
/UniqueXX 5000832 def
currentdict end
currentfile eexec
8053514d28ec28da1630165fab262882d3fca78881823c5537fe6c3dda8ee5b8
97e17cb027f5c73fdbb56b0a7c25fc3512b55fe8f3acfbffcc7f4a382d8299cc
8fd37d3cea49dabdca92847af0560b404ef71134b0f3d99934fc9d0b4e602011
b9cfb856c23f958f3c5a2fbe0ef8587d1f5774879c324e51fcb22888b74f2415
50d7401eb990d4f3a7af635198422283cac1b6cd446ddbcbd915db9bff88844e
784c6bf7389803d9450b0c21756a017306462c563d51ecefaacd079732f12c29
315e4b9623a5752c6f1d8145869e120d910b2644887cea7e30b15676a92537c2
9d3aa80dc30082aba94b40990b82fb1a877e805e0c8c48f61e9f2edac05b944e
e4d8084ec1d5cc517aaeec5b3ea379dd011eeb454cecab3ad2443c887c582789
72355673e503affe0394fc7db31de364e4f56c24033c7df2265c56445ec63a1d
5695a6041ea1b94407e1cdb7c5635603a4fd047e6edcaeb2d0da6c9e0e9396d5
1a4a58e8fdc1578730f992435560a6e2d3e3687703ee2f78f5896389ac8470bc
806169eb01762e89b6dc9adf857ead656620e2589aae722c37a2ed7a2941c360
b067ee34d8d5ca3bf68db725614d936bcb207781f4d4ec2ac67b13a5ad161f3f
059add7b5e3d904831e31c20c04546fae83ca93a35989e65c201756888f727b9
7e5313c9870ec96e4cec3901ea03a5c744754485e7d169bbc98bf872d0796e18
9d43b712950c3786257d8be06ab6080b9d9392313298327549a8a41c00a2cea3
690b4a333e45aa815a64facae1c2b44640860b8b8687afbefdbd5b4a541a7251
4ee7d3e0752af3e96a88c95d31fa16d34ba2f02fdb0088b165844f02611c734a
dbcc2037bf741fdea7e8bcdc130c70c33772f777d8bcddf4611db99001ccff14
d7af2bb05defc3480bdab312a0eff2f375afb4e0df2f803c594b7c93f71ca4af
861ae1711932fef19bfe2f9b7adb69d68e5a70ea4d1a3d5bd85231b16993f65e
fb37a0a823f0542f8c2340a073dc1be4a8347f9d3068a6435cd8278b0db1809e
8af9664c2c989b9f16873c009449b6284b85da4dee11c96a05ba83292f0edbd9
2cf674aad6ac1a5ff966ffc37e88a66048deed053565b55ef6bdb8c2f2f67832
f8939a32442ea54f13d003494d6350a2864b427a9126a9c26a031909fe53fa84
63b80c3ffd536c9a5dd29ceb03148dbc24c0033aea2115e1bfe3b6fcb656c12d
e575584cd5412ce8b1fde28f9a199091442dda4990d873dbd4bc7ada4dcc32a0
cfe315398cf664058a68cc0abff0acc7c72ed13528795eee981e38ad155b6876
f4a54d2224ee0fa8077304c772acbc0f5037e4d629af123b5a32a8f28e8e22a4
071b11611ae48bbec1c0e35c485c15a8f5663644c9f1a7359a67bde456a99637
bc77066bdd7eb0fbcd6878cc6100eceabfdbdff58d161d98c23d5052168f7ac7
2a2dcdee93482c31039e03f2cb144e1a15246ea22d8b1042de5eeb68c1e8ea5a
8d3e40a320a7b6e45eea7765682eab973b23b92824b4a7989ff4812fd84163e2
86b22a26d60e219ced950e292300b84ba5f51e4d5747d1e8a1b34a08b2fbf0c7
ddae3704e99114dacd9085122be38c8e2c46597232b66502542b0a72802769ff
1033c7a6abacc7c75c1fc68f56eb7fc07620b3b308377600242f9f58ffb5024f
b6971a2882919b7bb1b0cbf51a9972c60b27c93bc517b86915d6f52b63c04135
bc1e08c9d8de24af1acc675718ea999e819aa9bc11ad0eb347e8650727cec4af
925a02d3d8512e06d10dc7f7849223b41a1de76c05c5431f09b500ee01763d22
d959231a9d1a109c0493a50e6801653569f498eb461f657906c75569c1f078ea
7a1e228aad41f00605ae228f2972513a814ac1b012ee443bed786a943b60d46f
a38785e6045d9c2de3733489a112b05fc6169a94b1125d1db5f3de669b553b79
676293492418d8ec118392db78c56b085092ba3b7c965b745722dbb7911934f6
d8aaa49fcf3bd74fccef65bbc9e757c774f5383fc453e9d84d97d1f0e5267139
de45ff26f056af5256a19509644187607badc2ed55d0d923d7f3e64b06c1f2ff
4adfec59b78c55f1c0fa6ce18e4f39f5d0e9df2d4a96fb2a4a14098713375e96
eb8c9039d85e15e5f908947966a4c3e26d728e4a9b3c3f51d24f7fc13df93eab
0104832cbe341cb96c6f3c87a374ceb5faf6e62f8f22ae0abe44fc799caa08fc
51752093d59736908ac1c862395c677b02597a44ef97003059316cc6009a5417
69978592c8feac2323bec3c75d31b609b286a21f235724d713b6daf0e7c0ce4b
1a8abf18416be61004a528d4850b92c46c72fc853114a845b16ed14b210c5d0e
20632f33e73bf7441d18c0b56e43526140ec153d4ea417a2482e18297c2973e1
8dfda4cdac1a809b087a065c87fe0c489c67b7317b357c9ab322c3664e193a77
7862e801fd5df4f514a087a5c384b89aa55f2652b53f492f15d83294341dca75
8274bd287eedefbd7aed5c419ace2869da3b89c2ecab8f0c26409a0c1930ecb4
5e5d3a1671751f2363a2785ea6201c23bcd9b93e9490f6264373f4592950a33a
0badb1978db102ee800d10ca9337e09145dc9ce5f9a4b35545e0931940d90783
2ea4515ba13df4a6b7aaf731ecd22ab9ebcb3cb818a11454d1c0e58b2e966ff9
540b00ce9e1ca436b439ec2ad25edb6a96db2fc27dc1549e2d54bf29885e6fea
b8bc43bc33abc0a589221019c799962690cb0119939b69ea200b6fb9bb921927
1048b0b1a47c7fa65006fd6d0837fb34e06700537fad308161fbefe6cb998ac7
2bc56abc36dfa9ff950b413e0793ec60cf18de7ff84271109092e7423676bd2e
11212f4ef7275f95e1864a16a56be215e46b2688f7cee1bfa91bd91d03a0ae74
345c42fc83158406db8df32a497a18f6b999dba97afbf0d2ab6a9ae210f83cb3
e543ab0280d716df790ea1af19d542e70a1eb170650893a6bfcbbb199bcd924b
788a7381d94a4ebdde8dd27ec7992b71c40dabb79b872b9f0a9a3ae2afd35c32
33b299eb417e8169365efc017b295044d42211a01a9febb652aa4c852527fba6
8ccc142b1c6bd2d5676551d5f602f595c10ee977e391691c1cab93f73c591fdc
42f11e11be6a83e39ee0a1c752e3ab9fa43030b6fd9f398dceca94db29d8916b
a4ac43c1c2fd1d481cb388f4560893e2eabf42276d585ebe237ce6709be98517
99fea23e1a3d5b3094b8e12014010dba65959b15a0a9944eef114c3a78b0bf6b
6d5a4b6da60636d3defa7cd3d3fbc3911335c94664910d262a5f8d39d31eab7a
41636874895c4d5c3fbac8437b37b779efd057d99216e8a41fbb798d7d6b2423
9ff79b01c13810e0dfab6cb1339e76fd3ef127f3575eb00c9aad5ab2e5d3c0f9
1fd548b4177b174baf04857995de6d985c57c7e5e92587e8e8c6f85c92d0ba1d
5b742d2c18faf92f7b09fc5b4afa0cfe33ec1e8cf3d9aea0d58c58fb56587f19
f3df6eeeac75368bd02a8483341b2530844f57b7b43bab7dbd061334ff668ebb
a75dfdfd67c6cc086f8da657a12d83973c424f0e4d68fb493b5105cb2aebd153
2f096ad621232b79ba8f95d929893e0dee210e869349a06f2e9edfb7876aedc9
b85b9e95fd43ece38edd68c2b2b8ab01c195dec7504a0689ba9ca5acd68d2454
8cc7209fde4094193874551eb4575d4b0e3cba0662e87b6d7aeae2c38cfdaf45
35965a285a46d64c95dbf543c2a40ba6ae861ec9559627918819f8d094cce442
0464b00655b25cf669e465dbcbe6c802a7ebf12f988e4538d2eeb543b9c97e94
d52ba9b68a977f82a48b4586de671c3c05bd26d99621b545cf42c510badccae9
b2491d8b28841021b08b81bd9368a9f29e54f0d95720a97a84d6f730d1635be2
70ae81801dcb69ebf3d1edda6c08c8e6053df195146e5317a7884f3010de07db
d70c3a2738f089d0d337f08692e95d8df8b77f609a51d5ae389cbe6ca0f92186
c85e07ba864044b5d6ecc0e322980b677b1a38789f2a7ba0552b0019030d36bc
880b47ea13a5a49fb03c0bc4571b6dad05d599d4ddbfa080459c0d20ece362d9
18a368f61fc64ee545dd6f5786fa337c4e0048e3ed1612d7c6150d463dccda0e
5f9dca7eb4fe59a6773c02181d6ecb466618e25f0f1e56091b237d1daefe978a
4caa3ddbce3f95eab1035776fcde45d99d043daea3c7a8b7accb21018d6890f9
0475e0e77020d35dc2809d3e4c73790d4562081919aafbcec9ce532ec88731bc
5625b3dbbe59b88ec92e936cb999c8ed1f4cc878baae6efb951c32c771237d34
68c3260992fd00465d8320d88c8b73de4139a9d9adfe393e787946ebfd87fed5
cf69973ce6d844e8554c1a2e93a5db2f79429b6eb78e5263ee63480cb6cd33ba
74e5f44e345d252983a2641528ed3b5c05f6dcc30660ec212bd820de4173c508
bf021abee6d8f4f905de2499cd7e925a3d13e2aee537edb22916362e5d70fbb4
1b9cf3f160bff94cf7b7a1ec883fc5e4b2ee158297e0b593ffc9a77dcc5824b2
c6406c7d216226579796e04af332ebf79709a9fa1a50d44729fae1111ce8d4b4
51b54e020da92e077f30ce39446d2ba23b5bf6263e4536cc1e7aabedba23bbf7
9128ab768fa04209527cd504fce6995ad88dc1c09a60e8e0fac2517dd36d2878
38fca7fec81715bb1d7d6e30f17fe80695db01bee9cca9091e045ba68752df2f
fe242c72581d994de689506f1422b8254ad2fbd655b16ec308ec2dbb45c8b207
eed304bfdd60078013172a52364d279d57622c4305312eb47dd5064541645df6
02ee9d8e4084a43d6001c8947254c5a15ff5c5494fbaa72b3633eb90fbbe8ed6
0f9b645f5e5cfccf3c63cd609965001c6ab860b885af51d4c18d33db681f840d
a5583cbefd4ea284550e7de3013de95b2d15acc83072688babb0773c7334dfbc
fe5bc8aff147f32a430147b164995045e88a343556c12b62c113f8d74b15363a
e36f0d887d1bb1644be3c35c25598d75e96b3ed9c1aebc78f6bb822ba1a8c57c
0114197afb9de43253b4c401c8981056803d3cbf146f3d7d277efce2c659a5d0
ea241b70f4e307e8cb39f219299e02451038ad7237efbf0dceba6ab80169d00d
057538fd47a03f53588a74cceeb60544d9d8d11b2716dd32722852aae1c85c96
6025aaef02b14cbc3842f9f862df9c63ed8a26151cd66c79e4585ab4ee03a2ca
61b19d3bbc5eaa903ce711c160dd87a3fb9bf82332473d59306fc8f2d381c9ab
b32596460dffb82f109450b63de6e246c16dfc7184d5e841b7a11085965ec22d
95d6425664864a327bac483c69da3e25df9471add46be92f509fe496c0bba278
4d8a362f67a4ccc405bb91ab216eb0dba808a6976f7a6a781953202fef391f16
9305a716663f37d3c0c6e5fbc1957e62ed01a665284fe85b9057ba07bc65046e
d485fcf9296bc3ef64287f2210616ddcc9b33721fe3974c3664f3b6632d7abc5
6ec4c908aea3f31d611ed97f322b722ef1547eba0dc07e40639758ee9d504364
95b17a1279b26b0d26b64846ea431338b25cea7d7586ea3efeaae4707ae28799
10c3791a0f75d8c6eded37164b2f75f574cdb09a25ec5891e22dc84bdd772ccf
c5cb0d9252576d8c7a49d6b4535a127dbb0593e6ab48fa74786f5cf41e689814
c98662c82be72658c836c74c820c64ec46bdae819da51572c99812eb016953bf
1eb189c8ff20ab0bf3c8f78ce66d7f4e944b080fe323371564da920a32af905b
21af8a43707f9c77f949024161f24476d161823908e6beda86a19afee5a25ca9
6a7bac5d66e352f5d8546cec831c806668816e38557331000e34a68e2f469bce
45eea4caf9780aa2a4c4d6a35cee91b94541b5b43b
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark

%%EndFont 
TeXDict begin 40258431 52099146 1000 600 600 (pspic1.dvi)
@start /Fa 134[44 44 2[44 44 44 44 1[44 44 44 44 44 2[44
44 2[44 1[44 44 44 46[44 44 3[44 45[{}20 83.022 /CMTT10
rf end
TeXDict begin

1 0 bop 1133 1221 a
 tx@Dict begin tx@NodeDict begin {9.91112 3.8 23.34987 11.67493 3.05556
} false /N@th1 16 {InitRnode } NewNode end end
 1133 1221 a 31 w @beginspecial @setspecial
 tx@Dict begin STP newpath 0.8 SLW 0. setgray  0. true 3.8 neg 3.8
neg 19.54987 9.91112 .5 Frame  gsave 0.8 SLW 0. setgray 0 setlinecap
stroke  grestore end


@endspecial Fa(th1)1842 1221 y
 tx@Dict begin tx@NodeDict begin {9.91112 3.8 23.34987 11.67493 3.05556
} false /N@th2 16 {InitRnode } NewNode end end
 1842 1221 a 31 w @beginspecial
@setspecial
 tx@Dict begin STP newpath 0.8 SLW 0. setgray  0. true 3.8 neg 3.8
neg 19.54987 9.91112 .5 Frame  gsave 0.8 SLW 0. setgray 0 setlinecap
stroke  grestore end
 
@endspecial Fa(th2)682 820 y
 tx@Dict begin tx@NodeDict begin {9.91112 3.8 18.09991 9.04996 3.05556
} false /N@a1 16 {InitRnode } NewNode end end
 682 820 a 32
w @beginspecial @setspecial
 tx@Dict begin STP newpath 0.8 SLW 0. setgray  0. true 3.8 neg 3.8
neg 14.29991 9.91112 .5 Frame  gsave 0.8 SLW 0. setgray 0 setlinecap
stroke  grestore end
 
@endspecial Fa(a1)1155 950
y
 tx@Dict begin tx@NodeDict begin {9.91112 3.8 18.09991 9.04996 3.05556
} false /N@b1 16 {InitRnode } NewNode end end
 1155 950 a 31 w @beginspecial @setspecial
 tx@Dict begin STP newpath 0.8 SLW 0. setgray  0. true 3.8 neg 3.8
neg 14.29991 9.91112 .5 Frame  gsave 0.8 SLW 0. setgray 0 setlinecap
stroke  grestore end
 
@endspecial
Fa(b1)918 631 y
 tx@Dict begin tx@NodeDict begin {9.91112 3.8 18.09991 9.04996 3.05556
} false /N@c1 16 {InitRnode } NewNode end end
 918 631 a 32 w @beginspecial @setspecial
 tx@Dict begin STP newpath 0.8 SLW 0. setgray  0. true 3.8 neg 3.8
neg 14.29991 9.91112 .5 Frame  gsave 0.8 SLW 0. setgray 0 setlinecap
stroke  grestore end


@endspecial Fa(c1)1627 820 y
 tx@Dict begin tx@NodeDict begin {9.91112 3.8 18.09991 9.04996 3.05556
} false /N@a2 16 {InitRnode } NewNode end end
 1627 820 a 32 w @beginspecial
@setspecial
 tx@Dict begin STP newpath 0.8 SLW 0. setgray  0. true 3.8 neg 3.8
neg 14.29991 9.91112 .5 Frame  gsave 0.8 SLW 0. setgray 0 setlinecap
stroke  grestore end
 
@endspecial Fa(a2)2100 950 y
 tx@Dict begin tx@NodeDict begin {9.91112 3.8 18.09991 9.04996 3.05556
} false /N@b2 16 {InitRnode } NewNode end end
 2100 950 a
31 w @beginspecial @setspecial
 tx@Dict begin STP newpath 0.8 SLW 0. setgray  0. true 3.8 neg 3.8
neg 14.29991 9.91112 .5 Frame  gsave 0.8 SLW 0. setgray 0 setlinecap
stroke  grestore end
 
@endspecial Fa(b2)1863
631 y
 tx@Dict begin tx@NodeDict begin {9.91112 3.8 18.09991 9.04996 3.05556
} false /N@c2 16 {InitRnode } NewNode end end
 1863 631 a 32 w @beginspecial @setspecial
 tx@Dict begin STP newpath 0.8 SLW 0. setgray  0. true 3.8 neg 3.8
neg 14.29991 9.91112 .5 Frame  gsave 0.8 SLW 0. setgray 0 setlinecap
stroke  grestore end
 
@endspecial
Fa(c2)757 1078 y
 tx@Dict begin gsave STV newpath 1.5 SLW 0. setgray  /ArrowA { moveto
} def /ArrowB { BeginArrow 1.  1.  scale false 0.4 1.4 1.5 2. Arrow
 EndArrow  } def /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 0.0 0.0
0 0 /N@th1 /N@a1 InitNC { NCLine  } if end gsave 1.5 SLW 0. setgray
0 setlinecap stroke  grestore  grestore end
 757 1078 a 757 1078 a
 tx@Dict begin gsave STV newpath 1.5 SLW 0. setgray  /ArrowA { moveto
} def /ArrowB { BeginArrow 1.  1.  scale false 0.4 1.4 1.5 2. Arrow
 EndArrow  } def /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 0.0 0.0
0 0 /N@th1 /N@a2 InitNC { NCLine  } if end gsave 1.5 SLW 0. setgray
0 setlinecap stroke  grestore  grestore end
 757 1078 a 757
1078 a
 tx@Dict begin gsave STV newpath 1.5 SLW 0. setgray  /ArrowA { moveto
} def /ArrowB { BeginArrow 1.  1.  scale false 0.4 1.4 1.5 2. Arrow
 EndArrow  } def /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 0.0 0.0
0 0 /N@th2 /N@b1 InitNC { NCLine  } if end gsave 1.5 SLW 0. setgray
0 setlinecap stroke  grestore  grestore end
 757 1078 a 757 1078 a
 tx@Dict begin gsave STV newpath 1.5 SLW 0. setgray  /ArrowA { moveto
} def /ArrowB { BeginArrow 1.  1.  scale false 0.4 1.4 1.5 2. Arrow
 EndArrow  } def /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 0.0 0.0
0 0 /N@th2 /N@a2 InitNC { NCLine  } if end gsave 1.5 SLW 0. setgray
0 setlinecap stroke  grestore  grestore end
 757 1078 a 757 1078 a
 tx@Dict begin gsave STV newpath 1.5 SLW 0. setgray  /ArrowA { moveto
} def /ArrowB { BeginArrow 1.  1.  scale false 0.4 1.4 1.5 2. Arrow
 EndArrow  } def /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 0.0 0.0
0 0 /N@th2 /N@b2 InitNC { NCLine  } if end gsave 1.5 SLW 0. setgray
0 setlinecap stroke  grestore  grestore end
 757
1078 a 757 1078 a
 tx@Dict begin gsave STV newpath 1.5 SLW 0. setgray  /ArrowA { moveto
} def /ArrowB { BeginArrow 1.  1.  scale false 0.4 1.4 1.5 2. Arrow
 EndArrow  } def /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 0.0 0.0
0 0 /N@a1 /N@c1 InitNC { NCLine  } if end gsave 1.5 SLW 0. setgray
0 setlinecap stroke  grestore  grestore end
 757 1078 a 757 1078 a
 tx@Dict begin gsave STV newpath 1.5 SLW 0. setgray  /ArrowA { moveto
} def /ArrowB { BeginArrow 1.  1.  scale false 0.4 1.4 1.5 2. Arrow
 EndArrow  } def /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 0.0 0.0
0 0 /N@a2 /N@c2 InitNC { NCLine  } if end gsave 1.5 SLW 0. setgray
0 setlinecap stroke  grestore  grestore end
 757 1078 a 757
1078 a
 tx@Dict begin gsave STV newpath 1.5 SLW 0. setgray  /ArrowA { moveto
} def /ArrowB { BeginArrow 1.  1.  scale false 0.4 1.4 1.5 2. Arrow
 EndArrow  } def /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 0.0 0.0
0 0 /N@b1 /N@c1 InitNC { NCLine  } if end gsave 1.5 SLW 0. setgray
0 setlinecap stroke  grestore  grestore end
 757 1078 a 757 1078 a
 tx@Dict begin gsave STV newpath 1.5 SLW 0. setgray  /ArrowA { moveto
} def /ArrowB { BeginArrow 1.  1.  scale false 0.4 1.4 1.5 2. Arrow
 EndArrow  } def /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 0.0 0.0
0 0 /N@b2 /N@c2 InitNC { NCLine  } if end gsave 1.5 SLW 0. setgray
0 setlinecap stroke  grestore  grestore end
 757 1078 a 757 1078 a
 tx@Dict begin gsave STV newpath 0.8 SLW 0. setgray  /ArrowA { moveto
} def /ArrowB { BeginArrow 1.  1.  scale false 0.4 1.4 1.5 2. Arrow
 EndArrow  } def /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 0.0 0.0
0 0 /N@a1 /N@a2 InitNC { NCLine  } if end gsave 0.8 SLW 0. setgray
5.0 3.0 -2 0 add DashLine  grestore  grestore end
 757
1078 a 757 1078 a
 tx@Dict begin tx@NodeDict begin /t 0.6 def LPut end PutBegin  end
 757 1078 a 757 1078 a
 tx@Dict begin { 5.0 tx@Dict /NCLW known { NCLW add } if 15.74986 6.11111
0.0 NAngle 90 add  Uput exch pop add a PtoC h1 add exch w1 add exch
} PutCoor PutBegin  end
 757 1078 a 692
1103 a Fa(aia)757 1078 y
 tx@Dict begin PutEnd  end
 757 1078 a 757 1078 a
 tx@Dict begin PutEnd  end
 757 1078
a 757 1078 a
 tx@Dict begin gsave STV newpath 0.8 SLW 0. setgray  /ArrowA { moveto
} def /ArrowB { BeginArrow 1.  1.  scale false 0.4 1.4 1.5 2. Arrow
 EndArrow  } def /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 0.0 0.0
0 0 /N@b1 /N@b2 InitNC { NCLine  } if end gsave 0.8 SLW 0. setgray
5.0 3.0 -2 0 add DashLine  grestore  grestore end
 757 1078 a 757 1078 a
 tx@Dict begin tx@NodeDict begin /t 0.8 def LPut end PutBegin  end
 757 1078 a 757 1078
a
 tx@Dict begin { 5.0 tx@Dict /NCLW known { NCLW add } if 15.74986 6.11111
0.0 NAngle 90 add  Uput exch pop add a PtoC h1 add exch w1 add exch
} PutCoor PutBegin  end
 757 1078 a 692 1103 a Fa(bib)757 1078 y
 tx@Dict begin PutEnd  end
 757 1078 a
757 1078 a
 tx@Dict begin PutEnd  end
 757 1078 a 757 1078 a
 tx@Dict begin gsave STV newpath 0.8 SLW 0. setgray  /ArrowA { moveto
} def /ArrowB { BeginArrow 1.  1.  scale false 0.4 1.4 1.5 2. Arrow
 EndArrow  } def /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 0.0 0.0
0 0 /N@c1 /N@c2 InitNC { NCLine  } if end gsave 0.8 SLW 0. setgray
5.0 3.0 -2 0 add DashLine  grestore  grestore end
 757 1078 a 757 1078
a
 tx@Dict begin tx@NodeDict begin /t 0.6 def LPut end PutBegin  end
 757 1078 a 757 1078 a
 tx@Dict begin { 5.0 tx@Dict /NCLW known { NCLW add } if 15.74986 6.11111
0.0 NAngle 90 sub  Uput exch pop add a PtoC h1 add exch w1 add exch
} PutCoor PutBegin  end
 757 1078 a 692 1103 a Fa(cic)757
1078 y
 tx@Dict begin PutEnd  end
 757 1078 a 757 1078 a
 tx@Dict begin PutEnd  end
 757 1078 a 757 1078 a
 tx@Dict begin gsave STV newpath 1.5 SLW 0. setgray  /ArrowA { moveto
} def /ArrowB { BeginArrow 1.  1.  scale false 0.4 1.4 1.5 2. Arrow
 EndArrow  } def /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 0.0 0.0
0 0 /N@c1 /N@c2 InitNC { yB yA sub xB xA sub Atan dup 15.  add /AngleA
ED 15.  sub 180 add /AngleB ED 0.67  0.67  NCCurve  } if end gsave
1.5 SLW 0. setgray 5.0 3.0 -2 0 add DashLine  grestore  grestore end
 757
1078 a 757 1078 a
 tx@Dict begin tx@NodeDict begin /t 0.5 def LPut end PutBegin  end
 757 1078 a 757 1078 a
 tx@Dict begin { 5.0 tx@Dict /NCLW known { NCLW add } if 15.74986 6.11111
0.0 NAngle 90 add  Uput exch pop add a PtoC h1 add exch w1 add exch
} PutCoor PutBegin  end
 757 1078 a 692
1103 a Fa(tic)757 1078 y
 tx@Dict begin PutEnd  end
 757 1078 a 757 1078 a
 tx@Dict begin PutEnd  end
 757 1078
a 2411 605 a
 tx@Dict begin tx@NodeDict begin {0.0 0.0 } false /N@ti1 10 {InitPnode
} NewNode end end
 2411 605 a 2647 605 a
 tx@Dict begin tx@NodeDict begin {0.0 0.0 } false /N@ti2 10 {InitPnode
} NewNode end end
 2647 605 a 757 1078
a
 tx@Dict begin gsave STV newpath 1.5 SLW 0. setgray  /ArrowA { moveto
} def /ArrowB { BeginArrow 1.  1.  scale false 0.4 1.4 1.5 2. Arrow
 EndArrow  } def /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 0.0 0.0
0 0 /N@ti1 /N@ti2 InitNC { NCLine  } if end gsave 1.5 SLW 0. setgray
5.0 3.0 -2 0 add DashLine  grestore  grestore end
 757 1078 a 2653 622 a Fa(theory-inclusion)2411 723
y
 tx@Dict begin tx@NodeDict begin {0.0 0.0 } false /N@ai1 10 {InitPnode
} NewNode end end
 2411 723 a 2647 723 a
 tx@Dict begin tx@NodeDict begin {0.0 0.0 } false /N@ai2 10 {InitPnode
} NewNode end end
 2647 723 a 757 1078 a
 tx@Dict begin gsave STV newpath 0.8 SLW 0. setgray  /ArrowA { moveto
} def /ArrowB { BeginArrow 1.  1.  scale false 0.4 1.4 1.5 2. Arrow
 EndArrow  } def /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 0.0 0.0
0 0 /N@ai1 /N@ai2 InitNC { NCLine  } if end gsave 0.8 SLW 0. setgray
5.0 3.0 -2 0 add DashLine  grestore  grestore end
 757 1078
a 2675 749 a Fa(axiom-inclusion)2411 842 y
 tx@Dict begin tx@NodeDict begin {0.0 0.0 } false /N@ii1 10 {InitPnode
} NewNode end end
 2411 842 a
2647 842 a
 tx@Dict begin tx@NodeDict begin {0.0 0.0 } false /N@ii2 10 {InitPnode
} NewNode end end
 2647 842 a 757 1078 a
 tx@Dict begin gsave STV newpath 1.5 SLW 0. setgray  /ArrowA { moveto
} def /ArrowB { BeginArrow 1.  1.  scale false 0.4 1.4 1.5 2. Arrow
 EndArrow  } def /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 0.0 0.0
0 0 /N@ii1 /N@ii2 InitNC { NCLine  } if end gsave 1.5 SLW 0. setgray
0 setlinecap stroke  grestore  grestore end
 757 1078 a 2849 858
a Fa(imports)p eop
end
userdict /end-hook known{end-hook}if
%%Trailer
cleartomark
countdictstack exch sub { end } repeat
restore
%%EOF
