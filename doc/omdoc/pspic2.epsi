%!PS-Adobe-2.0 EPSF-1.2
%%Title: pspic2.dvi
%%Creator: dvips(k) 5.86 Copyright 1999 Radical Eye Software
%%CreationDate: Nov 12 13:16
%%For:kohlhase kohlhase
%%Pages: 1
%%DocumentFonts:
%%BoundingBox: 157 576 395 659
%%BeginPreview: 238 83 1 83
% 0000000000000000000007e7c7c7cfc00000000000000000000000000000
% 00000000000000000001e7e7c7c7cfcf8e00000000000000000000000000
% 00000000000000000063e000000000078f8f800000000000000000000000
% 000000000000000003e0000000000000001f9f8000000000000000000000
% 0000000000000183f3c000000000000000001f9800000000000000000000
% 00000000000003f3f0000000000000000000001f00000000000000000000
% ffffffffffffeff00000000000000000000000073e0001ffffff80000000
% 8000000000003f800000000000000000000000003f000100000080000000
% 8000000000002000000000000000000000000000003e0100000080000000
% 8000000000002000000000000000000000000000001e3900000080000000
% 800000032000200000000000000000000000000000007f19000080000000
% 800008010010200000000000000000000000000000000f08004080000000
% 800008010010200000000000000000000002000000000108004080000000
% 840008012010270000000000000000000000000000000109004080000000
% 87c39f0173fe3fffffffffffffffffffffffffffffffff0b9ef880000000
% 824448011450270000000000000000000000000000000108a24080000000
% 8243c8f113902000000000000000000000010000000001089c4080000000
% 8246490110d2200000000000000000000000000000000108864880000000
% 826469011452200000000000000000000000000000000108a24880000000
% 8ff7ee07ff9c20000000000000000000000000000000013ffc7080000000
% 800000000000200000000000000000000001000000000100000080000000
% 800000000000200000000080000040000000000000000100000080000000
% ffffffffffffe000000000000000400000000000000001ffffff80000000
% 00000040000000000000019ff39ff3800000000000000000100000000000
% 0000006000000000000000954c4843800001000000000000180000000000
% 0000006000000000000000954e4848400000000000000000180000000000
% 000000e000000000000001ff739e7bc00000000000000000380000000000
% 000000d00000000000000000400000000000000000000000340000000000
% 000000400000000000000000c00000000001000000000000100000000000
% 000000400000000000000000000000000000000000000000100000000000
% 000000400000000000000000000000000000000000000000100000000000
% 000000400000000000000000000000000000800000000000100000000000
% 000000400000000000000000000000000000000000000000100000000000
% 000000400000000000000000000000000000000000000000100000000000
% 000000400000000000000000000000000000000000000000100000000000
% 000000400000000000000000000000000000800000000000100000000000
% 000000400000000000000000000000000000000000000000100000000000
% 000000400000000000000000000000000000000000000000100000000000
% 000000400000000000000000000000000000000000000000100000000000
% 000000402000001000000000000000000000800000000000100800000400
% 000000400000001000000000000000000000000000000000100000000400
% 0000004067fce7fce00000000000000000000000000000001019ff39ff38
% 0000004025531210e0000000000000000000000000000000100954c48438
% 000000402553921210000000000000000000800000000000100954e48484
% 000000407fdce79ef0000000000000000000000000000000101ff739e7bc
% 000000400010000000000000000000000000000000000000100004000000
% 00000040003000000000000000000000000000000000000010000c000000
% 000000400000000000000000000000000000800000000000100000000000
% 000000400000000000000000000000000000000000000000100000000000
% 000000400000000000000000000000000000000000000000100000000000
% 000000400000000000000000000000000000400000000000100000000000
% 000000400000000000000000000000000000000000000000100000000000
% 000000400000000000000000000000000000000000000000100000000000
% 000000400000000000000000000000000000000000000000100000000000
% 000000400000000000000000000000000000400000000000100000000000
% 000000400000000000000000000000000000000000000000100000000000
% 000000400000000000000000000000000000000000000000100000000000
% 000000400000000000000000000000000000000000000000100000000000
% 000000400000000000000000000000000000400000000000100000000000
% 000000400000000000000000000000000000000000000000100000000000
% 000000400000000000000000000000000000000000000000100000000000
% 000000400000000000000000000000000000a00000000000100000000000
% 000000400000000000000000000000000000e00000000000100000000000
% 000fffffff000000000000000000000000006000000fffffffffffe00000
% 000800000100000000000000000000000000600000080000000000200000
% 000800000100000000000000000000000000000000080000000000200000
% 000800000100000000000000000000000000000000080000000000200000
% 000800010100000000000000000000000000000000087c38b1c5fc200000
% 000800010100000000000000000000000000000000084644c22444200000
% 00084001011000000000000000000000000000000008423c81e444200000
% 00087c73e170000000000000000000000000000000084264832444200000
% 0008248901ff3f7e7e7e7e7e7efcfcfcfcfcfdf9f9f84646823444200000
% 000824790110000000000000000000000000000000087c7fe3fffe200000
% 000824c92100000000000000000000000000000000084000000000200000
% 0008268d2100000000000000000000000000000000084000000000200000
% 0008fffdc100000000000000000000000000000000086000000000200000
% 000800000100000000000000000000000000000000080000000000200000
% 000800000100000000000400180008000000000000080000000000200000
% 000fffffff000000000000000800000000000000000fffffffffffe00000
% 000000000000000000000cf1c8d398778000000000000000000000000000
% 0000000000000000000004520853888a8000000000000000000000000000
% 000000000000000000000452085048ca8000000000000000000000000000
% 000000000000000000000ff9de7bde77c000000000000000000000000000
%%EndImage
%%EndPreview
save
countdictstack
mark
newpath
/showpage {} def
/setpagedevice {pop} def
%%EndProlog
%%Page 1 1
%DVIPSWebPage: (www.radicaleye.com)
%DVIPSCommandLine: dvips pspic2.dvi -o pspic2.ps
%DVIPSParameters: dpi=600, compressed
%DVIPSSource:  TeX output 2001.11.12:1315
%!
/TeXDict 300 dict def TeXDict begin/N{def}def/B{bind def}N/S{exch}N/X{S
N}B/A{dup}B/TR{translate}N/isls false N/vsize 11 72 mul N/hsize 8.5 72
mul N/landplus90{false}def/@rigin{isls{[0 landplus90{1 -1}{-1 1}ifelse 0
0 0]concat}if 72 Resolution div 72 VResolution div neg scale isls{
landplus90{VResolution 72 div vsize mul 0 exch}{Resolution -72 div hsize
mul 0}ifelse TR}if Resolution VResolution vsize -72 div 1 add mul TR[
matrix currentmatrix{A A round sub abs 0.00001 lt{round}if}forall round
exch round exch]setmatrix}N/@landscape{/isls true N}B/@manualfeed{
statusdict/manualfeed true put}B/@copies{/#copies X}B/FMat[1 0 0 -1 0 0]
N/FBB[0 0 0 0]N/nn 0 N/IEn 0 N/ctr 0 N/df-tail{/nn 8 dict N nn begin
/FontType 3 N/FontMatrix fntrx N/FontBBox FBB N string/base X array
/BitMaps X/BuildChar{CharBuilder}N/Encoding IEn N end A{/foo setfont}2
array copy cvx N load 0 nn put/ctr 0 N[}B/sf 0 N/df{/sf 1 N/fntrx FMat N
df-tail}B/dfs{div/sf X/fntrx[sf 0 0 sf neg 0 0]N df-tail}B/E{pop nn A
definefont setfont}B/Cw{Cd A length 5 sub get}B/Ch{Cd A length 4 sub get
}B/Cx{128 Cd A length 3 sub get sub}B/Cy{Cd A length 2 sub get 127 sub}
B/Cdx{Cd A length 1 sub get}B/Ci{Cd A type/stringtype ne{ctr get/ctr ctr
1 add N}if}B/id 0 N/rw 0 N/rc 0 N/gp 0 N/cp 0 N/G 0 N/CharBuilder{save 3
1 roll S A/base get 2 index get S/BitMaps get S get/Cd X pop/ctr 0 N Cdx
0 Cx Cy Ch sub Cx Cw add Cy setcachedevice Cw Ch true[1 0 0 -1 -.1 Cx
sub Cy .1 sub]/id Ci N/rw Cw 7 add 8 idiv string N/rc 0 N/gp 0 N/cp 0 N{
rc 0 ne{rc 1 sub/rc X rw}{G}ifelse}imagemask restore}B/G{{id gp get/gp
gp 1 add N A 18 mod S 18 idiv pl S get exec}loop}B/adv{cp add/cp X}B
/chg{rw cp id gp 4 index getinterval putinterval A gp add/gp X adv}B/nd{
/cp 0 N rw exit}B/lsh{rw cp 2 copy get A 0 eq{pop 1}{A 255 eq{pop 254}{
A A add 255 and S 1 and or}ifelse}ifelse put 1 adv}B/rsh{rw cp 2 copy
get A 0 eq{pop 128}{A 255 eq{pop 127}{A 2 idiv S 128 and or}ifelse}
ifelse put 1 adv}B/clr{rw cp 2 index string putinterval adv}B/set{rw cp
fillstr 0 4 index getinterval putinterval adv}B/fillstr 18 string 0 1 17
{2 copy 255 put pop}for N/pl[{adv 1 chg}{adv 1 chg nd}{1 add chg}{1 add
chg nd}{adv lsh}{adv lsh nd}{adv rsh}{adv rsh nd}{1 add adv}{/rc X nd}{
1 add set}{1 add clr}{adv 2 chg}{adv 2 chg nd}{pop nd}]A{bind pop}
forall N/D{/cc X A type/stringtype ne{]}if nn/base get cc ctr put nn
/BitMaps get S ctr S sf 1 ne{A A length 1 sub A 2 index S get sf div put
}if put/ctr ctr 1 add N}B/I{cc 1 add D}B/bop{userdict/bop-hook known{
bop-hook}if/SI save N @rigin 0 0 moveto/V matrix currentmatrix A 1 get A
mul exch 0 get A mul add .99 lt{/QV}{/RV}ifelse load def pop pop}N/eop{
SI restore userdict/eop-hook known{eop-hook}if showpage}N/@start{
userdict/start-hook known{start-hook}if pop/VResolution X/Resolution X
1000 div/DVImag X/IEn 256 array N 2 string 0 1 255{IEn S A 360 add 36 4
index cvrs cvn put}for pop 65781.76 div/vsize X 65781.76 div/hsize X}N
/p{show}N/RMat[1 0 0 -1 0 0]N/BDot 260 string N/Rx 0 N/Ry 0 N/V{}B/RV/v{
/Ry X/Rx X V}B statusdict begin/product where{pop false[(Display)(NeXT)
(LaserWriter 16/600)]{A length product length le{A length product exch 0
exch getinterval eq{pop true exit}if}{pop}ifelse}forall}{false}ifelse
end{{gsave TR -.1 .1 TR 1 1 scale Rx Ry false RMat{BDot}imagemask
grestore}}{{gsave TR -.1 .1 TR Rx Ry scale 1 1 false RMat{BDot}
imagemask grestore}}ifelse B/QV{gsave newpath transform round exch round
exch itransform moveto Rx 0 rlineto 0 Ry neg rlineto Rx neg 0 rlineto
fill grestore}B/a{moveto}B/delta 0 N/tail{A/delta X 0 rmoveto}B/M{S p
delta add tail}B/b{S p tail}B/c{-4 M}B/d{-3 M}B/e{-2 M}B/f{-1 M}B/g{0 M}
B/h{1 M}B/i{2 M}B/j{3 M}B/k{4 M}B/w{0 rmoveto}B/l{p -4 w}B/m{p -3 w}B/n{
p -2 w}B/o{p -1 w}B/q{p 1 w}B/r{p 2 w}B/s{p 3 w}B/t{p 4 w}B/x{0 S
rmoveto}B/y{3 2 roll p a}B/bos{/SS save N}B/eos{SS restore}B end

%!
% PostScript prologue for pstricks.tex.
% Version 97 patch 3, 98/06/01
% For distribution, see pstricks.tex.
%
/tx@Dict 200 dict def tx@Dict begin
/ADict 25 dict def
/CM { matrix currentmatrix } bind def
/SLW /setlinewidth load def
/CLW /currentlinewidth load def
/CP /currentpoint load def
/ED { exch def } bind def
/L /lineto load def
/T /translate load def
/TMatrix { } def
/RAngle { 0 } def
/Atan { /atan load stopped { pop pop 0 } if } def
/Div { dup 0 eq { pop } { div } ifelse } def
/NET { neg exch neg exch T } def
/Pyth { dup mul exch dup mul add sqrt } def
/PtoC { 2 copy cos mul 3 1 roll sin mul } def
/PathLength@ { /z z y y1 sub x x1 sub Pyth add def /y1 y def /x1 x def }
def
/PathLength { flattenpath /z 0 def { /y1 ED /x1 ED /y2 y1 def /x2 x1 def
} { /y ED /x ED PathLength@ } {} { /y y2 def /x x2 def PathLength@ }
/pathforall load stopped { pop pop pop pop } if z } def
/STP { .996264 dup scale } def
/STV { SDict begin normalscale end STP  } def
/DashLine { dup 0 gt { /a .5 def PathLength exch div } { pop /a 1 def
PathLength } ifelse /b ED /x ED /y ED /z y x add def b a .5 sub 2 mul y
mul sub z Div round z mul a .5 sub 2 mul y mul add b exch Div dup y mul
/y ED x mul /x ED x 0 gt y 0 gt and { [ y x ] 1 a sub y mul } { [ 1 0 ]
0 } ifelse setdash stroke } def
/DotLine { /b PathLength def /a ED /z ED /y CLW def /z y z add def a 0 gt
{ /b b a div def } { a 0 eq { /b b y sub def } { a -3 eq { /b b y add
def } if } ifelse } ifelse [ 0 b b z Div round Div dup 0 le { pop 1 } if
] a 0 gt { 0 } { y 2 div a -2 gt { neg } if } ifelse setdash 1
setlinecap stroke } def
/LineFill { gsave abs CLW add /a ED a 0 dtransform round exch round exch
2 copy idtransform exch Atan rotate idtransform pop /a ED .25 .25
% DG/SR modification begin - Dec. 12, 1997 - Patch 2
%itransform translate pathbbox /y2 ED a Div ceiling cvi /x2 ED /y1 ED a
itransform pathbbox /y2 ED a Div ceiling cvi /x2 ED /y1 ED a
% DG/SR modification end
Div cvi /x1 ED /y2 y2 y1 sub def clip newpath 2 setlinecap systemdict
/setstrokeadjust known { true setstrokeadjust } if x2 x1 sub 1 add { x1
% DG/SR modification begin - Jun.  1, 1998 - Patch 3 (from Michael Vulis)
% a mul y1 moveto 0 y2 rlineto stroke /x1 x1 1 add def } repeat grestore }
% def
a mul y1 moveto 0 y2 rlineto stroke /x1 x1 1 add def } repeat grestore
pop pop } def
% DG/SR modification end
/BeginArrow { ADict begin /@mtrx CM def gsave 2 copy T 2 index sub neg
exch 3 index sub exch Atan rotate newpath } def
/EndArrow { @mtrx setmatrix CP grestore end } def
/Arrow { CLW mul add dup 2 div /w ED mul dup /h ED mul /a ED { 0 h T 1 -1
scale } if w neg h moveto 0 0 L w h L w neg a neg rlineto gsave fill
grestore } def
/Tbar { CLW mul add /z ED z -2 div CLW 2 div moveto z 0 rlineto stroke 0
CLW moveto } def
/Bracket { CLW mul add dup CLW sub 2 div /x ED mul CLW add /y ED /z CLW 2
div def x neg y moveto x neg CLW 2 div L x CLW 2 div L x y L stroke 0
CLW moveto } def
/RoundBracket { CLW mul add dup 2 div /x ED mul /y ED /mtrx CM def 0 CLW
2 div T x y mul 0 ne { x y scale } if 1 1 moveto .85 .5 .35 0 0 0
curveto -.35 0 -.85 .5 -1 1 curveto mtrx setmatrix stroke 0 CLW moveto }
def
/SD { 0 360 arc fill } def
/EndDot { { /z DS def } { /z 0 def } ifelse /b ED 0 z DS SD b { 0 z DS
CLW sub SD } if 0 DS z add CLW 4 div sub moveto } def
/Shadow { [ { /moveto load } { /lineto load } { /curveto load } {
/closepath load } /pathforall load stopped { pop pop pop pop CP /moveto
load } if ] cvx newpath 3 1 roll T exec } def
/NArray { aload length 2 div dup dup cvi eq not { exch pop } if /n exch
cvi def } def
/NArray { /f ED counttomark 2 div dup cvi /n ED n eq not { exch pop } if
f { ] aload /Points ED } { n 2 mul 1 add -1 roll pop } ifelse } def
/Line { NArray n 0 eq not { n 1 eq { 0 0 /n 2 def } if ArrowA /n n 2 sub
def n { Lineto } repeat CP 4 2 roll ArrowB L pop pop } if } def
/Arcto { /a [ 6 -2 roll ] cvx def a r /arcto load stopped { 5 } { 4 }
ifelse { pop } repeat a } def
/CheckClosed { dup n 2 mul 1 sub index eq 2 index n 2 mul 1 add index eq
and { pop pop /n n 1 sub def } if } def
/Polygon { NArray n 2 eq { 0 0 /n 3 def } if n 3 lt { n { pop pop }
repeat } { n 3 gt { CheckClosed } if n 2 mul -2 roll /y0 ED /x0 ED /y1
ED /x1 ED x1 y1 /x1 x0 x1 add 2 div def /y1 y0 y1 add 2 div def x1 y1
moveto /n n 2 sub def n { Lineto } repeat x1 y1 x0 y0 6 4 roll Lineto
Lineto pop pop closepath } ifelse } def
/Diamond { /mtrx CM def T rotate /h ED /w ED dup 0 eq { pop } { CLW mul
neg /d ED /a w h Atan def /h d a sin Div h add def /w d a cos Div w add
def } ifelse mark w 2 div h 2 div w 0 0 h neg w neg 0 0 h w 2 div h 2
div /ArrowA { moveto } def /ArrowB { } def false Line closepath mtrx
setmatrix } def
% DG modification begin - Jan. 15, 1997
%/Triangle { /mtrx CM def translate rotate /h ED 2 div /w ED dup 0 eq {
%pop } { CLW mul /d ED /h h d w h Atan sin Div sub def /w w d h w Atan 2
%div dup cos exch sin Div mul sub def } ifelse mark 0 d w neg d 0 h w d 0
%d /ArrowA { moveto } def /ArrowB { } def false Line closepath mtrx
%setmatrix } def
/Triangle { /mtrx CM def translate rotate /h ED 2 div /w ED dup
CLW mul /d ED /h h d w h Atan sin Div sub def /w w d h w Atan 2
div dup cos exch sin Div mul sub def mark 0 d w neg d 0 h w d 0
d /ArrowA { moveto } def /ArrowB { } def false Line closepath mtrx
% DG/SR modification begin - Jun.  1, 1998 - Patch 3 (from Michael Vulis)
% setmatrix } def
setmatrix pop } def
% DG/SR modification end
/CCA { /y ED /x ED 2 copy y sub /dy1 ED x sub /dx1 ED /l1 dx1 dy1 Pyth
def } def
/CCA { /y ED /x ED 2 copy y sub /dy1 ED x sub /dx1 ED /l1 dx1 dy1 Pyth
def } def
/CC { /l0 l1 def /x1 x dx sub def /y1 y dy sub def /dx0 dx1 def /dy0 dy1
def CCA /dx dx0 l1 c exp mul dx1 l0 c exp mul add def /dy dy0 l1 c exp
mul dy1 l0 c exp mul add def /m dx0 dy0 Atan dx1 dy1 Atan sub 2 div cos
abs b exp a mul dx dy Pyth Div 2 div def /x2 x l0 dx mul m mul sub def
/y2 y l0 dy mul m mul sub def /dx l1 dx mul m mul neg def /dy l1 dy mul
m mul neg def } def
/IC { /c c 1 add def c 0 lt { /c 0 def } { c 3 gt { /c 3 def } if }
ifelse /a a 2 mul 3 div 45 cos b exp div def CCA /dx 0 def /dy 0 def }
def
/BOC { IC CC x2 y2 x1 y1 ArrowA CP 4 2 roll x y curveto } def
/NC { CC x1 y1 x2 y2 x y curveto } def
/EOC { x dx sub y dy sub 4 2 roll ArrowB 2 copy curveto } def
/BAC { IC CC x y moveto CC x1 y1 CP ArrowA } def
/NAC { x2 y2 x y curveto CC x1 y1 } def
/EAC { x2 y2 x y ArrowB curveto pop pop } def
/OpenCurve { NArray n 3 lt { n { pop pop } repeat } { BOC /n n 3 sub def
n { NC } repeat EOC } ifelse } def
/AltCurve { { false NArray n 2 mul 2 roll [ n 2 mul 3 sub 1 roll ] aload
/Points ED n 2 mul -2 roll } { false NArray } ifelse n 4 lt { n { pop
pop } repeat } { BAC /n n 4 sub def n { NAC } repeat EAC } ifelse } def
/ClosedCurve { NArray n 3 lt { n { pop pop } repeat } { n 3 gt {
CheckClosed } if 6 copy n 2 mul 6 add 6 roll IC CC x y moveto n { NC }
repeat closepath pop pop } ifelse } def
/SQ { /r ED r r moveto r r neg L r neg r neg L r neg r L fill } def
/ST { /y ED /x ED x y moveto x neg y L 0 x L fill } def
/SP { /r ED gsave 0 r moveto 4 { 72 rotate 0 r L } repeat fill grestore }
def
/FontDot { DS 2 mul dup matrix scale matrix concatmatrix exch matrix
rotate matrix concatmatrix exch findfont exch makefont setfont } def
/Rect { x1 y1 y2 add 2 div moveto x1 y2 lineto x2 y2 lineto x2 y1 lineto
x1 y1 lineto closepath } def
/OvalFrame { x1 x2 eq y1 y2 eq or { pop pop x1 y1 moveto x2 y2 L } { y1
y2 sub abs x1 x2 sub abs 2 copy gt { exch pop } { pop } ifelse 2 div
exch { dup 3 1 roll mul exch } if 2 copy lt { pop } { exch pop } ifelse
/b ED x1 y1 y2 add 2 div moveto x1 y2 x2 y2 b arcto x2 y2 x2 y1 b arcto
x2 y1 x1 y1 b arcto x1 y1 x1 y2 b arcto 16 { pop } repeat closepath }
ifelse } def
/Frame { CLW mul /a ED 3 -1 roll 2 copy gt { exch } if a sub /y2 ED a add
/y1 ED 2 copy gt { exch } if a sub /x2 ED a add /x1 ED 1 index 0 eq {
pop pop Rect } { OvalFrame } ifelse } def
/BezierNArray { /f ED counttomark 2 div dup cvi /n ED n eq not { exch pop
} if n 1 sub neg 3 mod 3 add 3 mod { 0 0 /n n 1 add def } repeat f { ]
aload /Points ED } { n 2 mul 1 add -1 roll pop } ifelse } def
/OpenBezier { BezierNArray n 1 eq { pop pop } { ArrowA n 4 sub 3 idiv { 6
2 roll 4 2 roll curveto } repeat 6 2 roll 4 2 roll ArrowB curveto }
ifelse } def
/ClosedBezier { BezierNArray n 1 eq { pop pop } { moveto n 1 sub 3 idiv {
6 2 roll 4 2 roll curveto } repeat closepath } ifelse } def
/BezierShowPoints { gsave Points aload length 2 div cvi /n ED moveto n 1
sub { lineto } repeat CLW 2 div SLW [ 4 4 ] 0 setdash stroke grestore }
def
/Parab { /y0 exch def /x0 exch def /y1 exch def /x1 exch def /dx x0 x1
sub 3 div def /dy y0 y1 sub 3 div def x0 dx sub y0 dy add x1 y1 ArrowA
x0 dx add y0 dy add x0 2 mul x1 sub y1 ArrowB curveto /Points [ x1 y1 x0
y0 x0 2 mul x1 sub y1 ] def } def
/Grid { newpath /a 4 string def /b ED /c ED /n ED cvi dup 1 lt { pop 1 }
if /s ED s div dup 0 eq { pop 1 } if /dy ED s div dup 0 eq { pop 1 } if
/dx ED dy div round dy mul /y0 ED dx div round dx mul /x0 ED dy div
round cvi /y2 ED dx div round cvi /x2 ED dy div round cvi /y1 ED dx div
round cvi /x1 ED /h y2 y1 sub 0 gt { 1 } { -1 } ifelse def /w x2 x1 sub
0 gt { 1 } { -1 } ifelse def b 0 gt { /z1 b 4 div CLW 2 div add def
/Helvetica findfont b scalefont setfont /b b .95 mul CLW 2 div add def }
if systemdict /setstrokeadjust known { true setstrokeadjust /t { } def }
{ /t { transform 0.25 sub round 0.25 add exch 0.25 sub round 0.25 add
exch itransform } bind def } ifelse gsave n 0 gt { 1 setlinecap [ 0 dy n
div ] dy n div 2 div setdash } { 2 setlinecap } ifelse /i x1 def /f y1
dy mul n 0 gt { dy n div 2 div h mul sub } if def /g y2 dy mul n 0 gt {
dy n div 2 div h mul add } if def x2 x1 sub w mul 1 add dup 1000 gt {
pop 1000 } if { i dx mul dup y0 moveto b 0 gt { gsave c i a cvs dup
stringwidth pop /z2 ED w 0 gt {z1} {z1 z2 add neg} ifelse h 0 gt {b neg}
{z1} ifelse rmoveto show grestore } if dup t f moveto g t L stroke /i i
w add def } repeat grestore gsave n 0 gt
% DG/SR modification begin - Nov. 7, 1997 - Patch 1
%{ 1 setlinecap [ 0 dx n div ] dy n div 2 div setdash }
{ 1 setlinecap [ 0 dx n div ] dx n div 2 div setdash }
% DG/SR modification end
{ 2 setlinecap } ifelse /i y1 def /f x1 dx mul
n 0 gt { dx n div 2 div w mul sub } if def /g x2 dx mul n 0 gt { dx n
div 2 div w mul add } if def y2 y1 sub h mul 1 add dup 1000 gt { pop
1000 } if { newpath i dy mul dup x0 exch moveto b 0 gt { gsave c i a cvs
dup stringwidth pop /z2 ED w 0 gt {z1 z2 add neg} {z1} ifelse h 0 gt
{z1} {b neg} ifelse rmoveto show grestore } if dup f exch t moveto g
exch t L stroke /i i h add def } repeat grestore } def
/ArcArrow { /d ED /b ED /a ED gsave newpath 0 -1000 moveto clip newpath 0
1 0 0 b grestore c mul /e ED pop pop pop r a e d PtoC y add exch x add
exch r a PtoC y add exch x add exch b pop pop pop pop a e d CLW 8 div c
mul neg d } def
/Ellipse { /mtrx CM def T scale 0 0 1 5 3 roll arc mtrx setmatrix } def
/Rot { CP CP translate 3 -1 roll neg rotate NET  } def
/RotBegin { tx@Dict /TMatrix known not { /TMatrix { } def /RAngle { 0 }
def } if /TMatrix [ TMatrix CM ] cvx def /a ED a Rot /RAngle [ RAngle
dup a add ] cvx def } def
/RotEnd { /TMatrix [ TMatrix setmatrix ] cvx def /RAngle [ RAngle pop ]
cvx def } def
/PutCoor { gsave CP T CM STV exch exec moveto setmatrix CP grestore } def
/PutBegin { /TMatrix [ TMatrix CM ] cvx def CP 4 2 roll T moveto } def
/PutEnd { CP /TMatrix [ TMatrix setmatrix ] cvx def moveto } def
/Uput { /a ED add 2 div /h ED 2 div /w ED /s a sin def /c a cos def /b s
abs c abs 2 copy gt dup /q ED { pop } { exch pop } ifelse def /w1 c b
div w mul def /h1 s b div h mul def q { w1 abs w sub dup c mul abs } {
h1 abs h sub dup s mul abs } ifelse } def
/UUput { /z ED abs /y ED /x ED q { x s div c mul abs y gt } { x c div s
mul abs y gt } ifelse { x x mul y y mul sub z z mul add sqrt z add } { q
{ x s div } { x c div } ifelse abs } ifelse a PtoC h1 add exch w1 add
exch } def
/BeginOL { dup (all) eq exch TheOL eq or { IfVisible not { Visible
/IfVisible true def } if } { IfVisible { Invisible /IfVisible false def
} if } ifelse } def
/InitOL { /OLUnit [ 3000 3000 matrix defaultmatrix dtransform ] cvx def
/Visible { CP OLUnit idtransform T moveto } def /Invisible { CP OLUnit
neg exch neg exch idtransform T moveto } def /BOL { BeginOL } def
/IfVisible true def } def
end
% END pstricks.pro

%%Creation Date: May 7, 1993
%% Version 97 patch 1, 99/12/16
%% Modified by Etienne Riga <etienne.riga@skynet.be> - Dec. 16, 1999
%% to add /Diamond, /SolidDiamond and /BoldDiamond
10 dict dup begin
  /FontType 3 def
  /FontMatrix [ .001 0 0 .001 0 0 ] def
  /FontBBox [ 0 0 0 0 ] def
  /Encoding 256 array def
  0 1 255 { Encoding exch /.notdef put } for
  Encoding
    dup (b) 0 get /Bullet put
    dup (c) 0 get /Circle put
    dup (C) 0 get /BoldCircle put
    dup (u) 0 get /SolidTriangle put
    dup (t) 0 get /Triangle put
    dup (T) 0 get /BoldTriangle put
    dup (r) 0 get /SolidSquare put
    dup (s) 0 get /Square put
    dup (S) 0 get /BoldSquare put
    dup (q) 0 get /SolidPentagon put
    dup (p) 0 get /Pentagon put
    dup (P) 0 get /BoldPentagon put
% DG/SR modification begin - Dec. 16, 1999 - From Etienne Riga
    dup (l) 0 get /SolidDiamond put
    dup (d) 0 get /Diamond put
        (D) 0 get /BoldDiamond put
% DG/SR modification end
  /Metrics 13 dict def
  Metrics begin
    /Bullet        1000   def
    /Circle        1000   def
    /BoldCircle    1000   def
    /SolidTriangle 1344   def
    /Triangle      1344   def
    /BoldTriangle  1344   def
    /SolidSquare    886   def
    /Square         886   def
    /BoldSquare     886   def
    /SolidPentagon 1093.2 def
    /Pentagon      1093.2 def
    /BoldPentagon  1093.2 def
% DG/SR modification begin - Dec. 16, 1999 - From Etienne Riga
    /SolidDiamond  1008   def
    /Diamond       1008   def
    /BoldDiamond   1008   def
% DG/SR modification end
    /.notdef 0 def
  end
  /BBoxes 13 dict def
  BBoxes begin
    /Circle        { -550 -550 550 550 } def
    /BoldCircle    /Circle load def
    /Bullet        /Circle load def
    /Triangle      { -571.5 -330 571.5 660 } def
    /BoldTriangle  /Triangle load def
    /SolidTriangle /Triangle load def
    /Square        { -450 -450 450 450 } def
    /BoldSquare    /Square load def
    /SolidSquare   /Square load def
    /Pentagon      { -546.6 -465 546.6 574.7 } def
    /BoldPentagon  /Pentagon load def
    /SolidPentagon /Pentagon load def
% DG/SR modification begin - Dec. 16, 1999 - From Etienne Riga
    /Diamond       { -428.5 -742.5 428.5 742.5 } def
    /BoldDiamond   /Diamond load def
    /SolidDiamond  /Diamond load def
% DG/SR modification end
    /.notdef { 0 0 0 0 } def
  end
  /CharProcs 20 dict def
  CharProcs begin
    /Adjust {
      2 copy dtransform floor .5 add exch floor .5 add exch idtransform
      3 -1 roll div 3 1 roll exch div exch scale
    } def
    /CirclePath    { 0 0 500 0 360 arc closepath } def
    /Bullet        { 500 500 Adjust CirclePath fill } def
    /Circle        { 500 500 Adjust CirclePath .9 .9 scale CirclePath
                     eofill } def
    /BoldCircle    { 500 500 Adjust CirclePath .8 .8 scale CirclePath
                     eofill } def
    /BoldCircle    { CirclePath .8 .8 scale CirclePath eofill } def
    /TrianglePath  { 0  660 moveto -571.5 -330 lineto 571.5 -330 lineto
                     closepath } def
    /SolidTriangle { TrianglePath fill } def
    /Triangle      { TrianglePath .85 .85 scale TrianglePath eofill } def
    /BoldTriangle  { TrianglePath .7 .7 scale TrianglePath eofill } def
    /SquarePath    { -450 450 moveto 450 450 lineto 450 -450 lineto
                     -450 -450 lineto closepath } def
    /SolidSquare   { SquarePath fill } def
    /Square        { SquarePath .89 .89 scale SquarePath eofill } def
    /BoldSquare    { SquarePath .78 .78 scale SquarePath eofill } def
    /PentagonPath  {
      -337.8 -465   moveto
       337.8 -465   lineto
       546.6  177.6 lineto
         0    574.7 lineto
      -546.6  177.6 lineto
      closepath
    } def
    /SolidPentagon { PentagonPath fill } def
    /Pentagon      { PentagonPath .89 .89 scale PentagonPath eofill } def
    /BoldPentagon  { PentagonPath .78 .78 scale PentagonPath eofill } def
% DG/SR modification begin - Dec. 16, 1999 - From Etienne Riga
    /DiamondPath   { 0 742.5 moveto -428.5 0 lineto 0 -742.5 lineto
                     428.5 0 lineto closepath } def
    /SolidDiamond  { DiamondPath fill } def
    /Diamond       { DiamondPath .85 .85 scale DiamondPath eofill } def
    /BoldDiamond   { DiamondPath .7 .7 scale DiamondPath eofill } def
% DG/SR modification end
    /.notdef { } def
  end
  /BuildGlyph {
    exch
    begin
      Metrics 1 index get exec 0
      BBoxes 3 index get exec
      setcachedevice
      CharProcs begin load exec end
    end
  } def
  /BuildChar {
    1 index /Encoding get exch get
    1 index /BuildGlyph get exec
  } bind def
end
/PSTricksDotFont exch definefont pop
%END pst-dots.pro

%!
% PostScript prologue for pst-node.tex.
% Version 97 patch 1, 97/05/09.
% For distribution, see pstricks.tex.
%
/tx@NodeDict 400 dict def tx@NodeDict begin
tx@Dict begin /T /translate load def end
/NewNode { gsave /next ED dict dup 3 1 roll def exch { dup 3 1 roll def }
if begin tx@Dict begin STV CP T exec end /NodeMtrx CM def next end
grestore } def
/InitPnode { /Y ED /X ED /NodePos { NodeSep Cos mul NodeSep Sin mul } def
} def
/InitCnode { /r ED /Y ED /X ED /NodePos { NodeSep r add dup Cos mul exch
Sin mul } def } def
/GetRnodePos { Cos 0 gt { /dx r NodeSep add def } { /dx l NodeSep sub def
} ifelse Sin 0 gt { /dy u NodeSep add def } { /dy d NodeSep sub def }
ifelse dx Sin mul abs dy Cos mul abs gt { dy Cos mul Sin div dy } { dx
dup Sin mul Cos Div } ifelse } def
/InitRnode { /Y ED /X ED X sub /r ED /l X neg def Y add neg /d ED Y sub
/u ED /NodePos { GetRnodePos } def } def
/DiaNodePos { w h mul w Sin mul abs h Cos mul abs add Div NodeSep add dup
Cos mul exch Sin mul } def
/TriNodePos { Sin s lt { d NodeSep sub dup Cos mul Sin Div exch } { w h
mul w Sin mul h Cos abs mul add Div NodeSep add dup Cos mul exch Sin mul
} ifelse } def
/InitTriNode { sub 2 div exch 2 div exch 2 copy T 2 copy 4 index index /d
ED pop pop pop pop -90 mul rotate /NodeMtrx CM def /X 0 def /Y 0 def d
sub abs neg /d ED d add /h ED 2 div h mul h d sub Div /w ED /s d w Atan
sin def /NodePos { TriNodePos } def } def
/OvalNodePos { /ww w NodeSep add def /hh h NodeSep add def Sin ww mul Cos
hh mul Atan dup cos ww mul exch sin hh mul } def
/GetCenter { begin X Y NodeMtrx transform CM itransform end } def
/XYPos { dup sin exch cos Do /Cos ED /Sin ED /Dist ED Cos 0 gt { Dist
Dist Sin mul Cos div } { Cos 0 lt { Dist neg Dist Sin mul Cos div neg }
{ 0 Dist Sin mul } ifelse } ifelse Do } def
/GetEdge { dup 0 eq { pop begin 1 0 NodeMtrx dtransform CM idtransform
exch atan sub dup sin /Sin ED cos /Cos ED /NodeSep ED NodePos NodeMtrx
dtransform CM idtransform end } { 1 eq {{exch}} {{}} ifelse /Do ED pop
XYPos } ifelse } def
/AddOffset { 1 index 0 eq { pop pop } { 2 copy 5 2 roll cos mul add 4 1
roll sin mul sub exch } ifelse } def
/GetEdgeA { NodeSepA AngleA NodeA NodeSepTypeA GetEdge OffsetA AngleA
AddOffset yA add /yA1 ED xA add /xA1 ED } def
/GetEdgeB { NodeSepB AngleB NodeB NodeSepTypeB GetEdge OffsetB AngleB
AddOffset yB add /yB1 ED xB add /xB1 ED } def
/GetArmA { ArmTypeA 0 eq { /xA2 ArmA AngleA cos mul xA1 add def /yA2 ArmA
AngleA sin mul yA1 add def } { ArmTypeA 1 eq {{exch}} {{}} ifelse /Do ED
ArmA AngleA XYPos OffsetA AngleA AddOffset yA add /yA2 ED xA add /xA2 ED
} ifelse } def
/GetArmB { ArmTypeB 0 eq { /xB2 ArmB AngleB cos mul xB1 add def /yB2 ArmB
AngleB sin mul yB1 add def } { ArmTypeB 1 eq {{exch}} {{}} ifelse /Do ED
ArmB AngleB XYPos OffsetB AngleB AddOffset yB add /yB2 ED xB add /xB2 ED
} ifelse } def
/InitNC { /b ED /a ED /NodeSepTypeB ED /NodeSepTypeA ED /NodeSepB ED
/NodeSepA ED /OffsetB ED /OffsetA ED tx@NodeDict a known tx@NodeDict b
known and dup { /NodeA a load def /NodeB b load def NodeA GetCenter /yA
ED /xA ED NodeB GetCenter /yB ED /xB ED } if } def
/LPutLine { 4 copy 3 -1 roll sub neg 3 1 roll sub Atan /NAngle ED 1 t sub
mul 3 1 roll 1 t sub mul 4 1 roll t mul add /Y ED t mul add /X ED } def
/LPutLines { mark LPutVar counttomark 2 div 1 sub /n ED t floor dup n gt
{ pop n 1 sub /t 1 def } { dup t sub neg /t ED } ifelse cvi 2 mul { pop
} repeat LPutLine cleartomark } def
/BezierMidpoint { /y3 ED /x3 ED /y2 ED /x2 ED /y1 ED /x1 ED /y0 ED /x0 ED
/t ED /cx x1 x0 sub 3 mul def /cy y1 y0 sub 3 mul def /bx x2 x1 sub 3
mul cx sub def /by y2 y1 sub 3 mul cy sub def /ax x3 x0 sub cx sub bx
sub def /ay y3 y0 sub cy sub by sub def ax t 3 exp mul bx t t mul mul
add cx t mul add x0 add ay t 3 exp mul by t t mul mul add cy t mul add
y0 add 3 ay t t mul mul mul 2 by t mul mul add cy add 3 ax t t mul mul
mul 2 bx t mul mul add cx add atan /NAngle ED /Y ED /X ED } def
/HPosBegin { yB yA ge { /t 1 t sub def } if /Y yB yA sub t mul yA add def
} def
/HPosEnd { /X Y yyA sub yyB yyA sub Div xxB xxA sub mul xxA add def
/NAngle yyB yyA sub xxB xxA sub Atan def } def
/HPutLine { HPosBegin /yyA ED /xxA ED /yyB ED /xxB ED HPosEnd  } def
/HPutLines { HPosBegin yB yA ge { /check { le } def } { /check { ge } def
} ifelse /xxA xA def /yyA yA def mark xB yB LPutVar { dup Y check { exit
} { /yyA ED /xxA ED } ifelse } loop /yyB ED /xxB ED cleartomark HPosEnd 
} def
/VPosBegin { xB xA lt { /t 1 t sub def } if /X xB xA sub t mul xA add def
} def
/VPosEnd { /Y X xxA sub xxB xxA sub Div yyB yyA sub mul yyA add def
/NAngle yyB yyA sub xxB xxA sub Atan def } def
/VPutLine { VPosBegin /yyA ED /xxA ED /yyB ED /xxB ED VPosEnd  } def
/VPutLines { VPosBegin xB xA ge { /check { le } def } { /check { ge } def
} ifelse /xxA xA def /yyA yA def mark xB yB LPutVar { 1 index X check {
exit } { /yyA ED /xxA ED } ifelse } loop /yyB ED /xxB ED cleartomark
VPosEnd  } def
/HPutCurve { gsave newpath /SaveLPutVar /LPutVar load def LPutVar 8 -2
roll moveto curveto flattenpath /LPutVar [ {} {} {} {} pathforall ] cvx
def grestore exec /LPutVar /SaveLPutVar load def } def
/NCCoor { /AngleA yB yA sub xB xA sub Atan def /AngleB AngleA 180 add def
GetEdgeA GetEdgeB /LPutVar [ xB1 yB1 xA1 yA1 ] cvx def /LPutPos {
LPutVar LPutLine } def /HPutPos { LPutVar HPutLine } def /VPutPos {
LPutVar VPutLine } def LPutVar } def
/NCLine { NCCoor tx@Dict begin ArrowA CP 4 2 roll ArrowB lineto pop pop
end } def
/NCLines { false NArray n 0 eq { NCLine } { 2 copy yA sub exch xA sub
Atan /AngleA ED n 2 mul dup index exch index yB sub exch xB sub Atan
/AngleB ED GetEdgeA GetEdgeB /LPutVar [ xB1 yB1 n 2 mul 4 add 4 roll xA1
yA1 ] cvx def mark LPutVar tx@Dict begin false Line end /LPutPos {
LPutLines } def /HPutPos { HPutLines } def /VPutPos { VPutLines } def }
ifelse } def
/NCCurve { GetEdgeA GetEdgeB xA1 xB1 sub yA1 yB1 sub Pyth 2 div dup 3 -1
roll mul /ArmA ED mul /ArmB ED /ArmTypeA 0 def /ArmTypeB 0 def GetArmA
GetArmB xA2 yA2 xA1 yA1 tx@Dict begin ArrowA end xB2 yB2 xB1 yB1 tx@Dict
begin ArrowB end curveto /LPutVar [ xA1 yA1 xA2 yA2 xB2 yB2 xB1 yB1 ]
cvx def /LPutPos { t LPutVar BezierMidpoint } def /HPutPos { { HPutLines
} HPutCurve } def /VPutPos { { VPutLines } HPutCurve } def } def
/NCAngles { GetEdgeA GetEdgeB GetArmA GetArmB /mtrx AngleA matrix rotate
def xA2 yA2 mtrx transform pop xB2 yB2 mtrx transform exch pop mtrx
itransform /y0 ED /x0 ED mark ArmB 0 ne { xB1 yB1 } if xB2 yB2 x0 y0 xA2
yA2 ArmA 0 ne { xA1 yA1 } if tx@Dict begin false Line end /LPutVar [ xB1
yB1 xB2 yB2 x0 y0 xA2 yA2 xA1 yA1 ] cvx def /LPutPos { LPutLines } def
/HPutPos { HPutLines } def /VPutPos { VPutLines } def } def
/NCAngle { GetEdgeA GetEdgeB GetArmB /mtrx AngleA matrix rotate def xB2
yB2 mtrx itransform pop xA1 yA1 mtrx itransform exch pop mtrx transform
/y0 ED /x0 ED mark ArmB 0 ne { xB1 yB1 } if xB2 yB2 x0 y0 xA1 yA1
tx@Dict begin false Line end /LPutVar [ xB1 yB1 xB2 yB2 x0 y0 xA1 yA1 ]
cvx def /LPutPos { LPutLines } def /HPutPos { HPutLines } def /VPutPos {
VPutLines } def } def
/NCBar { GetEdgeA GetEdgeB GetArmA GetArmB /mtrx AngleA matrix rotate def
xA2 yA2 mtrx itransform pop xB2 yB2 mtrx itransform pop sub dup 0 mtrx
transform 3 -1 roll 0 gt { /yB2 exch yB2 add def /xB2 exch xB2 add def }
{ /yA2 exch neg yA2 add def /xA2 exch neg xA2 add def } ifelse mark ArmB
0 ne { xB1 yB1 } if xB2 yB2 xA2 yA2 ArmA 0 ne { xA1 yA1 } if tx@Dict
begin false Line end /LPutVar [ xB1 yB1 xB2 yB2 xA2 yA2 xA1 yA1 ] cvx
def /LPutPos { LPutLines } def /HPutPos { HPutLines } def /VPutPos {
VPutLines } def } def
/NCDiag { GetEdgeA GetEdgeB GetArmA GetArmB mark ArmB 0 ne { xB1 yB1 } if
xB2 yB2 xA2 yA2 ArmA 0 ne { xA1 yA1 } if tx@Dict begin false Line end
/LPutVar [ xB1 yB1 xB2 yB2 xA2 yA2 xA1 yA1 ] cvx def /LPutPos {
LPutLines } def /HPutPos { HPutLines } def /VPutPos { VPutLines } def }
def
/NCDiagg { GetEdgeA GetArmA yB yA2 sub xB xA2 sub Atan 180 add /AngleB ED
GetEdgeB mark xB1 yB1 xA2 yA2 ArmA 0 ne { xA1 yA1 } if tx@Dict begin
false Line end /LPutVar [ xB1 yB1 xA2 yA2 xA1 yA1 ] cvx def /LPutPos {
LPutLines } def /HPutPos { HPutLines } def /VPutPos { VPutLines } def }
def
/NCLoop { GetEdgeA GetEdgeB GetArmA GetArmB /mtrx AngleA matrix rotate
def xA2 yA2 mtrx transform loopsize add /yA3 ED /xA3 ED /xB3 xB2 yB2
mtrx transform pop def xB3 yA3 mtrx itransform /yB3 ED /xB3 ED xA3 yA3
mtrx itransform /yA3 ED /xA3 ED mark ArmB 0 ne { xB1 yB1 } if xB2 yB2
xB3 yB3 xA3 yA3 xA2 yA2 ArmA 0 ne { xA1 yA1 } if tx@Dict begin false
Line end /LPutVar [ xB1 yB1 xB2 yB2 xB3 yB3 xA3 yA3 xA2 yA2 xA1 yA1 ]
cvx def /LPutPos { LPutLines } def /HPutPos { HPutLines } def /VPutPos {
VPutLines } def } def
% DG/SR modification begin - May 9, 1997 - Patch 1
%/NCCircle { 0 0 NodesepA nodeA \tx@GetEdge pop xA sub 2 div dup 2 exp r
%r mul sub abs sqrt atan 2 mul /a ED r AngleA 90 add PtoC yA add exch xA add
%exch 2 copy /LPutVar [ 4 2 roll r AngleA ] cvx def /LPutPos { LPutVar t 360
%mul add dup 5 1 roll 90 sub \tx@PtoC 3 -1 roll add /Y ED add /X ED /NAngle ED
/NCCircle { NodeSepA 0 NodeA 0 GetEdge pop 2 div dup 2 exp r
r mul sub abs sqrt atan 2 mul /a ED r AngleA 90 add PtoC yA add exch xA add
exch 2 copy /LPutVar [ 4 2 roll r AngleA ] cvx def /LPutPos { LPutVar t 360
mul add dup 5 1 roll 90 sub PtoC 3 -1 roll add /Y ED add /X ED /NAngle ED
% DG/SR modification end
} def /HPutPos { LPutPos } def /VPutPos { LPutPos } def r AngleA 90 sub a add
AngleA 270 add a sub tx@Dict begin /angleB ED /angleA ED /r ED /c 57.2957 r
Div def /y ED /x ED } def
/NCBox { /d ED /h ED /AngleB yB yA sub xB xA sub Atan def /AngleA AngleB
180 add def GetEdgeA GetEdgeB /dx d AngleB sin mul def /dy d AngleB cos
mul neg def /hx h AngleB sin mul neg def /hy h AngleB cos mul def
/LPutVar [ xA1 hx add yA1 hy add xB1 hx add yB1 hy add xB1 dx add yB1 dy
add xA1 dx add yA1 dy add ] cvx def /LPutPos { LPutLines } def /HPutPos
{ xB yB xA yA LPutLine } def /VPutPos { HPutPos } def mark LPutVar
tx@Dict begin false Polygon end } def
/NCArcBox { /l ED neg /d ED /h ED /a ED /AngleA yB yA sub xB xA sub Atan
def /AngleB AngleA 180 add def /tA AngleA a sub 90 add def /tB tA a 2
mul add def /r xB xA sub tA cos tB cos sub Div dup 0 eq { pop 1 } if def
/x0 xA r tA cos mul add def /y0 yA r tA sin mul add def /c 57.2958 r div
def /AngleA AngleA a sub 180 add def /AngleB AngleB a add 180 add def
GetEdgeA GetEdgeB /AngleA tA 180 add yA yA1 sub xA xA1 sub Pyth c mul
sub def /AngleB tB 180 add yB yB1 sub xB xB1 sub Pyth c mul add def l 0
eq { x0 y0 r h add AngleA AngleB arc x0 y0 r d add AngleB AngleA arcn }
{ x0 y0 translate /tA AngleA l c mul add def /tB AngleB l c mul sub def
0 0 r h add tA tB arc r h add AngleB PtoC r d add AngleB PtoC 2 copy 6 2
roll l arcto 4 { pop } repeat r d add tB PtoC l arcto 4 { pop } repeat 0
0 r d add tB tA arcn r d add AngleA PtoC r h add AngleA PtoC 2 copy 6 2
roll l arcto 4 { pop } repeat r h add tA PtoC l arcto 4 { pop } repeat }
ifelse closepath /LPutVar [ x0 y0 r AngleA AngleB h d ] cvx def /LPutPos
{ LPutVar /d ED /h ED /AngleB ED /AngleA ED /r ED /y0 ED /x0 ED t 1 le {
r h add AngleA 1 t sub mul AngleB t mul add dup 90 add /NAngle ED PtoC }
{ t 2 lt { /NAngle AngleB 180 add def r 2 t sub h mul t 1 sub d mul add
add AngleB PtoC } { t 3 lt { r d add AngleB 3 t sub mul AngleA 2 t sub
mul add dup 90 sub /NAngle ED PtoC } { /NAngle AngleA 180 add def r 4 t
sub d mul t 3 sub h mul add add AngleA PtoC } ifelse } ifelse } ifelse
y0 add /Y ED x0 add /X ED } def /HPutPos { LPutPos } def /VPutPos {
LPutPos } def } def
/Tfan { /AngleA yB yA sub xB xA sub Atan def GetEdgeA w xA1 xB sub yA1 yB
sub Pyth Pyth w Div CLW 2 div mul 2 div dup AngleA sin mul yA1 add /yA1
ED AngleA cos mul xA1 add /xA1 ED /LPutVar [ xA1 yA1 m { xB w add yB xB
w sub yB } { xB yB w sub xB yB w add } ifelse xA1 yA1 ] cvx def /LPutPos
{ LPutLines } def /VPutPos@ { LPutVar flag { 8 4 roll pop pop pop pop }
{ pop pop pop pop 4 2 roll } ifelse } def /VPutPos { VPutPos@ VPutLine }
def /HPutPos { VPutPos@ HPutLine } def mark LPutVar tx@Dict begin
/ArrowA { moveto } def /ArrowB { } def false Line closepath end } def
/LPutCoor { NAngle tx@Dict begin /NAngle ED end gsave CM STV CP Y sub neg
exch X sub neg exch moveto setmatrix CP grestore } def
/LPut { tx@NodeDict /LPutPos known { LPutPos } { CP /Y ED /X ED /NAngle 0
def } ifelse LPutCoor  } def
/HPutAdjust { Sin Cos mul 0 eq { 0 } { d Cos mul Sin div flag not { neg }
if h Cos mul Sin div flag { neg } if 2 copy gt { pop } { exch pop }
ifelse } ifelse s add flag { r add neg } { l add } ifelse X add /X ED }
def
/VPutAdjust { Sin Cos mul 0 eq { 0 } { l Sin mul Cos div flag { neg } if
r Sin mul Cos div flag not { neg } if 2 copy gt { pop } { exch pop }
ifelse } ifelse s add flag { d add } { h add neg } ifelse Y add /Y ED }
def
end
% END pst-node.pro

%!
TeXDict begin/rf{findfont dup length 1 add dict begin{1 index/FID ne 2
index/UniqueID ne and{def}{pop pop}ifelse}forall[1 index 0 6 -1 roll
exec 0 exch 5 -1 roll VResolution Resolution div mul neg 0 0]/Metrics
exch def dict begin Encoding{exch dup type/integertype ne{pop pop 1 sub
dup 0 le{pop}{[}ifelse}{FontMatrix 0 get div Metrics 0 get div def}
ifelse}forall Metrics/Metrics currentdict end def[2 index currentdict
end definefont 3 -1 roll makefont/setfont cvx]cvx def}def/ObliqueSlant{
dup sin S cos div neg}B/SlantFont{4 index mul add}def/ExtendFont{3 -1
roll mul exch}def/ReEncodeFont{CharStrings rcheck{/Encoding false def
dup[exch{dup CharStrings exch known not{pop/.notdef/Encoding true def}
if}forall Encoding{]exch pop}{cleartomark}ifelse}if/Encoding exch def}
def end

%!
TeXDict begin/SDict 200 dict N SDict begin/@SpecialDefaults{/hs 612 N
/vs 792 N/ho 0 N/vo 0 N/hsc 1 N/vsc 1 N/ang 0 N/CLIP 0 N/rwiSeen false N
/rhiSeen false N/letter{}N/note{}N/a4{}N/legal{}N}B/@scaleunit 100 N
/@hscale{@scaleunit div/hsc X}B/@vscale{@scaleunit div/vsc X}B/@hsize{
/hs X/CLIP 1 N}B/@vsize{/vs X/CLIP 1 N}B/@clip{/CLIP 2 N}B/@hoffset{/ho
X}B/@voffset{/vo X}B/@angle{/ang X}B/@rwi{10 div/rwi X/rwiSeen true N}B
/@rhi{10 div/rhi X/rhiSeen true N}B/@llx{/llx X}B/@lly{/lly X}B/@urx{
/urx X}B/@ury{/ury X}B/magscale true def end/@MacSetUp{userdict/md known
{userdict/md get type/dicttype eq{userdict begin md length 10 add md
maxlength ge{/md md dup length 20 add dict copy def}if end md begin
/letter{}N/note{}N/legal{}N/od{txpose 1 0 mtx defaultmatrix dtransform S
atan/pa X newpath clippath mark{transform{itransform moveto}}{transform{
itransform lineto}}{6 -2 roll transform 6 -2 roll transform 6 -2 roll
transform{itransform 6 2 roll itransform 6 2 roll itransform 6 2 roll
curveto}}{{closepath}}pathforall newpath counttomark array astore/gc xdf
pop ct 39 0 put 10 fz 0 fs 2 F/|______Courier fnt invertflag{PaintBlack}
if}N/txpose{pxs pys scale ppr aload pop por{noflips{pop S neg S TR pop 1
-1 scale}if xflip yflip and{pop S neg S TR 180 rotate 1 -1 scale ppr 3
get ppr 1 get neg sub neg ppr 2 get ppr 0 get neg sub neg TR}if xflip
yflip not and{pop S neg S TR pop 180 rotate ppr 3 get ppr 1 get neg sub
neg 0 TR}if yflip xflip not and{ppr 1 get neg ppr 0 get neg TR}if}{
noflips{TR pop pop 270 rotate 1 -1 scale}if xflip yflip and{TR pop pop
90 rotate 1 -1 scale ppr 3 get ppr 1 get neg sub neg ppr 2 get ppr 0 get
neg sub neg TR}if xflip yflip not and{TR pop pop 90 rotate ppr 3 get ppr
1 get neg sub neg 0 TR}if yflip xflip not and{TR pop pop 270 rotate ppr
2 get ppr 0 get neg sub neg 0 S TR}if}ifelse scaleby96{ppr aload pop 4
-1 roll add 2 div 3 1 roll add 2 div 2 copy TR .96 dup scale neg S neg S
TR}if}N/cp{pop pop showpage pm restore}N end}if}if}N/normalscale{
Resolution 72 div VResolution 72 div neg scale magscale{DVImag dup scale
}if 0 setgray}N/psfts{S 65781.76 div N}N/startTexFig{/psf$SavedState
save N userdict maxlength dict begin/magscale true def normalscale
currentpoint TR/psf$ury psfts/psf$urx psfts/psf$lly psfts/psf$llx psfts
/psf$y psfts/psf$x psfts currentpoint/psf$cy X/psf$cx X/psf$sx psf$x
psf$urx psf$llx sub div N/psf$sy psf$y psf$ury psf$lly sub div N psf$sx
psf$sy scale psf$cx psf$sx div psf$llx sub psf$cy psf$sy div psf$ury sub
TR/showpage{}N/erasepage{}N/copypage{}N/p 3 def @MacSetUp}N/doclip{
psf$llx psf$lly psf$urx psf$ury currentpoint 6 2 roll newpath 4 copy 4 2
roll moveto 6 -1 roll S lineto S lineto S lineto closepath clip newpath
moveto}N/endTexFig{end psf$SavedState restore}N/@beginspecial{SDict
begin/SpecialSave save N gsave normalscale currentpoint TR
@SpecialDefaults count/ocount X/dcount countdictstack N}N/@setspecial{
CLIP 1 eq{newpath 0 0 moveto hs 0 rlineto 0 vs rlineto hs neg 0 rlineto
closepath clip}if ho vo TR hsc vsc scale ang rotate rwiSeen{rwi urx llx
sub div rhiSeen{rhi ury lly sub div}{dup}ifelse scale llx neg lly neg TR
}{rhiSeen{rhi ury lly sub div dup scale llx neg lly neg TR}if}ifelse
CLIP 2 eq{newpath llx lly moveto urx lly lineto urx ury lineto llx ury
lineto closepath clip}if/showpage{}N/erasepage{}N/copypage{}N newpath}N
/@endspecial{count ocount sub{pop}repeat countdictstack dcount sub{end}
repeat grestore SpecialSave restore end}N/@defspecial{SDict begin}N
/@fedspecial{end}B/li{lineto}B/rl{rlineto}B/rc{rcurveto}B/np{/SaveX
currentpoint/SaveY X N 1 setlinecap newpath}N/st{stroke SaveX SaveY
moveto}N/fil{fill SaveX SaveY moveto}N/ellipse{/endangle X/startangle X
/yrad X/xrad X/savematrix matrix currentmatrix N TR xrad yrad scale 0 0
1 startangle endangle arc savematrix setmatrix}N end


% Copyright (C) 1997 American Mathematical Society.  All Rights Reserved.

11 dict begin
/FontInfo 7 dict dup begin
/version (1.00B) readonly def
/Notice (Copyright (C) 1997 American Mathematical Society. All Rights Reserved) readonly def
/FullName (CMTT10) readonly def
/FamilyName (Computer Modern) readonly def
/Weight (Medium) readonly def
/ItalicAngle 0 def
/isFixedPitch true def
end readonly def
/FontName /CMTT10 def
/PaintType 0 def
/FontType 1 def
/FontMatrix [0.001 0 0 0.001 0 0] readonly def
/Encoding 256 array
0 1 255 {1 index exch /.notdef put} for
dup 99 /c put
dup 105 /i put
dup 108 /l put
dup 109 /m put
dup 110 /n put
dup 111 /o put
dup 112 /p put
dup 114 /r put
dup 115 /s put
dup 116 /t put
dup 117 /u put
readonly def
/FontBBox{-4 -235 731 800}readonly def
/UniqueXX 5000832 def
currentdict end
currentfile eexec
8053514d28ec28da1630165fab262882d3fca78881823c5537fe6c3dda8ee5b8
97e17cb027f5c73fdbb56b0a7c25fc3512b55fe8f3acfbffcc7f4a382d8299cc
8fd37d3cea49dabdca92847af0560b404ef71134b0f3d99934fc9d0b4e602011
b9cfb856c23f958f3c5a2fbe0ef8587d1f5774879c324e51fcb22888b74f2415
50d7401eb990d4f3a7af635198422283cac1b6cd446ddbcbd915db9bff88844e
784c6bf7389803d9450b0c21756a017306462c563d51ecefaacd079732f12c29
315e4b9623a5752c6f1d8145869e120d910b2644887cea7e30b15676a92537c2
9d3aa80dc30082aba94b40990b82fb1a877e805e0c8c48f61e9f2edac05b944e
e4d8084ec1d5cc517aaeec5b3ea379dd011eeb454cecab3ad2443c887c582789
72355673e503affe0394fc7db31de364e4f56c24033c7df2265c56445ec63a1d
5695a6041ea1b94407e1cdb7c5635603a4fd047e6edcaeb2d0da6c9e0e9396d5
1a4a58e8fdc1578730f992435560a6e2d3e3687703ee2f78f5896389ac8470bc
806169eb01762e89b6dc9adf857ead656620e2589aae722c37a2ed7a2941c360
b067ee34d8d5ca3bf68db725614d936bcb207781f4d4ec2ac67b13a5ad161f3f
059add7b5e3d904831e31c20c04546fae83ca93a35989e65c201756888f727b9
7e5313c9870ec96e4cec3901ea03a5c744754485e7d169bbc98bf872d0796e18
9d43b712950c3786257d8be06ab6080b9d9392313298327549a8a41c00a2cea3
690b4a333e45aa815a64facae1c2b44640860b8b8687afbefdbd5b4a541a7251
4ee7d3e0752af3e96a88c95d31fa16d34ba2f02fdb0088b165844f02611c734a
dbcc2037bf741fdea7e8bcdc130c70c33772f777d8bcddf4611db99001ccff14
d7af2bb05defc3480bdab312a0eff2f375afb4e0df2f803c594b7c93f71ca4af
861ae1711932fef19bfe2f9b7adb69d68e5a70ea4d1a3d5bd85231b16993f65e
fb37a0a823f0542f8c2340a073dc1be4a8347f9d3068a6435cd8278b0db1809e
8af9664c2c989b9f16873c009449b6284b85da4dee11c96a05ba83292f0edbd9
2cf674aad6ac1a5ff966ffc37e88a66048deed053565b55ef6bdb8c2f2f67832
f8939a32442ea54f13d003494d6350a2864b427a9126a9c26a031909fe53fa84
63b80c3ffd536c9a5dd29ceb03148dbc24c0033ae978e26f58d6e78973cafd91
901cdc7537ba1c79bc5597318eceabb94705ea12b2ccf947b56040b653bee371
759de4728e0c456a6b4aa91532ef60d01845eb619813169a6ff7e0e9dcca94a3
29ede34503139c8c01494a01ac589ba400762ce7571da0f12f1c568a627ebd3b
83771be238e74783137de10ee8a177ab628cb7a0d6f00675b60e2fdf1c4c6e63
4aea102e715707cda83b4231f59bf1c26d5e38c93ab1552c24ee73a333bdf07f
91ab24aa59a98575d1dee03b82a0e641f2476b01815f1858139b6befedb85b5a
900b97ae59e17d7aa629c6c015ea177c33e2f6108842c021f0714b862a037078
3aa7ab19f0f4e214bbd3685757d010d9020783066340f5d3bef830d6c8488793
5ff191bf250671b4562fc6a375143016fa4c7a73f9637360ed9f538245f2962b
512b75f58ec0258cd347b62ac6686b6cb04d675f006b945d9da6a92725a36946
e0fb6eb36d26e576d9a2fe84057fb39af35d595bbfb3158137d16de22c7b8cac
cd679215f0ce802abf227c40b385b071628d1a642f694e5621abf16c5b7ea719
8479d499327e1c480ae55b3778d31e0e9a78af23d9fb979297aab0bed198d3ff
03cb484a18f4dbca33a22a912d783a27e92e998621584ce3c493fdd97427c93b
91d39b635cbdd024624ce007d6747aaf6bc1b4161418691d47c0696a247e0859
f30cd9872b01cde3a3c435027b1cab9991f1b2e830e079b0165cc50fd368a013
f019c816bac50095594e620ba52a6221b856785d060188707d11716e50620534
29dc7ce44617afd7494294aba414b50d42bf7c292cece5c21cb0f9dd72212cdf
4b02873a3e782d4a397b602ce7ae19bc76bf4018f5c5dd9c17fdad984256f192
c317e422a225546be126d54560e4c31c0126f7b6db6743a34f31114f6b964e87
0cb6023c335aa7cefdd87b7ca05d9b325da6197ea682e2d76b03fc78f6641e12
4ff3b1f8109572b9455263135c4a9c403fe6a622292b3c112dd7bcb3245c5e14
957bb3ca09bb3b651ee843f5e8225233a990f32e8d6992581f55aa3f6efb0271
18e47994ba9add5c81da2d9ab99cf947659559099d568b98919b38e8d413eb5d
b7945291b220236b80d1bc8603ea42bb3148f7715cd305f2e0aa0771c0ddc036
1f5b992ea8da4e326f73e167d546a72dbffd7e7c5e246f6330d1bb3aa9084153
7a5f5755f0786ca1cf6fb6ba551f9d81a5778f8d33a38023f27000eb9386da46
b8f02422ba2c2e3d699d57c606308e06c592edf5455a4bc5eb3224d0c1628c69
9f291e24b7c0aa0e86a9ba2674d499c871090aebbdce74e5759cdfaa9e6b966d
75235f0b0792cc40178a8e857522b0c2e232f233409f247754cb9a696ec1701e
a27d35e1b3be8f69dbce0ad9af71e97f153cd8dc0d3c2f2656ccd27b9eb2471b
6dcc9e2ce2e223262800e506ccd858f6e14f4a849565e2edc9845e4de4ad6beb
5a0a565c1c9aa50f04c9a5626e275144f00292f180fbb2090811f6ac9974eee4
5c5078fbf1764f3fab08cdf3fe511c23158da526062f37cf33d54cb97cd57325
dbc728f3b1541961f678f954f9a25f07606a17613dc1cfbdffa0939dbe79d617
8fcd7512198118832f18f5d17d6e8cd2b8f5123beab9fd2b867af8fad58c04de
2686ab798d9bd2cead729d8c8ec11a852e17d197a48f74f223673773107719f2
9d0ace295a6a3ce5a48a8e19a562f867f96131eb6ab4527881b925044771222d
a35a04b434f32c9ffff21cf183a09200314bc19ad6067c338fc48f8f25a66648
f6f90cc79ef316ffeda3cb7dc677137a1f60e401e394b7566e592466aa3caf0a
7d2241facff9c152693019554f2c4edde60e355b34cfa3932744ebee5bc2ab9a
2949b7d890cad34afbf9e21cf3405e3aab6ff9c39df11cfc0e2ca6def17163ee
0532ecb84bd92c2701ab78e1868017632b4c5237036b320913de69f3c8d12c1f
916ad8b2d2f115fc54f4fa4cb114271b62b42e1c2de1d7288345db7bb1b77112
dd588adafcdb4475a93da4418bd17bd914d48ca40c38a06514ff178a9d4dfdca
50433d16a4f4bdb8dde3b876b437902141150976a4bf30a54937235437127177
82add1f303dfabd20ce89cf0fa66af6ac99c97c50698968cc771d1947caecb0e
e9520f822371f02e7eafc3e16b338b9bfbe77714e03c90e1523547ea35d37efd
f5efad63b86701c562fb5919a81b7afbb24156382be6536a5e1e1c243eaa6cf9
7e06139b1a7e9a3e49a72153b7896944894991677678bf3a418d2b6d91079853
7d0401a95a1db8f54958d3749c88ec784de930f2e240a26fe0296fedf30251fd
573a3e376c4948f7bdc64584b12372f73e6c03f31fd89ccfd82b4880c4c6b720
ce0d7624e7fb9e6f8745e9f910b4a5f1198d1c7aa002f5b2c3422fa08af9b503
3cc0b6b417a6984428803e4c17f2a557907c8038d8df0e4e930b5feffdd96ae9
3462fac5f145a29d38ed9f3c8ee8e566515dbcbd6c7b0ef68d734e4e78c0667c
b0baf6e5f02adc426f55d769a9be7834f7a87a909d70f4c215de49c9db082536
913250fee1e59ed897e42dc7a1a350c71f57124c1f09af53b101dd161571d735
14e18e650c2e5af5142e03e22d08ef90ab809e7f6554d138790da058ea7815df
8401641f80c312d947d5d3c90e799b9615f6c5df97b200033f40ed7d55ee443b
3688c80db636bd2e01f19a49a0abcdabcbb8600e0f7f5a5ae662446e3c7823fc
003350e9ed356e352b7fd7d5fa8eed6718704661ddebfa48c4
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark

%%EndFont 

% Copyright (C) 1997 American Mathematical Society.  All Rights Reserved.

11 dict begin
/FontInfo 7 dict dup begin
/version (1.0) readonly def
/Notice (Copyright (C) 1997 American Mathematical Society. All Rights Reserved) readonly def
/FullName (CMR12) readonly def
/FamilyName (Computer Modern) readonly def
/Weight (Medium) readonly def
/ItalicAngle 0 def
/isFixedPitch false def
end readonly def
/FontName /CMR12 def
/PaintType 0 def
/FontType 1 def
/FontMatrix [0.001 0 0 0.001 0 0] readonly def
/Encoding 256 array
0 1 255 {1 index exch /.notdef put} for
dup 45 /hyphen put
dup 97 /a put
dup 105 /i put
dup 108 /l put
dup 109 /m put
dup 110 /n put
dup 112 /p put
dup 114 /r put
dup 115 /s put
dup 116 /t put
readonly def
/FontBBox{-34 -251 988 750}readonly def
/UniqueXX 5000794 def
currentdict end
currentfile eexec
9b9c1569015f2c1d2bf560f4c0d52257bacdd6500abda5ed9835f6a016cfc8f0
0b6c052ed76a87856b50f4d80dfaeb508c97f8281f3f88b17e4d3b90c0f65ec3
79791aacdc162a66cbbc5be2f53aad8de72dd113b55a022fbfee658cb95f5bb3
2ba0357b5e050fddf264a07470bef1c52119b6fbd5c77ebed964ac5a2bbec9d8
b3e48ae5bb003a63d545774b922b9d5ff6b0066ece43645a131879b032137d6d
823385fe55f3402d557fd3b4486858b2a4b5a0cc2e1bf4e2a4a0e748483c3bcf
5de47cc5260a3a967cac70a7a35b88b54315191d0423b4065c7a432987938c6b
edad3b72ad63c2918b6e5a2017457e0d4ebc204a520640fd7c4d05e35ea5486f
a43d0e970787203855daccb1ed0b16325828b13b7c767a1a58c87902f0546ea5
404440fa6526975783c2d7a9572b8e5d5176bac598b8960609f49016aebf3763
89c1adfe6a1ffc0c53b3acd9d168ec3a278fd4f1d9b085dc2df701346c9d0887
3d230a161692b42a45bb5da343b4edd839dd60685a59aaa49fc65cd8e2ad2a9c
5cab953495172a1a9f40d5f38e922443a519dd96f667201a408bd1d89e35f4ab
98e2f68c3366efc14b5afe1018d9c845d808d4f8e07ea8168518a171ab4d6e21
70eeac099eb7ef46eb9781384da1fac3b3133bb718bc80082eaea88759745188
f266b31d0c7e791d633f16ed94e05517a32163e74cbd96dc5db066f2a5313d6d
7f09465608cb404613e0f058073af000e5bdfafbbf9da0c0d5c02a3447f2cdc1
f56481901e34265c26d331ac3f85bdcbc7c51ef9eddf2b9c189c5253f8e74282
d6f053d7d183ae17ea175e5ebc401e67d21a9fea139cbbf3bb1358c713a75843
b39a69aa2b1a7b975f53ff22d1dc3bdf7acd17afa1da21568310c68241b31d3d
03bf404bd30baf9cc19c75b958bce7155f03cb0cfe2cae0327aad4b603284a51
7c26de75b8c6f6aaa9debe4aec08ca4b646d787a9dfac85b2c01760e9c6c6162
fbbc67dbd0796831e00c477d8e23c375ffab46d289be9d2328aec2b7534ae4cd
d782ec2453e7787f6e6b4537b46c01545cba6f90b8e9a1bccac1937bceeaa5e7
8e9f368ce067a0a31da98bfbb545be555a7270f0031fadd4f9b186629e5d2c5f
d264f8f24cd5a1c0f68399ff4b29fd77c4a54d8296523410a10a14a0dff5402c
6794a2da5dad394f2bffec9e7956119bef808aecd8e4e9d8dde5972e379da78c
ea76e19f771235ab63666e9f9d5710169042127effc1a4f338aea31988a7f175
a30800e53ed44b6a4fbfdd4320f8b7d3d77d4efc9289cb47f1699ff64078e118
cfde480e7f332af71296dc10eac976cebbc2bf18c6eb02e8596f0690d1b92206
cfde31c3f738349eda51e0282795aebb6f889e2698a847bbbe94ac51184be485
766d694368ecde4a6252f394cd13a0d592a6a103546e218ec3f0b31d88009bfb
a45d48ca43ab3d0611b6c263af127c1fc760428e2b9c258973c24a147573467a
692c54d12e3fae3b143e1f57d9ac9a039b1706f0e651734f1ccb6f5a17d0c705
7483e1f1b1dddbc9895508c173383dca0e70b9e623196b8ad9c9c56d3dde337b
df5faccd352dce2e5692c9c7cf1ee1215c28cbcafd626e339c7e2dc03eefdba3
882b5df2f64f5dae0b763d682a2a9f7f187a0e6f8ba0d61141f419787da05b59
6a01ca7adda96bbba1a9980abbf7c38d84e599a91d9c2d1842769ea3ad69698f
5e2f8e3f37e698fd5a963623698fb1d48745047e98beba98a80672e2b0e8743b
21655f81008b080f12ff5139c12d75ea6696577f6d0f478b28e5d52acf9a7a5f
26f6cc0a74cf9cf64b67ccfccdb9134384bbdee86625d877992e3fba7c0566b3
c1b5b041b7c62fc236cebb927b53e6c10216e06cf7c19ca47653088e7ff670a5
a79085628bef3b2029014acb1ecac20a359719aedc0837aa7b4ec0fd76eda134
28ab7e599492a03242a6a5e40354750ef828d00dc9501c958a801f2ff17d78ca
eedf6a18b8b9e51173b3c23c3ae57f71a5b5487a778d32e02b5042b5c4b23da1
1d2b662dea3edadd01133a60273cc1014f7230ffc20d069a07cc2d8e73b5a123
721998e1e767d79d43fd22f37ad5d5a1a851a69ced60da04da4bccc608090f82
0aa225f5d92f0d1f6d534e5c4a31d74e7857cfe3e4ead12d776a7167ed89e7d3
10023cfbd3fee6adaf4cf0261a70d4386e0f30c5d176addd1dc4dfc4f2f95a75
cfef55687255afe66df2c15df3496507e1a2ba251b401c6f76f52c3d4cb99d50
d08dc4b21010fe3fecd512b454ec1dc96ffeb0700697ec732691b7f0c43e6a90
5f21aa45462b00bc0ce5c62a64276d5aa84787425ac494d0623e00744d400548
dc3ad6040a21cb12be177d5bd8465f124346c1cb4c444c7fb82b7d112a50ad1c
fa19d3c24371f3b2627dcc6c4a471f8c737e13a21213b25bfbdea6df6cc894aa
c99969138bfe9f3b5fd56ae00f464c71ba553032340ee9fd4595cd829d1af0d6
c9797c3e185174c56a7c506e556b6bc2d00e9947c5e3b609a3b12eae5a88eba1
9dc1831b5421f49878e151db4193550ccd44b86d2a1afe299f7ad96e30ec4582
cb67dd68522033face368c977029e5a5dec25650743a6a7f3baa12b6af1d4b74
fa5c57ab7d10caad56c8c69644c704c533305df1731c920495fdbf6a4dd04bc2
5e96a0fa24970e61ddb49bee4d46d6a4b663c49f8af4572e29720f8d462ac795
edcef85d5f9da9913ec6900013ba9c71eaec5d740c567f0d7ca0bd57ba475885
c0f4e5e062ab050eae7cbccabb9cb62fe290f4bf067c2c5de5431a2d9718d2db
f3d6fcb1ea09ba54ef74a20d1a262074c1075159f2d8db299a296eebebcc822d
45086b01c548803adcaf582a59039231d1937b3300235ae9119ddfba170f2820
cddca0b15d028ca94390f6676ad919f380e2f94976f0aff82a08b88b088668c4
3e61d9cb2a7b99da15bbb0a1240b31bd807337ccd523a09a469131e3de38704f
75caf6f34e84437ae080a12dee257a0e5e65aeb9cad45c796e205af884e78ffb
361781e1feb6c40cad40508aa0f58e211a2efd542b459be55f68abc3f789cbf0
83927a271cf384dd0f411aea14066c2dd32c0f2fdb73a8d2698460063c26738d
efa31baaf20988cbfbe73a73d5b08537eb738246995028dac1cca0e4188b5096
3b45d7fed7deb94d6397834671cfd03541a0c8fc34359d51314f928cf2853e40
fc27746a5a22ec53025caecb478dbd9f8adfb85b50b82a38bfb7ba1877675abb
7172e91fe76b3af6fbe4cc314fa2237fea7c1e16bbec9033579f12b102fd7ca8
dc0b885f20aaccd5c0fefadc43149e5b47e0cfd877c5a49c9549315ddeaf2dcf
7417cdc89cc03308e2e9e640569b0a31e1671b504ef67b8e7e55e8880320817f
0b12c04e7359ddcb08d4097f212594c8af95335d4b79821ae0
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark

%%EndFont 
TeXDict begin 40258431 52099146 1000 600 600 (pspic2.dvi)
@start /Fa 138[44 44 44 44 1[44 44 44 44 44 2[44 5[44
99[{}11 83.022 /CMTT10 rf /Fb 139[46 46 46 1[65 1[65
98 33 2[33 7[59 51[39 45[{}10 119.552 /CMR12 rf end
TeXDict begin

1 0 bop 807 1138 a
 tx@Dict begin tx@NodeDict begin {12.65715 3.8 27.96642 13.9832 4.42857
} false /N@nat 16 {InitRnode } NewNode end end
 807 1138 a 31 w @beginspecial @setspecial
 tx@Dict begin STP newpath 0.8 SLW 0. setgray  0. true 3.8 neg 3.8
neg 24.16641 12.65715 .5 Frame  gsave 0.8 SLW 0. setgray 0 setlinecap
stroke  grestore end


@endspecial Fb(nat)2146 1115 y
 tx@Dict begin tx@NodeDict begin {10.0 6.59999 46.76619 23.38309 1.7
} false /N@elt 16 {InitRnode } NewNode end end
 2146 1115 a 31 w @beginspecial
@setspecial
 tx@Dict begin STP newpath 0.8 SLW 0. setgray  0. true 3.8 neg 6.59999
neg 42.96619 10.0 .5 Frame  gsave 0.8 SLW 0. setgray 0 setlinecap stroke
 grestore end
 
@endspecial Fb(param)709 671 y
 tx@Dict begin tx@NodeDict begin {13.79999 3.8 51.54443 25.77222 4.99998
} false /N@natlist 16 {InitRnode } NewNode end end
 709 671 a
31 w @beginspecial @setspecial
 tx@Dict begin STP newpath 0.8 SLW 0. setgray  0. true 3.8 neg 3.8
neg 47.74443 13.79999 .5 Frame  gsave 0.8 SLW 0. setgray 0 setlinecap
stroke  grestore end
 
@endspecial Fb(nat-list)2230
671 y
 tx@Dict begin tx@NodeDict begin {13.79999 3.8 26.47809 13.23904 4.99998
} false /N@list 16 {InitRnode } NewNode end end
 2230 671 a 32 w @beginspecial @setspecial
 tx@Dict begin STP newpath 0.8 SLW 0. setgray  0. true 3.8 neg 3.8
neg 22.67809 13.79999 .5 Frame  gsave 0.8 SLW 0. setgray 0 setlinecap
stroke  grestore end
 
@endspecial
Fb(list)1395 1101 y
 tx@Dict begin gsave STV newpath 0.8 SLW 0. setgray  /ArrowA { moveto
} def /ArrowB { BeginArrow 1.  1.  scale false 0.4 1.4 1.5 2. Arrow
 EndArrow  } def /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 0.0 0.0
0 0 /N@elt /N@nat InitNC { NCLine  } if end gsave 0.8 SLW 0. setgray
5.0 3.0 -2 0 add DashLine  grestore  grestore end
 1395 1101 a 1395 1101 a
 tx@Dict begin tx@NodeDict begin /t 0.5 def LPut end PutBegin  end
 1395 1101
a 1395 1101 a
 tx@Dict begin { 5.0 tx@Dict /NCLW known { NCLW add } if 47.24959 6.11111
0.0 NAngle 90 add  Uput exch pop add a PtoC h1 add exch w1 add exch
} PutCoor PutBegin  end
 1395 1101 a 1199 1127 a Fa(inclusion)1395
1101 y
 tx@Dict begin PutEnd  end
 1395 1101 a 1395 1101 a
 tx@Dict begin PutEnd  end
 1395 1101 a 1395 1101
a
 tx@Dict begin tx@NodeDict begin /t 0.2 def LPut end PutBegin  end
 1395 1101 a 1395 1101 a
 tx@Dict begin { 5.0 tx@Dict /NCLW known { NCLW add } if 0.0 0.0 0.0
NAngle 90 sub  Uput exch pop add a PtoC h1 add exch w1 add exch } PutCoor
PutBegin  end
 1395 1101 a 1395 1101 a
 tx@Dict begin tx@NodeDict begin {0.0 0.0 } false /N@dectarget 10 {InitPnode
} NewNode end end
 1395
1101 a 1395 1101 a
 tx@Dict begin PutEnd  end
 1395 1101 a 1395 1101 a
 tx@Dict begin PutEnd  end
 1395 1101
a 1395 1101 a
 tx@Dict begin gsave STV newpath 0.8 SLW 0. setgray  /ArrowA { moveto
} def /ArrowB { BeginArrow 1.  1.  scale false 0.4 1.4 1.5 2. Arrow
 EndArrow  } def /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 0.0 0.0
0 0 /N@nat /N@natlist InitNC { NCLine  } if end gsave 0.8 SLW 0. setgray
0 setlinecap stroke  grestore  grestore end
 1395 1101 a 1395 1101 a
 tx@Dict begin tx@NodeDict begin /t 0.5 def LPut end PutBegin  end
 1395 1101 a 1395
1101 a
 tx@Dict begin { 5.0 tx@Dict /NCLW known { NCLW add } if 36.74968 6.11111
2.22223 NAngle 90 sub  Uput exch pop add a PtoC h1 add exch w1 add
exch } PutCoor PutBegin  end
 1395 1101 a 1243 1118 a Fa(imports)1395 1101 y
 tx@Dict begin PutEnd  end

1395 1101 a 1395 1101 a
 tx@Dict begin PutEnd  end
 1395 1101 a 1395 1101 a
 tx@Dict begin gsave STV newpath 0.8 SLW 0. setgray  /ArrowA { moveto
} def /ArrowB { BeginArrow 1.  1.  scale false 0.4 1.4 1.5 2. Arrow
 EndArrow  } def /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 0.0 0.0
0 0 /N@list /N@natlist InitNC { NCLine  } if end gsave 0.8 SLW 0. setgray
0 setlinecap stroke  grestore  grestore end
 1395
1101 a 1395 1101 a
 tx@Dict begin tx@NodeDict begin /t 0.6 def LPut end PutBegin  end
 1395 1101 a 1395 1101 a
 tx@Dict begin { 5.0 tx@Dict /NCLW known { NCLW add } if 36.74968 6.11111
2.22223 NAngle 90 add  Uput exch pop add a PtoC h1 add exch w1 add
exch } PutCoor PutBegin  end
 1395 1101
a 1243 1118 a Fa(imports)1395 1101 y
 tx@Dict begin PutEnd  end
 1395 1101 a 1395
1101 a
 tx@Dict begin PutEnd  end
 1395 1101 a 1395 1101 a
 tx@Dict begin gsave STV newpath 0.8 SLW 0. setgray  /ArrowA { moveto
} def /ArrowB { BeginArrow 1.  1.  scale false 0.4 1.4 1.5 2. Arrow
 EndArrow  } def /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 0.0 0.0
0 0 /N@elt /N@list InitNC { NCLine  } if end gsave 0.8 SLW 0. setgray
0 setlinecap stroke  grestore  grestore end
 1395 1101 a 1395 1101
a
 tx@Dict begin tx@NodeDict begin /t 0.5 def LPut end PutBegin  end
 1395 1101 a 1395 1101 a
 tx@Dict begin { 5.0 tx@Dict /NCLW known { NCLW add } if 36.74968 6.11111
2.22223 NAngle 90 sub  Uput exch pop add a PtoC h1 add exch w1 add
exch } PutCoor PutBegin  end
 1395 1101 a 1243 1118 a Fa(imports)1395
1101 y
 tx@Dict begin PutEnd  end
 1395 1101 a 1395 1101 a
 tx@Dict begin PutEnd  end
 1395 1101 a 1395 1101
a
 tx@Dict begin gsave STV newpath 1.5 SLW 0. setgray  /ArrowA { BeginArrow
1.  1.  scale false 0.4 1.4 1.5 2. Arrow  EndArrow  moveto } def /ArrowB
{ } def /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 0.0 0.0 0 0 /N@natlist
/N@list InitNC { yB yA sub xB xA sub Atan dup 15.  add /AngleA ED 15.
 sub 180 add /AngleB ED 0.67  0.67  NCCurve  } if end gsave 1.5 SLW
0. setgray 5.0 3.0 0 -1 add DashLine  grestore  grestore end
 1395 1101 a 1395 1101 a
 tx@Dict begin tx@NodeDict begin /t 0.7 def LPut end PutBegin  end
 1395 1101 a 1395 1101 a
 tx@Dict begin { 5.0 tx@Dict /NCLW known { NCLW add } if 0.0 0.0 0.0
NAngle 90 sub  Uput exch pop add a PtoC h1 add exch w1 add exch } PutCoor
PutBegin  end
 1395
1101 a 1395 1101 a
 tx@Dict begin tx@NodeDict begin {0.0 0.0 } false /N@decsource 10 {InitPnode
} NewNode end end
 1395 1101 a 1395 1101 a
 tx@Dict begin PutEnd  end
 1395 1101
a 1395 1101 a
 tx@Dict begin PutEnd  end
 1395 1101 a 1395 1101 a
 tx@Dict begin gsave STV newpath 0.8 SLW 0. setgray  /ArrowA { moveto
} def /ArrowB { BeginArrow 1.  1.  scale false 0.4 1.4 1.5 2. Arrow
 EndArrow  } def /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 0.0 0.0
0 0 /N@decsource /N@dectarget InitNC { NCLine  } if end gsave 0.8 SLW
0. setgray 3.0 -2 0 add DotLine  grestore  grestore end
 1395 1101 a eop
end
userdict /end-hook known{end-hook}if
%%Trailer
cleartomark
countdictstack exch sub { end } repeat
restore
%%EOF
